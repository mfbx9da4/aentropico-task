<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ng-newsletter</title>
  
  <subtitle>The original Angular newsletter</subtitle>
  <link href="http://www.ng-newsletter.com//atom.xml" rel="self"/>
  <link href="http://www.ng-newsletter.com/"/>
  <id>urn:uuid:f9f1296d-09a0-5a3b-b284-b53e7d2307ff</id>
  <updated>2014-01-23T15:22:11-08:00</updated>
  <rights>Copyright (c) 2014, Fullstack.io, LLC</rights>
  <author>
    <name>Ari Lerner</name>
  </author>
  
  <entry>
    <title type="html">Embedding Angular in the physical world</title>
    <link href="http://www.ng-newsletter.com/posts/embedded-angular.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/embedded-angular.html"/>
    <updated>2014-01-21T00:00:00-08:00</updated>
    <id>urn:uuid:f3cc913b-9910-54de-8dee-0a76f6a93b8f</id>
    <summary>How to prototype your $3.2 billion dollar business on Angular in 20 minutes


Today’s article is based upon the ngConf talk presented January 2014. See the video at the end of this article


We’re flexing our imagination and extending the reach of...</summary>
    <content type="html"><![CDATA[<h3>How to prototype your $3.2 billion dollar business on Angular in 20 minutes</h3>

<blockquote>
<p>Today&rsquo;s article is based upon the ngConf talk presented January 2014. See the video at the <a href="#video">end of this article</a></p>
</blockquote>

<p>We&rsquo;re flexing our imagination and extending the reach of our Angular application deep into hardware. In this post, we&rsquo;re going to be looking at C++ code, the built-in language we need to use to program the Arduino. Although we will discuss how each component is built in C++, this article is not a C++ tutorial.</p>

<p><img src="/images/arduino/app.png" style="float: right; padding: 10px; margin: 10px; max-width: 400px; width: 400px;" alt="Completed app" /></p>

<p>We&rsquo;re using a fantastic open-source hardware platform: the Arduino. It is a single-board microcontroller intended to make the application of interactive objects or environments more accessible. The hardware consists of an open-source hardware board designed specifically to allow uploading and reprogramming of the chip without a chip programmer. </p>

<p>In essence, the Arduino is the ultimate prototyping hardware interface.</p>

<p>The source code for this project is available in its entirety on GitHub at <a href="http://d.pr/1Ncy">https://github.com/fullstackio/ng-diuno</a>.</p>

<h3>Why not a plug computer or the Raspberry Pi?</h3>

<p>Although the Raspberry Pi and other small form-factor computers are incredible tiny computers, oftentimes, their power is too much for an embedded application. For instance, powering a watch with a Raspberry Pi is likely to cause the watch to run out of power within a few hours. Additionally, strapping a Raspberry Pi to our wrists is likely to be uncomfortable.</p>

<p>For products like wearables, it&rsquo;s often a better choice to use custom-built hardware. At the prototype stage, it can become cumbersome and expensive just to get a physical prototype ready to test.</p>

<p>The Arduino gives us a great environment to build and prototype hardware that will eventually become products of their own. Alongside the Arduino, Angular itself is a fantastic prototyping tool, as well, as we can rapidly achieve impressive results in our web applications. The combination of these two technologies gives us the ability to rapidly craft a hardware-based product with incredibly functional visual interaction in little time. </p>

<blockquote>
<p>Angular is suitable for both prototype and production applications.</p>
</blockquote>

<h3>Understanding hardware</h3>

<p>When doing any work with hardware, we need to understand a few fundamentals about how to interact with the physical components.</p>

<p>At its root, the Arduino is an open-source hardware platform that enables us to easily write software to prototype components in an easily manageable way. Typical Arduinos include a Programmable Integrated Circuit (PIC) that can be easily programmed and re-programmed through USB. Most Arduinos can be powered through USB, wall sockets, or batteries.</p>

<p>All Arduino boards include <em>sockets</em> where we can place different components, LEDs, potentiometers, LCD screens, sensors, etc. These <em>sockets</em> are referred to as <strong>pins</strong>. There are several different types of pins available on an Arduino: There are digital pins that allow us to apply a static amount of current; there are analog pins that allow us to apply a dynamic amount of current; and there are special pins. For more information about the different pin types, check out the <a href="http://arduino.cc/">Arduino documentation</a></p>

<p>With these pins, there are only a few actions we&rsquo;re interested in managing:</p>

<ul>
<li>Turning pins HIGH/LOW</li>
<li>Applying a variable amount of current</li>
<li>Measuring voltage across a pin</li>
</ul>

<p>Turning a pin <strong>HIGH</strong> typically means we&rsquo;re applying voltage to the pin, whereas turning a pin <strong>LOW</strong> typically means we&rsquo;re removing voltage from the pin. Due to how electricity works, changing the state of the pin can change how our circuits behave. For instance, if we place an LED between the ground and a digital pin, when current is not allowed through the digital pin (i.e., the pin is said to be in a <strong>LOW</strong> state), the LED will not light up; however, when current is applied to the pin, electricity will <em>want</em> to flow through the LED to the ground.</p>

<h3>What we&rsquo;re building</h3>

<p>We&rsquo;re going to demonstrate how to build a prototype remotely controlled temperature monitor (like the <a href="https://nest.com/">NEST</a>) using inexpensive and open-source hardware. The total cost of our prototype project is about $85.50 (without trying very hard to find more inexpensive hardware).</p>

<p>In today&rsquo;s project, we&rsquo;re not going to dive into actually changing the temperature in a room, as the scope is focused on getting Angular and the Arduino to play well together.</p>

<h3>The video demo</h3>

<iframe width="420" height="315" src="//www.youtube.com/embed/-rDZk40Wn1w" frameborder="0" allowfullscreen></iframe>

<blockquote>
<p>If you are interested in further information, feel free to email us at: <a href="mailto:us@fullstack.io">us@fullstack.io</a> with any questions.</p>
</blockquote>

<p><img src="/images/arduino/connected.jpg" /></p>

<h3>Materials</h3>

<p>In order to build our temperature sensor prototype, we&rsquo;ll need to gather the following components:</p>

<ul>
<li><a href="http://arduino.cc/">Arduino</a></li>
<li><a href="http://www.amazon.com/RioRand-Upgraded-Ethernet-Arduino-Duemilanove/dp/B00EU7447Y/ref=sr_1_2?ie=UTF8&amp;amp;qid=1390262512&amp;amp;sr=8-2&amp;amp;keywords=arduino+ethernet+shield">Arduino Ethernet shield</a> OR <a href="http://www.amazon.com/Adafruit-Breakout-Onboard-Ceramic-Antenna/dp/B00H232MUE/ref=pd_sim_sbs_e_1">Adafruit Wifi Breakout board</a></li>
<li><a href="http://www.amazon.com/365buying-DS18B20-Temperature-Sensor-Waterproof/dp/B008HODWBU/ref=sr_1_2?ie=UTF8&amp;amp;qid=1390261462&amp;amp;sr=8-2&amp;amp;keywords=DS18S20">DS18S20 Temperature sensor</a></li>
<li><a href="http://www.amazon.com/E-Projects-4-7k-Resistors-Watt-Pieces/dp/B00B5RCX6Q/ref=sr_1_2?ie=UTF8&amp;amp;qid=1390261492&amp;amp;sr=8-2&amp;amp;keywords=4.7k+resistor">4.7K ohm resistor</a></li>
<li><a href="http://www.amazon.com/Round-Ultra-Bright-8000-Assortment/dp/B00FB3DFH6/ref=sr_1_20?s=electronics&amp;amp;ie=UTF8&amp;amp;qid=1390261674&amp;amp;sr=1-20&amp;amp;keywords=red+bright+LED">red LED</a></li>
<li><a href="http://www.amazon.com/Super-Bright-Blue-3000-Pcs/dp/B007XBI1KK/ref=pd_sim_sbs_pc_9">blue LED</a></li>
</ul>

<p>We&rsquo;ve assembled our shopping list on Amazon if you want to follow along with the equipment we&rsquo;re using <a href="http://d.pr/XacU">here</a>.</p>

<blockquote>
<p>For a full image of our schematic, check out the <a href="#schematic">#schematic</a> later in the article.</p>
</blockquote>

<h3>Designing our system</h3>

<p>Our system will require several components to be able to deliver the application from the Arduino:</p>

<ol>
<li>An HTTP server on the Arduino</li>
<li>A way to deliver the Angular app</li>
<li>A method for communicating to the Angular app from the Arduino</li>
<li>A method for communicating to the Arduino from the Angular app</li>
</ol>

<p>In building our system, we&rsquo;ll need to be able to communicate between the Arduino and the web browser. From the Arduino, we&rsquo;ll need to deliver the Angular app to the browser requesting the Angular app. Additionally, we&rsquo;ll need to be able to send statuses of pins through to the Angular app.</p>

<p>From the opposite side, we&rsquo;ll need to be able to modify the pin states on the Arduino from the Angular app. When we click a button, we&rsquo;ll want the Arduino to respond. In this article, we&rsquo;ll explore how to manage both of these types of interactions using Angular.</p>

<blockquote>
<p>Although we&rsquo;re using Angular in this article, many of the techniques presented here to interact with the Arduino can be applied by any JavaScript framework.</p>
</blockquote>

<h3>Designing the Angular delivery</h3>

<p>In order to deliver an Angular app through the Arduino, we&rsquo;ll need to be able to send the app to the browser. We have several different options of how to deliver the source of our apps. We can either:</p>

<ul>
<li>Write the entire app inline with our C code</li>
<li>Send files from an SD card (if available on the Arduino/boards)</li>
<li>Send content from a remote web server</li>
</ul>

<p>It&rsquo;s impractical to inline our entire Angular application with the Arduino source code, as it will quickly fill up the entire programmable space (for instance, the Arduino UNO board has only 32kb of space for its control code). This approach only makes sense when delivering tiny JavaScript applications. We can rule this out as an approach to building our application.</p>

<p>Since we&rsquo;re prototyping the application, we want to easily be able to modify the code and the running system as we write it. This requirement makes writing to an SD card less than ideal for writing our Angular app in prototyping phase.</p>

<p>When we&rsquo;re ready to deliver the final system, we can store the entire application on an SD card if the system calls for it. For instance, if we have a product that we don&rsquo;t want to expose to the entire web, we can store all necessary content locally on the SD card and be completely disconnected from the Internet.</p>

<p>Since we&rsquo;re prototyping our temperature sensor, we will allow the browser to fetch its dependencies like normal, rather than store them entirely on the Arduino. That is, we&rsquo;ll send HTML back to the browser that tells it to retrieve its dependencies off-site.</p>

<h3>Schematic</h3>

<p>The full schematic of our completed prototype will look like the following:</p>

<div id="schematic" name="schematic"></div>

<p><img src="/images/arduino/schematic.png" /></p>

<h3>Getting started with the Arduino</h3>

<p>Once we have an Arduino available, we&rsquo;ll need to have a way to communicate to the Arduino over USB. We&rsquo;ll use the Arduino IDE to apply software to the PIC. The Arduino IDE is freely available online through the Arduino homepage <a href="http://arduino.cc/">here</a>. Any time that we refer to <em>C</em> code, we&rsquo;re talking about the code that we&rsquo;ll write in our Arduino IDE.</p>

<p>Let&rsquo;s test our our Arduino to get started. Inside our Arduino IDE, copy and paste the following code:</p>
<pre class="highlight c"><span class="kt">int</span> <span class="n">led</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">pinMode</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="n">digitalWrite</span><span class="p">(</span><span class="n">led</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</pre>
<blockquote>
<p>This is the sample app called <em>Blink</em> that&rsquo;s distributed with the Arduino IDE.</p>
</blockquote>

<p>To test our Arduino, we&rsquo;ll place an LED with the long side of the LED in the ground pin and the short side in the pin labeled <em>13</em>.</p>

<p><img src="/images/arduino/arduino.png" /></p>

<h4>Click the <em>upload</em> button.</h4>

<p>The IDE will compile the code first. If there is nothing wrong with the code then it will upload it to the Arduino, connected by USB. If the Arduino successfully receives the new sketch, then we should see the LED connected in pin 13 blink on and off, waiting a second between each blink.</p>

<p>If the software doesn&rsquo;t compile, check to make sure there are no stray marks in the code. Oftentimes, the problem is that we simply forgot a <code>;</code> or added one too many <code>}</code>.</p>

<p>If the sketch doesn&rsquo;t upload to the board, then check to make sure the cable is connected properly. Check to make sure the device shows up on the computer. We might need to change the programmer or the serial board (both of these can be found in the <code>Tools</code> menu bar item). Check to make sure the Serial port is set to the Arduino device (if on a Linux or OSX machine, these will show up as /dev/tty.xxxx where the xxxx is a name that indicates the a port).</p>

<blockquote>
<p>Using the Arduino Uno, we use the programmer as <strong>AVR ISP.</strong></p>
</blockquote>

<p>Let&rsquo;s create a new sketch that we&rsquo;ll use to create our Arduino app. Add the following base content to our sketch:</p>
<pre class="highlight c"><span class="cp">#include &lt;SPI.h&gt;
#include &lt;Flash.h&gt;
#include &lt;OneWire.h&gt;

#define DEBUG 1
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Our setup code goes here
</span><span class="cp">#if DEBUG
</span>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="cp">#endif
</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Our loop code goes here
</span><span class="p">}</span>

</pre>
<blockquote>
<p>We&rsquo;ve included a <code>DEBUG</code> flag in our code so that, as we&rsquo;re developing our Arduino app, we can compile the code with or without debugging statements easily.</p>

<p>When we want to include debugging statements, we&rsquo;ll set the <code>DEBUG</code> flag to <code>1</code>, as in above. When we&rsquo;re ready to <em>deploy</em> the application, we can turn the <code>DEBUG</code> flag to <code>0</code> and reduce the size and latency of the application in practice.</p>
</blockquote>

<h3>Connecting to the net</h3>

<p>In order to actually get our Arduino on the net, we have to use either an ethernet shield (or breakout board) or a wifi shield (or breakout board). When using the ethernet shield, we need to be connected to a router that&rsquo;s accessible by a computer.</p>

<h4>Ethernet shield</h4>

<p>When using the ethernet shield, the code to get connected online is incredibly simple:</p>
<pre class="highlight c"><span class="c1">// Set the MAC address
</span><span class="k">static</span> <span class="n">uint8_t</span> <span class="n">mac</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0xDD</span><span class="p">,</span><span class="mh">0xAD</span><span class="p">,</span><span class="mh">0xBE</span><span class="p">,</span><span class="mh">0xAF</span><span class="p">,</span><span class="mh">0xFD</span><span class="p">,</span><span class="mh">0xED</span> <span class="p">};</span>

<span class="c1">// Set an IP for our network
</span><span class="n">byte</span> <span class="n">ip</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">67</span> <span class="p">};</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="cp">#if DEBUG
</span>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Setting up the Ethernet card...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
<span class="cp">#endif
</span>  <span class="n">Ethernet</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">mac</span><span class="p">,</span> <span class="n">ip</span><span class="p">);</span>
  <span class="c1">// ...
</span><span class="p">}</span>
</pre>
<p>Provided we&rsquo;ve created an IP that&rsquo;s available on the network, when we boot our Arduino it will be accessible by the IP we&rsquo;ve set above.</p>

<p>We can also use DHCP to allow the network to give us an available IP. The only change we need to take care of in the code is to pass the <code>Ethernet.begin()</code> function only a single argument of the MAC address.</p>
<pre class="highlight c"><span class="c1">// Set the MAC address
</span><span class="k">static</span> <span class="n">uint8_t</span> <span class="n">mac</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mh">0xDD</span><span class="p">,</span><span class="mh">0xAD</span><span class="p">,</span><span class="mh">0xBE</span><span class="p">,</span><span class="mh">0xAF</span><span class="p">,</span><span class="mh">0xFD</span><span class="p">,</span><span class="mh">0xED</span> <span class="p">};</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="cp">#if DEBUG
</span>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Setting up the Ethernet card...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">));</span>
<span class="cp">#endif
</span>  <span class="n">Ethernet</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="n">mac</span><span class="p">);</span>
  <span class="c1">// ...
</span><span class="p">}</span>
</pre>
<p>Note that using DHCP instead of setting a static IP will increase the size of the sketch dramatically. It&rsquo;s usually better to set the IP as a static IP on the network to save on this space.</p>

<h4>WiFi shield</h4>

<p><img src="/images/arduino/ethernet.jpg" /></p>

<p>If we want to use a wifi shield or breakout board instead of the ethernet shield, we&rsquo;ll need to be aware of the size of our sketch. When using the <a href="http://www.adafruit.com/products/1469">Adafruit CC3000</a>, we&rsquo;ll need to include the Adafruit library.</p>

<p>Grab the library at <a href="http://learn.adafruit.com/adafruit-cc3000-wifi/cc3000-library-software">http://learn.adafruit.com/adafruit-cc3000-wifi/cc3000-library-software</a> and download it. The library can be installed as we described above.</p>

<p>The CC3000 is fairly heavyweight, in terms of the compiled library size, so when using it, we&rsquo;ll need to make sure we have enough space to run our actual application.</p>

<p>To set up the CC3000 to fetch an IP from the network, the above code stretches out to:</p>
<pre class="highlight c"><span class="cp">#define ADAFRUIT_CC3000_IRQ   3
#define ADAFRUIT_CC3000_VBAT  5
#define ADAFRUIT_CC3000_CS    10
</span>
<span class="n">Adafruit_CC3000</span> <span class="n">cc3000</span> <span class="o">=</span>
  <span class="n">Adafruit_CC3000</span><span class="p">(</span><span class="n">ADAFRUIT_CC3000_CS</span><span class="p">,</span>
                  <span class="n">ADAFRUIT_CC3000_IRQ</span><span class="p">,</span>
                  <span class="n">ADAFRUIT_CC3000_VBAT</span><span class="p">,</span>
                  <span class="n">SPI_CLOCK_DIV2</span><span class="p">);</span>

<span class="cp">#define WLAN_SSID       &quot;myWireless&quot;
#define WLAN_PASS       &quot;p4ssw0rd&quot;
// Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2
#define WLAN_SECURITY   WLAN_SEC_WPA2
</span>
<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cc3000</span><span class="p">.</span><span class="n">begin</span><span class="p">())</span>
    <span class="p">{</span>
      <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Unable to initialise the CC3000! Check your wiring?&quot;</span><span class="p">));</span>
      <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* Delete any old connection data on the module */</span>
  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Deleting old connection profiles&quot;</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cc3000</span><span class="p">.</span><span class="n">deleteProfiles</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Failed!&quot;</span><span class="p">));</span>
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kt">char</span> <span class="o">*</span><span class="n">ssid</span> <span class="o">=</span> <span class="n">WLAN_SSID</span><span class="p">;</span>             <span class="c1">// Max 32 chars 
</span>  <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Attempting to connect to &quot;</span><span class="p">));</span> <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">ssid</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cc3000</span><span class="p">.</span><span class="n">connectToAP</span><span class="p">(</span><span class="n">WLAN_SSID</span><span class="p">,</span> <span class="n">WLAN_PASS</span><span class="p">,</span> <span class="n">WLAN_SECURITY</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Failed!&quot;</span><span class="p">));</span>
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Connected!&quot;</span><span class="p">));</span>

  <span class="c1">// Wait for DHCP to complete 
</span>  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;Request DHCP&quot;</span><span class="p">));</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">cc3000</span><span class="p">.</span><span class="n">checkDHCP</span><span class="p">())</span>
  <span class="p">{</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// ToDo: Insert a DHCP timeout!
</span>  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p><img src="/images/arduino/wifi.jpg" /></p>

<p>For the duration of this article, we&rsquo;ll be using an ethernet shield to connect to the network.</p>

<h3>Getting started with the Angular app</h3>

<p>As we progress through our application, we&rsquo;ll want to implement the Angular components and the Arduino (hardware) side. We&rsquo;re going to be using the <code>yeoman</code> toolchain to write our Angular app.</p>

<blockquote>
<p>Although we can use any toolchain to write our app, we do need a server running to fetch the Angular app. It&rsquo;s possible to write the app using a tool like Lineman or even just using a basic file server.</p>
</blockquote>

<p>To install Yeoman, ensure that Node and NPM are installed. If they are not, grab the installation package at: <a href="http://nodejs.org">nodejs.org</a>. Once you have them, install Yeoman like so:</p>
<pre class="highlight shell"><span class="gp">$ </span>npm install -g yo
</pre>
<p>Next, we&rsquo;ll need to include the Angular generator, a generator that was written to create a professional Angular app.</p>
<pre class="highlight shell"><span class="gp">$ </span>npm install -g generator-angular
</pre>
<p>We&rsquo;ll use this generator to create our Angular app. Let&rsquo;s create a directory where we&rsquo;ll store our Angular app, then run the generator inside the directory, as follows:</p>
<pre class="highlight shell"><span class="gp">$ </span>mkdir app <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$_</span>
<span class="gp">$ </span>yo angular myTemp
</pre>
<p>The generator will ask a few questions, then generate the application. For our purposes, the defaults are fine.</p>

<p>Once the generator is complete, we&rsquo;ll run the Angular app using the command: <code>grunt serve</code>. This command will launch the server and open our web browser. Note the address that the browser opens as: <code>http://localhost:9000</code>. We&rsquo;ll use this URL in a bit.</p>

<h3>Running the HTTP server</h3>

<p>Now that both of our systems are ready to go, we can start implementing our Arduino web server. Writing a full-blown HTTP server in c++ can be pretty complex. Luckily, the Arduino team has done a fantastic job of packaging up relevant TCP/UDP socket libraries in the built-in <code>Ethernet.h</code> library.</p>

<p>The simplest web server using the <code>Ethernet.h</code> library might look something like:</p>
<pre class="highlight c"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// listen for incoming clients
</span>  <span class="n">EthernetClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">available</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">client</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">connected</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'\n'</span> <span class="o">&amp;&amp;</span> <span class="n">currentLineIsBlank</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">client</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;HTTP/1.1 200 OK&quot;</span><span class="p">);</span>
          <span class="n">client</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;Content-Type: text/html&quot;</span><span class="p">);</span>
          <span class="n">client</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;Connection: close&quot;</span><span class="p">);</span>
          <span class="n">client</span><span class="p">.</span><span class="n">println</span><span class="p">();</span>
          <span class="n">client</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hi from the Arduino&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'\n'</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">currentLineIsBlank</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="sc">'\r'</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">currentLineIsBlank</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">client</span><span class="p">.</span><span class="n">stop</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>When trying to map HTTP request methods and URL routes, our code can become complex and ugly VERY quickly.</p>

<p>Rather than implement the web server ourselves, we&rsquo;ll use a library, called <a href="https://github.com/ovidiucp/TinyWebServer">TinyWebServer</a>, that abstracts a lot of the ugliness away.</p>

<p>The <code>TinyWebServer</code> library allows us to create a map of request URLs and HTTP methods to point to C functions to handle the request. For instance, when writing our index route, (the base route that responds when we request the root: <code>/</code>), we&rsquo;ll map the URL to the <code>/</code> route as a GET request and point it to a function we&rsquo;ll write in C.</p>

<h4>Implementing TinyWebServer</h4>

<p>To start using the <code>TinyWebServer</code> library, we need to install it in our Arduino IDE. Luckily, installation is easy. Download the <code>TinyWebServer</code> from <a href="https://github.com/ovidiucp/TinyWebServer">https://github.com/ovidiucp/TinyWebServer</a>. In our Arduino IDE, we&rsquo;ll click on the <code>Sketch</code> menu item and click <code>Import Library</code>-><code>Add Library</code>. We&rsquo;ll need to find the library on our system and select it within the new dialog box.</p>

<p>We&rsquo;ll also need to include the <code>Ethernet.h</code> library along with the <code>TinyWebServer</code> library. In the Arduino sketch that we created previously, let&rsquo;s add the lines that create the mapping to our index route:</p>
<pre class="highlight c"><span class="cp">#include &lt;SPI.h&gt;
#include &lt;Flash.h&gt;
#include &lt;TinyWebServer.h&gt;

#define DEBUG 1
</span>
<span class="c1">// index handler
</span><span class="n">boolean</span> <span class="nf">index_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// We need to end the list of handlers
// with a NULL object
</span><span class="n">TinyWebServer</span><span class="o">::</span><span class="n">PathHandler</span> <span class="n">handlers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">TinyWebServer</span><span class="o">::</span><span class="n">GET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index_handler</span> <span class="p">},</span>
  <span class="p">{</span><span class="nb">NULL</span><span class="p">},</span>
<span class="p">};</span>

<span class="c1">// Headers to retrieve. This list needs
// to be closed with a NULL object
</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">headers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="nb">NULL</span><span class="p">};</span>

<span class="c1">// Create the TinyWebServer handler
</span><span class="n">TinyWebServer</span> <span class="n">web</span> <span class="o">=</span> <span class="n">TinyWebServer</span><span class="p">(</span><span class="n">handlers</span><span class="p">,</span> <span class="n">headers</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Our setup code goes here
</span><span class="cp">#if DEBUG
</span>  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
<span class="cp">#endif
</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Process the next request in the loop
</span>  <span class="n">web</span><span class="p">.</span><span class="n">process</span><span class="p">();</span>
<span class="p">}</span>

</pre>
<p>With this updated code, we have our <em>map</em> of routes and HTTP method requests. When a request comes in, the TinyWebServer handler we created, called <code>web</code>, will process the request on the next loop cycle.</p>

<p>If there is a request, the <code>web.process()</code> function (in the <code>loop()</code> function above) will block until the request is finished being handled.</p>

<blockquote>
<p>Note that the handlers and headers lists need to end with a <strong>NULL</strong> object.</p>
</blockquote>

<p>Every function that we define as a handler for a route will take a single parameter: the address of the <code>TinyWebServer</code> request object created through the client HTTP request. They are expected to return a boolean value that defines whether or not the request should be closed. For every one of our requests, we&rsquo;ll return <code>true</code>, which tells TinyWebServer to close the connection.</p>

<p>We can return <code>false</code> if we want to manage closing the connection manually. For instance, if we wanted to keep the connection around for handling <a href="http://www.w3schools.com/html/html5_serversentevents.asp">Server sent events</a>, for example, we would return <code>false</code> and manage the client connection through the raw <code>Ethernet</code> Client object.</p>

<h4>Why headers[]</h4>

<p>The TinyWebServer library is written to be efficient and do only as much work is needed to handle request mapping. Thus, in order to get any headers from our request, we need to tell our instance what headers we are interested in keeping around so that it only does enough work to handle those headers.</p>

<h4>Sending back HTML</h4>

<p>When a GET request comes in at the <code>/</code> route, the web process will call the <code>index_handler</code> function. From inside this function, we have access to the TinyWebServer object. This <code>TinyWebServer</code> object allows us to interact with the raw HTTP request at a high level.</p>

<p>To send data back from the HTTP request, we can use the <code>print</code> method on the <code>web_server</code> TinyWebServer object. Since we are sending HTML back to the client, we can simply write it directly to the response object.</p>

<p>To send back a simple, blank HTML page with a title, we can write it out using the following code:</p>
<pre class="highlight c"><span class="n">boolean</span> <span class="nf">index_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;html&gt;&lt;head&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;title&gt;Temperature sensor&lt;/title&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;/head&gt;&lt;body&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">));</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<blockquote>
<p>We are using the <code>F()</code> function to tell the Arduino compiler to store the constant strings in flash memory, rather than in SRAM. Since there are orders of magnitude more space available in flash memory (otherwise known as the program space) on the Arduino, it&rsquo;s usually a good practice to get in the habit of storing constant strings in Flash.</p>

<p>One limitation when using flash memory: We cannot manipulate variables in the flash memory, as it&rsquo;s considered static memory.</p>
</blockquote>

<p>When we compile and run this sketch on the Arduino and connect to it in our web browser, we&rsquo;ll get a blank page with a title of &ldquo;Temperature sensor.&rdquo;</p>

<h3>Getting Angular involved</h3>

<p>Up until this point, we haven&rsquo;t touched Angular. Let&rsquo;s get Angular involved. Since we have control of the HTML that is passed back from the Arduino, we can use this flow to pass in an external script to be loaded by the browser. We&rsquo;ll use a single script that will dynamically place the Angular app on the page.</p>

<p>First, we need to tell the C program where our external host that is hosting our Angular app. Since we&rsquo;re developing our application alongside the Arduino, we can set this to be local to our host network.</p>

<blockquote>
<p>In production, we&rsquo;ll want to deploy our code to an external web server and use a DNS name to fetch the script.</p>

<p>It&rsquo;s also possible to use a DNS name to develop locally by changing our router settings to point a DNS lookup to our local server.</p>
</blockquote>

<p>We&rsquo;ll use this host to inject a <code>&lt;script&gt;</code> tag in our HTML in the index router:</p>
<pre class="highlight c"><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">HOST</span> <span class="o">=</span> <span class="s">&quot;10.0.1.2:9000&quot;</span><span class="p">;</span>
<span class="c1">// ...
</span><span class="n">boolean</span> <span class="nf">index_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Temperature sensor&lt;/title&gt;&lt;/head&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;body&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;script id=</span><span class="se">\&quot;</span><span class="s">appscript</span><span class="se">\&quot;</span><span class="s"> src=</span><span class="se">\&quot;</span><span class="s">http://&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">HOST</span><span class="p">);</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;/scripts/scripts.js</span><span class="se">\&quot;</span><span class="s">&gt;&lt;/script&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">));</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>When we load our browser page with our updated index handler, the browser will attempt to load the HOST + <code>/scripts/scripts.js</code> file. In order to prototype locally, we&rsquo;ll need to launch our Yeoman server using the <code>grunt serve</code> command and fetch the new page from the Arduino.</p>

<h3>Embedding Angular</h3>

<p>Now that we have control over the script that the DOM will load, how do we get Angular on the page?</p>

<p>We&rsquo;re going to load everything dynamically onto the page. This method is akin to how Facebook provides its JavaScript SDK API to third-party sites. We&rsquo;ll add our styles and scripts using the <code>scripts.js</code> file.</p>

<p>We&rsquo;ll need to use this script to inject all of our dependencies. We&rsquo;ll also add the <code>ng-app</code> directive to the <code>&lt;body&gt;</code> tag on the fly and set up a directive that will encapsulate our entire view.</p>

<p>In order to fetch the external scripts on our page, we&rsquo;ll need to request the external libraries from the same host domain. We&rsquo;ll use a regular expression to extract the host from our original script on the page:</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">scriptTag</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
  <span class="kd">var</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^http[s]?\:\/\/([^\/?#]+)(?:[\/?#]|$)/i</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nx">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="kd">var</span> <span class="nx">body</span>  <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'body'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
  <span class="kd">var</span> <span class="nx">head</span>  <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'head'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">})();</span>
</pre>
<p>Next let&rsquo;s create two helper functions that will help us place a <code>&lt;link&gt;</code> tag and a <code>&lt;script&gt;</code> tag on our page.</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="c1">// script tag
</span>
  <span class="kd">var</span> <span class="nx">createLinkTag</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'link'</span><span class="p">);</span>
    <span class="nx">link</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'rel'</span><span class="p">,</span> <span class="s1">'stylesheet'</span><span class="p">);</span>
    <span class="nx">link</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'type'</span><span class="p">,</span> <span class="s1">'text/css'</span><span class="p">);</span>
    <span class="nx">link</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'href'</span><span class="p">,</span> <span class="nx">host</span> <span class="o">+</span> <span class="s1">'/'</span> <span class="o">+</span> <span class="nx">src</span><span class="p">);</span>
    <span class="nx">head</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">link</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">createScriptTag</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">async</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">script</span>   <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
    <span class="nx">script</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'src'</span><span class="p">,</span> <span class="nx">host</span> <span class="o">+</span> <span class="s1">'/'</span> <span class="o">+</span> <span class="nx">src</span><span class="p">);</span>
    <span class="nx">script</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="nx">async</span> <span class="o">||</span> <span class="kc">false</span><span class="p">;</span>

    <span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
  <span class="p">};</span>
</pre>
<p>With these two functions, we can place our files on the page. First, we&rsquo;ll set up our link tags on the head element (using the above function) and then our Angular dependencies. Finally, we&rsquo;ll load our app-specific JavaScript files:</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="c1">// ...
</span>
  <span class="c1">// Create the link styles
</span>  <span class="nx">createLinkTag</span><span class="p">(</span><span class="s1">'bower_components/sass-bootstrap/dist/css/bootstrap.css'</span><span class="p">);</span>
  <span class="nx">createLinkTag</span><span class="p">(</span><span class="s1">'styles/main.css'</span><span class="p">);</span>

  <span class="c1">// Setup the angular dependencies
</span>  <span class="nx">createScriptTag</span><span class="p">(</span><span class="s1">'bower_components/angular/angular.js'</span><span class="p">);</span>
  <span class="nx">createScriptTag</span><span class="p">(</span><span class="s1">'bower_components/d3/d3.min.js'</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'scripts/modules/arduino.js'</span><span class="p">,</span>
    <span class="s1">'scripts/app.js'</span><span class="p">,</span>
    <span class="s1">'scripts/services/d3.js'</span><span class="p">,</span>
    <span class="s1">'scripts/directives/mainview.js'</span><span class="p">,</span>
    <span class="s1">'scripts/directives/temperatureGauge.js'</span>
  <span class="p">];</span>

  <span class="c1">// Load the app files
</span>  <span class="nx">arr</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="p">{</span> <span class="nx">createScriptTag</span><span class="p">(</span><span class="nx">src</span><span class="p">);</span> <span class="p">});</span>
  <span class="c1">// ...
</span><span class="p">})();</span>
</pre>
<p>Lastly, we&rsquo;ll need to dynamically assign the <code>ng-app</code> directive to the body element and attach the main-view directive:</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// ...
</span>
  <span class="nx">body</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'ng-app'</span><span class="p">,</span> <span class="s1">'myApp'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">app</span>   <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'div'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">main</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'div'</span><span class="p">);</span>
  <span class="nx">main</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'main-view'</span><span class="p">,</span> <span class="s1">''</span><span class="p">);</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">main</span><span class="p">);</span>
  <span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
<span class="p">})();</span>
</pre>
<p>When our browser fetches this script, we&rsquo;ll have a fully featured running Angular app.</p>

<p><img src="/images/arduino/app.png" /></p>

<p>We have a bit of cleanup that we need to do to ensure that the views can be read from the hosting server and are able to communicate to the hosted server.</p>

<p>First, we need to set the <code>$sce</code>, or the Strict Contextual Escaping service, to be able to load from the hosting URL. Without this step, we&rsquo;ll get a very confusing error saying that the Angular app does not have the proper permissions to load the templates.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$sceDelegateProvider</span><span class="p">,</span> <span class="nx">HOSTED_URL</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$sceDelegateProvider</span><span class="p">.</span><span class="nx">resourceUrlWhitelist</span><span class="p">([</span>
    <span class="s1">'self'</span><span class="p">,</span>
    <span class="nx">HOSTED_URL</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'**'</span>
  <span class="p">]);</span>
<span class="p">});</span>
</pre>
<p>Secondly, we&rsquo;ll need to inject the loaded URL from the <code>&lt;script&gt;</code> tag. We can do this a number of ways, but using a <code>constant</code> will ensure that the value is always set at the start of the Angular app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">'fsArduino'</span>
<span class="p">])</span>
<span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">'HOSTED_URL'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">scriptTag</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'appscript'</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">matches</span> <span class="o">=</span> <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^http[s]?\:\/\/([^\/?#]+)(?:[#]?|$)/i</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Default, just in case
</span>    <span class="k">return</span> <span class="s1">'http://localhost:9000'</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$sceDelegateProvider</span><span class="p">,</span> <span class="nx">HOSTED_URL</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$sceDelegateProvider</span><span class="p">.</span><span class="nx">resourceUrlWhitelist</span><span class="p">([</span>
    <span class="s1">'self'</span><span class="p">,</span>
    <span class="nx">HOSTED_URL</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'**'</span>
  <span class="p">]);</span>
<span class="p">});</span>
</pre>
<h3>Interacting with the Arduino</h3>

<p>Now that we have Angular loading through the Arduino HTTP server, we can start to interact with the board through our Angular app. Before we can actually start to interact with the Arduino from the Angular app, we&rsquo;ll need to know the Arduino&rsquo;s IP.</p>

<p>Since we know the IP from the Arduino code, we can use the same approach to inject the IP from inside the index handler using a <code>&lt;script&gt;</code> tag:</p>
<pre class="highlight c"><span class="n">byte</span> <span class="n">ip</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">32</span> <span class="p">};</span>
<span class="c1">// ...
</span><span class="n">boolean</span> <span class="nf">index_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Temperature sensor&lt;/title&gt;&lt;/head&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;body&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;script&gt;window.ip=</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">ip_to_str</span><span class="p">(</span><span class="n">ip</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">&lt;/script&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;script id=</span><span class="se">\&quot;</span><span class="s">appscript</span><span class="se">\&quot;</span><span class="s"> src=</span><span class="se">\&quot;</span><span class="s">http://&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">HOST</span><span class="p">);</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;/scripts/scripts.js</span><span class="se">\&quot;</span><span class="s">&gt;&lt;/script&gt;&quot;</span><span class="p">));</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="s">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="p">));</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...
</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="nf">ip_to_str</span><span class="p">(</span><span class="k">const</span> <span class="n">uint8_t</span><span class="o">*</span> <span class="n">ipAddr</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
  <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&quot;%d.%d.%d.%d</span><span class="se">\0</span><span class="s">&quot;</span><span class="p">,</span>
      <span class="n">ipAddr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">ipAddr</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">ipAddr</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">ipAddr</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
  <span class="k">return</span> <span class="n">buf</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>With the Arduino IP located on the <code>window</code> object, we can reach it from inside the Angular app.</p>

<h3>The Arduino module</h3>

<p>We&rsquo;ll use a module called <code>fsArduino</code> to contain the interactions between our Angular app and the Arduino. Inside this module, we&rsquo;ll set up bindings that allow us to interact with the Arduino without needing to know the underlying data structure of how we communicate with it.</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'fsArduino'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">'ARDUINO_URL'</span><span class="p">,</span> <span class="s1">'http://'</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">ip</span><span class="p">)</span>
<span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'Arduino'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ARDUINO_URL</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">getPins</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Define getPins
</span>    <span class="p">},</span>
    <span class="na">setPins</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pins</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Define setPins
</span>    <span class="p">}</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="nx">service</span><span class="p">;</span>
<span class="p">});</span>
</pre>
<p>We&rsquo;ll use this Arduino service to get status from, and to set pins on, the Arduino. Note: We&rsquo;re using the <code>constant()</code> of <code>ARDUINO_URL</code> to store the Arduino&rsquo;s IP. </p>

<h3>Getting pin status</h3>

<p>We can get the status of a pin using the service method <code>getPins()</code>, as we&rsquo;ve defined above. Since we&rsquo;re interacting with the Arduino over HTTP, we can simply use the <code>$http</code> service to make a standard HTTP call to our Arduino. </p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">getPins</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">$http</span><span class="p">({</span>
      <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="nx">ARDUINO_URL</span> <span class="o">+</span> <span class="s1">'/pins'</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">},</span>
  <span class="c1">// ...
</span></pre>
<p>Back on the Arduino side, we need to create a route that will receive this request and respond with the status of the pins.</p>

<p>Using the <code>TinyWebServer</code> library handlers array, we can set up our mapping to a C function to handle the request.</p>
<pre class="highlight c"><span class="n">boolean</span> <span class="nf">pins_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">send_error_code</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">send_content_type</span><span class="p">(</span><span class="s">&quot;application/javascript&quot;</span><span class="p">);</span>
  <span class="n">web_server</span><span class="p">.</span><span class="n">end_headers</span><span class="p">();</span>
  <span class="c1">// Handle sending back JSON from the current
</span>  <span class="c1">// state of the pins
</span>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">TinyWebServer</span><span class="o">::</span><span class="n">PathHandler</span> <span class="n">handlers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">{</span><span class="s">&quot;/pins&quot;</span><span class="p">,</span> <span class="n">TinyWebServer</span><span class="o">::</span><span class="n">GET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pins_handler</span><span class="p">},</span>
  <span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">TinyWebServer</span><span class="o">::</span><span class="n">GET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index_handler</span> <span class="p">},</span>
  <span class="p">{</span><span class="nb">NULL</span><span class="p">},</span>
<span class="p">};</span>
</pre>
<p>We now have a function that will respond to the web request when called, but we have no data being sent back yet. To do that, we&rsquo;ll need to create a helper function that can respond with JSON back to the request. </p>

<p>Since we&rsquo;re using C, a statically typed language, it&rsquo;s pretty difficult to handle the schema-less JSON data type. Since JSON is just text, we can manually create the JSON as a string and send it back as a response. </p>

<p>To handle this functionality, we&rsquo;ll create a new function that we&rsquo;ll call <code>pinsToString()</code>. As a helper function, we&rsquo;ve also wrapped the entire pin handling functionality into its own object. As the source code for this entire article is available, we won&rsquo;t describe specifically how the pin object works. For more information, see the <code>pins.h</code> source at:
<a href="https://github.com/fullstackio/ng-diuno/blob/master/arduino/sketch_dec30a/pin.h">https://github.com/fullstackio/ng-diuno/blob/master/arduino/sketch_dec30a/pin.h</a>.</p>

<h3>Iterating over our pins</h3>

<p>Before we are able to send out the pin status, we&rsquo;ll iterate over every pin that we&rsquo;re interested in. As we need to keep track of the <em>interesting</em> pins, we&rsquo;ll need to create a structure to hold onto all of the pins we want to query and modify.</p>
<pre class="highlight c"><span class="k">const</span> <span class="kt">int</span> <span class="n">numPins</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">Pin</span> <span class="n">pins</span><span class="p">[</span><span class="n">numPins</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="n">Pin</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="n">OUTPUT_T</span><span class="p">),</span>
  <span class="n">Pin</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">OUTPUT_T</span><span class="p">),</span>
  <span class="n">Pin</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="n">ONEWIRE</span><span class="p">),</span>
<span class="p">};</span>
<span class="n">OneWire</span> <span class="n">ds</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
</pre>
<p>With our pins array, we can walk through each pin and interact with each individually. We&rsquo;ll create a function that will handle updating the state of each pin:</p>
<pre class="highlight c"><span class="c1">// Iterate over pins and update each of their states
</span><span class="kt">void</span> <span class="nf">UpdatePinsState</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numPins</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="n">pins</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">getState</span><span class="p">();</span> <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>With the <code>UpdatePinsState()</code> function, we will walk through and collect the status of each pin, storing the updated status on the pin object itself.</p>

<p>Finally, we can walk through the pins and write our JSON object back from the <code>pinsToString()</code> function:</p>
<pre class="highlight javascript"><span class="kr">boolean</span> <span class="nx">pins_handler</span><span class="p">(</span><span class="nx">TinyWebServer</span><span class="o">&amp;</span> <span class="nx">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">web_server</span><span class="p">.</span><span class="nx">send_error_code</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
  <span class="nx">web_server</span><span class="p">.</span><span class="nx">send_content_type</span><span class="p">(</span><span class="s2">&quot;application/javascript&quot;</span><span class="p">);</span>
  <span class="nx">web_server</span><span class="p">.</span><span class="nx">end_headers</span><span class="p">();</span>
  <span class="nx">pinsToString</span><span class="p">(</span><span class="nx">web_server</span><span class="p">);</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// pinsToString() iterates over the pins and
// writes out the corresponding JSON object using
// the web request
</span><span class="nx">bool</span> <span class="nx">pinsToString</span><span class="p">(</span><span class="nx">TinyWebServer</span><span class="o">&amp;</span> <span class="nx">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">UpdatePinsState</span><span class="p">();</span>
  <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="s2">&quot;{\&quot;pins\&quot;:[&quot;</span><span class="p">));</span>
  <span class="kr">int</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">numPins</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kr">int</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="s2">&quot;{\&quot;pin\&quot;:&quot;</span><span class="p">));</span>
    <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">pins</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">getPin</span><span class="p">());</span>
    <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="s2">&quot;,\&quot;value\&quot;:&quot;</span><span class="p">));</span>
    <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">pins</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">getState</span><span class="p">());</span>
    <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="s2">&quot;}&quot;</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">((</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">)</span> <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">));</span>
  <span class="p">}</span>
  <span class="nx">web_server</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="s2">&quot;]}&quot;</span><span class="p">));</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<h3>Modifying the pin state</h3>

<p>Now, when interacting in the other direction, where we want the Angular app to modify the state of the pins, we&rsquo;ll need to be able to send updated information back to the Arduino. As we previously mentioned, it&rsquo;s difficult to work with a schema-less JSON object inside the strictly statically typed C language. </p>

<p>Although there are some great libraries developed specifically to handle JSON from C and the Arduino (<a href="https://github.com/interactive-matter/aJson">aJson</a>), the parsing functionality is not always accurate and is very brittle in practice. </p>

<p>Rather than depend upon the JSON being parsed into a single object, we can create our own protocol to talk between the two parties.</p>

<p>At the heart of it, JSON is simply a method of wrapping data in a meaningful structure that is easily understood by both the human eye and JavaScript. We can create our own protocol that can take the place of JSON, but will still communicate the same information.</p>

<p>For instance, we can turn the 24-byte-long JSON object:</p>
<pre class="highlight javascript"><span class="p">{</span> <span class="na">pin</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="na">action</span><span class="p">:</span> <span class="s1">'getTemp'</span> <span class="p">}</span> <span class="c1">// 24 characters long
</span></pre>
<p>into the 4-byte-long ASCII string:</p>
<pre class="highlight javascript"><span class="nx">p7a0</span>
</pre>
<p>and still achieve the same result when the Arduino receives the information and parses it.</p>

<p>Using JavaScript, it&rsquo;s fairly trivial to create a function that can turn our JSON string into the shorter, mini-protocol version of the request data. We can even still interact with the Arduino service as though we were sending the JSON through to the Arduino, using our Arduino service to modify the request.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'fsArduino'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'Arduino'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ARDUINO_URL</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">var</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">'getTemp'</span><span class="err">:</span> <span class="mi">0</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">actionifyPins</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pins</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pins</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">pins</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="nx">str</span> <span class="o">+=</span> <span class="s1">'p'</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">pin</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">mode</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">'undefined'</span><span class="p">)</span> <span class="p">{</span><span class="nx">str</span> <span class="o">+=</span> <span class="s1">'m'</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">mode</span><span class="p">;}</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">'undefined'</span><span class="p">)</span> <span class="p">{</span><span class="nx">str</span> <span class="o">+=</span> <span class="s1">'v'</span> <span class="o">+</span> <span class="nx">p</span><span class="p">.</span><span class="nx">value</span><span class="p">;}</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">action</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">'undefined'</span><span class="p">)</span> <span class="p">{</span><span class="nx">str</span> <span class="o">+=</span> <span class="s1">'a'</span> <span class="o">+</span> <span class="nx">actions</span><span class="p">[</span><span class="nx">p</span><span class="p">.</span><span class="nx">action</span><span class="p">];}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="c1">// ...
</span></pre>
<p>Now, our <code>actionifyPins</code> function will turn the JSON objects we send it into the proper string for our Arduino to handle on the back end. We can use this function in our <code>setPins()</code> function from inside our Arduino service.</p>

<p>We&rsquo;ll also send the length of the string along with our request as a header. This point is important: We&rsquo;ll need to be explicit in handling the request on the Arduino.</p>
<pre class="highlight javascript">  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">getPins</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// ...
</span>      <span class="p">},</span>
      <span class="na">setPins</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pins</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">strAction</span> <span class="o">=</span> <span class="nx">actionifyPins</span><span class="p">(</span><span class="nx">pins</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">$http</span><span class="p">({</span>
          <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
          <span class="na">url</span><span class="p">:</span> <span class="nx">ARDUINO_URL</span> <span class="o">+</span> <span class="s1">'/pins/update'</span><span class="p">,</span>
          <span class="na">data</span><span class="p">:</span> <span class="nx">strAction</span><span class="p">,</span>
          <span class="na">headers</span><span class="p">:</span> <span class="p">{</span><span class="s1">'X-Action-Len'</span><span class="err">:</span> <span class="nx">strAction</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">});</span>
      <span class="p">}</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">service</span><span class="p">;</span>
<span class="err">}</span><span class="p">);</span>
</pre>
<h3>Handling the POST request on the Arduino</h3>

<p>In order to handle the POST request on the Arduino, we&rsquo;ll modify the <code>handlers[]</code> array again and add a new route to handle it. In this case, since we&rsquo;re interested in the <code>X-Action-Len</code> header, we&rsquo;ll need to add the header string to the <code>headers[]</code> array. This step tells the TinyWebServer that we&rsquo;re interested in using it in our requests.</p>
<pre class="highlight c"><span class="n">boolean</span> <span class="nf">digital_pin_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Handle POST request
</span>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">TinyWebServer</span><span class="o">::</span><span class="n">PathHandler</span> <span class="n">handlers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">{</span><span class="s">&quot;/pins/update&quot;</span><span class="p">,</span> <span class="n">TinyWebServer</span><span class="o">::</span><span class="n">POST</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">digital_pin_handler</span><span class="p">},</span>
  <span class="p">{</span><span class="s">&quot;/pins&quot;</span><span class="p">,</span> <span class="n">TinyWebServer</span><span class="o">::</span><span class="n">GET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pins_handler</span><span class="p">},</span>
  <span class="p">{</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="n">TinyWebServer</span><span class="o">::</span><span class="n">GET</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index_handler</span> <span class="p">},</span>
  <span class="p">{</span><span class="nb">NULL</span><span class="p">},</span>
<span class="p">}</span>

<span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">headers</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s">&quot;X-Action-Len&quot;</span><span class="p">,</span>
  <span class="nb">NULL</span>
<span class="p">};</span>
</pre>
<p>In order to handle the POST request, we&rsquo;ll need to fetch the length of the string we want to parse from the request. We can do that by requesting the header value from the request object.</p>
<pre class="highlight c"><span class="n">boolean</span> <span class="nf">digital_pin_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">action_str_len</span> <span class="o">=</span> <span class="n">web_server</span><span class="p">.</span><span class="n">get_header_value</span><span class="p">(</span><span class="s">&quot;X-Action-Len&quot;</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">action_str_len</span><span class="p">);</span>
    <span class="c1">// ...
</span><span class="p">}</span>
</pre>
<p>Given a known data length, we can pull off the full set of data from our request. </p>
<pre class="highlight c"><span class="n">boolean</span> <span class="nf">digital_pin_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">action_str_len</span> <span class="o">=</span> <span class="n">web_server</span><span class="p">.</span><span class="n">get_header_value</span><span class="p">(</span><span class="s">&quot;X-Action-Len&quot;</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">action_str_len</span><span class="p">);</span>

    <span class="kt">char</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="n">memset</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
    <span class="n">get_request_data</span><span class="p">(</span><span class="n">web_server</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
    <span class="c1">// The request data is now available in the
</span>    <span class="c1">// data variable
</span><span class="p">}</span>

<span class="kt">void</span> <span class="nf">get_request_data</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length_str</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
  <span class="n">Client</span><span class="o">&amp;</span> <span class="n">client</span> <span class="o">=</span> <span class="n">web_server</span><span class="p">.</span><span class="n">get_client</span><span class="p">();</span>
  <span class="k">if</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">length_str</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
      <span class="n">ch</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">client</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">!=</span> <span class="sc">'\n'</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">str</span><span class="p">[</span><span class="n">length_str</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>Now that we have the request data available to us in the <code>data</code> variable, we can iterate over the data and take actions based upon the parsed data:</p>
<pre class="highlight c"><span class="k">enum</span> <span class="n">ActionTypes</span> <span class="p">{</span>
  <span class="n">GETTEMP</span>
<span class="p">};</span>

<span class="n">boolean</span> <span class="nf">digital_pin_handler</span><span class="p">(</span><span class="n">TinyWebServer</span><span class="o">&amp;</span> <span class="n">web_server</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="kt">int</span> <span class="n">sLen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">pinInt</span><span class="p">,</span> <span class="n">valueInt</span><span class="p">,</span> <span class="n">actionInt</span><span class="p">;</span>
    <span class="n">ActionTypes</span> <span class="n">actionT</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">currTemp</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">sLen</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// We're handling a new pin
</span>        <span class="n">pinInt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">);</span>
        <span class="n">Pin</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">select_pin</span><span class="p">(</span><span class="n">pinInt</span><span class="p">);</span>

        <span class="k">while</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">'p'</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sLen</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">switch</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">case</span> <span class="sc">'v'</span><span class="p">:</span>
              <span class="c1">// Handle setting the value
</span>            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">'a'</span><span class="p">:</span>
              <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="c1">// move to the next character
</span>              <span class="n">actionInt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">);</span>
              <span class="n">actionT</span> <span class="o">=</span> <span class="p">(</span><span class="n">ActionTypes</span><span class="p">)(</span><span class="n">actionInt</span><span class="p">);</span>

              <span class="k">switch</span><span class="p">(</span><span class="n">actionT</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="n">GETTEMP</span><span class="p">:</span>
                  <span class="n">currTemp</span> <span class="o">=</span> <span class="n">getTemp</span><span class="p">(</span><span class="n">ds</span><span class="p">);</span>
                  <span class="n">p</span><span class="o">-&gt;</span><span class="n">setCurrentValue</span><span class="p">(</span><span class="n">currTemp</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
              <span class="p">}</span>
              <span class="k">break</span><span class="p">;</span>
            <span class="c1">// ...
</span>          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">free</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="n">web_server</span><span class="p">.</span><span class="n">send_error_code</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
    <span class="n">web_server</span><span class="p">.</span><span class="n">send_content_type</span><span class="p">(</span><span class="s">&quot;application/json&quot;</span><span class="p">);</span>
    <span class="n">web_Server</span><span class="p">.</span><span class="n">end_headers</span><span class="p">();</span>

    <span class="n">pinsToString</span><span class="p">(</span><span class="n">web_server</span><span class="p">);</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...
</span><span class="n">Pin</span> <span class="o">*</span><span class="nf">select_pin</span><span class="p">(</span><span class="n">uint8_t</span> <span class="n">pinNumber</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numPins</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pins</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">getPin</span><span class="p">()</span> <span class="o">==</span> <span class="n">pinNumber</span><span class="p">)</span> <span class="k">return</span> <span class="o">&amp;</span><span class="n">pins</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>We did not include the entire source in this post for that action; essentially, we&rsquo;re walking through each of the characters in our POST data string and taking action on each one. In the case of the above demo string <code>p7a0</code>, we&rsquo;ll parse through to get the pin number using the <code>p</code> character and pulling off the number of the string and selecting the pin.</p>

<p>Until we reach a new <code>p</code>, we&rsquo;re going to walk through the string and look for actions, values, or modes to set. We&rsquo;ll come across the <code>a</code> characters and then attempt to map the action by number to the intended action. </p>

<p>In this case, since we&rsquo;re using enum to set the action types, we can reasonably set the action to be the first in the ActionTypes enum:</p>
<pre class="highlight c"><span class="k">enum</span> <span class="n">ActionTypes</span> <span class="p">{</span>
  <span class="n">GETTEMP</span>
<span class="p">};</span>
</pre>
<p>This works because the &lsquo;getTemp&rsquo; action in our Arduino service (in JavaScript) is set as the index of <code>0</code>:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">actions</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'getTemp'</span><span class="err">:</span> <span class="mi">0</span>
<span class="p">};</span>
</pre>
<p>After that, the only component left missing is to send the response as a JSON object; we can use the <code>pinsToString()</code> method to handle sending back the JSON of the pins.</p>

<h3>Polling the temperature</h3>

<p>How do we get the temperature of the DS18S20 temperature sensor? Easy! We&rsquo;ll use the following function that handles reading the sensor:</p>
<pre class="highlight c"><span class="kt">float</span> <span class="n">getTemp</span><span class="p">(</span><span class="n">OneWire</span> <span class="n">sensor</span><span class="p">){</span>
  <span class="c1">//returns the temperature from one DS18S20 in DEG Fahrenheit
</span>  <span class="n">byte</span> <span class="n">data</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span>
  <span class="n">byte</span> <span class="n">addr</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>
  <span class="kt">float</span> <span class="n">celsius</span><span class="p">,</span> <span class="n">fahrenheit</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">sensor</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">addr</span><span class="p">))</span> <span class="p">{</span>
     <span class="c1">//no more sensors on chain, reset search
</span>     <span class="n">sensor</span><span class="p">.</span><span class="n">reset_search</span><span class="p">();</span>
     <span class="k">return</span> <span class="o">-</span><span class="mi">1000</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span> <span class="n">OneWire</span><span class="o">::</span><span class="n">crc8</span><span class="p">(</span> <span class="n">addr</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span> <span class="o">!=</span> <span class="n">addr</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span> <span class="p">{</span>
     <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;CRC is not valid!&quot;</span><span class="p">);</span>
     <span class="k">return</span> <span class="o">-</span><span class="mi">1000</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="mh">0x10</span> <span class="o">&amp;&amp;</span> <span class="n">addr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="mh">0x28</span><span class="p">)</span> <span class="p">{</span>
     <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Device is not recognized&quot;</span><span class="p">);</span>
     <span class="k">return</span> <span class="o">-</span><span class="mi">1000</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">sensor</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
  <span class="n">sensor</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
  <span class="n">sensor</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mh">0x44</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// start conversion, with parasite power on at the end
</span>  <span class="n">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>

  <span class="n">byte</span> <span class="n">present</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
  <span class="n">sensor</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>  
  <span class="n">sensor</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="mh">0xBE</span><span class="p">);</span> <span class="c1">// Read Scratchpad
</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// we need 9 bytes
</span>    <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="n">sensor</span><span class="p">.</span><span class="n">reset_search</span><span class="p">();</span>

  <span class="n">byte</span> <span class="n">MSB</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="n">byte</span> <span class="n">LSB</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

  <span class="n">int16_t</span> <span class="n">raw</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">|</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="n">raw</span> <span class="o">=</span> <span class="n">raw</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x10</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">raw</span> <span class="o">=</span> <span class="p">(</span><span class="n">raw</span> <span class="o">&amp;</span> <span class="mh">0xFFF0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">12</span> <span class="o">-</span> <span class="n">data</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="n">celsius</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">raw</span> <span class="o">/</span> <span class="mi">16</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
  <span class="n">fahrenheit</span> <span class="o">=</span> <span class="n">celsius</span> <span class="o">*</span> <span class="mi">1</span><span class="p">.</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">32</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
  <span class="c1">// float tempRead = ((MSB &lt;&lt; 8) | LSB); //using two's compliment
</span>  <span class="c1">// float TemperatureSum = tempRead / 16;
</span>
  <span class="k">return</span> <span class="n">fahrenheit</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>With that, we&rsquo;re ready to fetch and send data to and from the Angular app to be handled by the Arduino.</p>

<h3>Interface elements</h3>

<p>Finally, we&rsquo;ll want to show a meaningful interface that shows our data in a compelling manner. Enter D3.</p>

<p>D3 is a dynamic data library that powers many data visualizations on the web today. It&rsquo;s a fantastic framework for building visualizations of any kind. It&rsquo;s the perfect tool to make a dynamic interface such as a temperature gauge. We&rsquo;ll use D3 to build our interface. </p>

<p>First, we&rsquo;ll need to create a D3 service that will make the <code>window.d3</code> object accessible as an Angular object. We&rsquo;ll then <em>inject</em> this incredibly simple service in our <code>temperatureGauge</code> directive:</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">'D3'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">D3</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nx">d3</span><span class="p">;</span>
<span class="p">});</span>
</pre>
<p>In our <code>temperatureGauge</code> directive, we can inject the D3 service and start using it immediately. We&rsquo;ll add a template and append a D3 SVG object inside of it. As we don&rsquo;t intend this post as a tutorial on D3, we&rsquo;ve shown the code in its entirety below.</p>
<pre class="highlight javascript"><span class="s1">'use strict'</span><span class="p">;</span>

<span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'temperatureGauge'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">D3</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;thermometer&quot;&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/div&gt;'</span><span class="p">,</span>
      <span class="na">replace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">'ngModel'</span><span class="err">:</span> <span class="s1">'='</span>
      <span class="p">},</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nx">D3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s1">'.thermometer'</span><span class="p">),</span>
            <span class="nx">w</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">width</span> <span class="o">||</span> <span class="nx">el</span><span class="p">.</span><span class="nx">node</span><span class="p">().</span><span class="nx">clientWidth</span><span class="p">,</span>
            <span class="nx">h</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">height</span> <span class="o">||</span> <span class="nx">el</span><span class="p">.</span><span class="nx">node</span><span class="p">().</span><span class="nx">clientHeight</span><span class="p">,</span>
            <span class="nx">r</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span>
            <span class="nx">pi</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>

        <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">el</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s1">'svg'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="nx">w</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'height'</span><span class="p">,</span> <span class="nx">h</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'g'</span><span class="p">)</span>
              <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'transform'</span><span class="p">,</span> <span class="s1">'translate('</span> <span class="o">+</span> <span class="nx">w</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="s1">','</span> <span class="o">+</span> <span class="nx">h</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="s1">')'</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">pie</span> <span class="o">=</span> <span class="nx">D3</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">pie</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">startAngle</span><span class="p">(</span><span class="o">-</span><span class="nx">pi</span><span class="o">/</span><span class="mf">1.2</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">endAngle</span><span class="p">(</span><span class="nx">pi</span><span class="o">/</span><span class="mf">1.2</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">arc</span> <span class="o">=</span> <span class="nx">D3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">arc</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">innerRadius</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span> <span class="mf">0.7</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">outerRadius</span><span class="p">(</span><span class="nx">r</span> <span class="o">*</span> <span class="mf">0.9</span><span class="p">);</span>

        <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">'path.degree'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">pie</span><span class="p">(</span><span class="nx">D3</span><span class="p">.</span><span class="nx">range</span><span class="p">(</span><span class="mi">90</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">})))</span>
          <span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'path'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'degree'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'d'</span><span class="p">,</span> <span class="nx">arc</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">handle</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'g'</span><span class="p">);</span>
        <span class="nx">handle</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'rect'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'handle'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'height'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'y'</span><span class="p">,</span> <span class="o">-</span><span class="mf">2.5</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'x'</span><span class="p">,</span> <span class="nx">r</span> <span class="o">-</span> <span class="mi">65</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">scale</span> <span class="o">=</span> <span class="nx">D3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">65</span><span class="p">,</span><span class="mi">85</span><span class="p">])</span>
          <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="o">-</span><span class="mi">180</span><span class="p">,</span> <span class="mi">0</span><span class="p">]);</span>

        <span class="kd">var</span> <span class="nx">display</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'text'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">'72'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'y'</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>

        <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'ngModel'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>

          <span class="nx">handle</span><span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'transform'</span><span class="p">,</span> <span class="s1">'rotate('</span><span class="o">+</span><span class="nx">scale</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">+</span><span class="s1">')'</span><span class="p">);</span>

          <span class="nx">display</span><span class="p">.</span><span class="nx">datum</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
            <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">tween</span><span class="p">(</span><span class="s1">'text'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">D3</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">textContent</span><span class="p">,</span> <span class="nx">d</span><span class="p">);</span>
              <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">i</span><span class="p">(</span><span class="nx">t</span><span class="p">));</span>
              <span class="p">};</span>
            <span class="p">});</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">};</span>
  <span class="p">});</span>
</pre>
<p>For more information on using Angular and D3 together, check out our book at <a href="https://leanpub.com/d3angularjs">https://leanpub.com/d3angularjs</a>. We give an in-depth introduction to D3 and demonstrate the best practices for using it with AngularJS.</p>

<h3>Conclusion</h3>

<p>Above all else, we hope this post has inspired you to explore how we can use the power of Angular to engage with the physical world &ndash; we&rsquo;re not limited to the browser. </p>

<p>If you want to become an AngularJS expert today, check out our book at <a href="https://www.ng-book.com/">ng-book.com</a>. It&rsquo;s the most feature-complete AngularJS book available on the market today. Catering to beginners and experts alike, ng-book will help you become an Angular expert.</p>

<h3>Video</h3>

<div name="video" id="video"></div>

<iframe width="640" height="360" src="//www.youtube.com/embed/MhVgGE-pgEY" frameborder="0" allowfullscreen></iframe>

<h3>ngConf slides</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/30244687" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Practical End-to-End Testing with Protractor</title>
    <link href="http://www.ng-newsletter.com/posts/practical-protractor.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/practical-protractor.html"/>
    <updated>2014-01-14T00:00:00-08:00</updated>
    <id>urn:uuid:a7b3e548-b05d-55b4-9aef-e3a9a3d99204</id>
    <summary>One of the reasons AngularJS is so great to work with is that it was developed around the idea that testing is so important that it should be built into the framework. Every check-in of the Angular source is tested before it’s accepted into the core...</summary>
    <content type="html"><![CDATA[<p>One of the reasons AngularJS is so great to work with is that it was developed around the idea that testing is so important that it should be built into the framework. Every check-in of the Angular source is tested before it&rsquo;s accepted into the core.</p>

<p>Testing is incredibly important, especially in a dynamically typed environment like JavaScript. It gives us the opportunity to catch errors before they happen in production. Testing code allows us to be confident about the production value of our code. </p>

<p>As bugs in our code, or any code, are inevitable, it&rsquo;s important for us to be able to determine where they are and try to eliminate them before they show up in production. Using testing, we can isolate these pieces of functionality in a test environment where we can understand our app from the inside out.</p>

<p><strong>Testing is essential if we are to understand what is happening in our app.</strong></p>

<p>In this article, we&rsquo;re examining how to test our application using end-to-end testing. End-to-end testing is black box testing. We are testing that the system works as planned from an end user&rsquo;s perspective. </p>

<p>An end user doesn&rsquo;t care if a service works as planned; he or she cares that the functionality of our app works as expected. We can think of it as a way to automate starting the app in our browser and clicking through the workflow of the application. </p>

<p>It would be inefficient for us to click through the application manually, so we&rsquo;ll script our tests to happen automatically.</p>

<h3>Protractor</h3>

<p>The <em>new</em>, preferred end-to-end testing framework is called Protractor. Unlike the Angular scenario runner, Protractor is built on Selenium&rsquo;s <a href="https://code.google.com/p/selenium/wiki/WebDriverJs">WebDriver</a>, which is an API, written as extensions, for controlling browsers.</p>

<p>WebDriver has extensions for all sorts of different browsers, including the most popular. We gain speed and stability in our tests by developing against true web browsers.</p>

<p>Luckily, Protractor is built atop the Jasmine framework, so we don&rsquo;t need to learn a new framework in order to use it. We can also install it as a standalone test runner or embed it in our tests as a library.</p>

<h3>Installation</h3>

<p>Unlike the Angular scenario runner, Protractor requires a separate standalone server to be running at <code>http://location:4444</code> (we can configure this location).</p>

<p>Luckily, Protractor itself comes with a tool that eases the installation of a Selenium server. </p>

<p>In order to access the script, we&rsquo;ll need to install Protractor locally in the top-level directory of the Angular app we want to test.</p>
<pre class="highlight text">$ npm install protractor
</pre>
<p>Then we can run the Selenium installation script, located in the local <code>node_modules/</code> directory:</p>
<pre class="highlight shell"><span class="gp">$ </span>./node_modules/protractor/bin/webdriver-manager update
</pre>
<p>This script downloads the files required to run Selenium itself and build a start script and a directory with them.</p>

<p>When this script is finished, we can start the standalone version of Selenium with the Chrome driver by executing the start script:</p>
<pre class="highlight shell"><span class="gp">$ </span>./node_modules/protractor/bin/webdriver-manager start
</pre>
<blockquote>
<p>If you are having trouble running your Selenium installation, try updating the ChromeDriver by downloading the latest version <a href="http://chromedriver.storage.googleapis.com/">here</a>.</p>
</blockquote>

<p>Now we can use Protractor to connect to our Selenium server, which is running in the background.</p>

<h3>Configuration</h3>

<p>Like Karma, Protractor itself requires a configuration script that tells Protractor how to run, how to connect to Selenium, etc. </p>

<p>The <em>easiest</em> method for creating a configuration file for Protractor is to copy a reference configuration file from the installation directory.</p>
<pre class="highlight shell"><span class="gp">$ </span>cp ./node_modules/protractor/example/chromeOnlyConf.js protractor_conf.js
</pre>
<p>In order to get Protractor running, we need to make a few modifications to the script. First, the default configuration script uses a Chrome driver that doesn&rsquo;t exist in our current directory. Instead, we need to point it to the ChromeDriver in the local <code>./node_modules</code>.</p>
<pre class="highlight javascript"><span class="nx">chromeDriver</span><span class="err">:</span> <span class="s1">'./node_modules/protractor/selenium/chromedriver'</span><span class="p">,</span>
</pre>
<p>Next, we need to point the specs array to our local tests.</p>
<pre class="highlight javascript"><span class="nx">specs</span><span class="err">:</span> <span class="p">[</span><span class="s1">'test/e2e/**/*_spec.js'</span><span class="p">],</span>
</pre>
<p>There are quite a few options for setting up our tests using Protractor. Although we&rsquo;ll cover a few here, keep in mind that we have a lot of options in configuring Protractor.</p>

<p>We have <strong>two</strong> options for running Protractor tests, the first of which is to use Protractor to start Selenium when we run our Protractor tests. This option is called <em>standalone</em> mode. The example Protractor configuration file that we copied includes this setup. </p>
<pre class="highlight javascript"><span class="nx">chromeOnly</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="nx">chromeDriver</span><span class="err">:</span> <span class="s1">'./node_modules/protractor/selenium/chromedriver'</span><span class="p">,</span>
</pre>
<p>The second method for running Protractor tests is to connect to a separately running Selenium server. When our tests start to grow more complex, we&rsquo;ll likely want to run our tests using a separate Selenium server. </p>

<p>To configure Protractor to use this separate server, we need to delete the previous two options (<code>chromeOnly</code> and <code>chromeDriver</code>) and add the <code>seleniumAddress</code> option that points to the running Selenium server.</p>
<pre class="highlight javascript"><span class="nx">seleniumAddress</span><span class="err">:</span> <span class="s1">'http://0.0.0.0:4444/wd/hub'</span><span class="p">,</span>
</pre>
<h3>Testing</h3>

<p>When we start testing with Protractor, we set up our tests to work through Jasmine. That is, we simply start writing our tests like we do when we write our Karma tests. For instance, a simple Protractor test setup might look like:</p>
<pre class="highlight javascript"><span class="nx">describe</span><span class="p">(</span><span class="s1">'homepage'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// before function
</span>  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="s1">'should load the page'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// test goes here
</span>    <span class="nx">expect</span><span class="p">(...).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>Although the content of the tests above isn&rsquo;t complete, the structure is familiar: It&rsquo;s set up using Jasmine. We get to use the <code>beforeEach()</code> and <code>afterEach()</code> functions as well as nested <code>describe()</code> blocks for the structure around our tests. </p>

<p>To actually implement tests, we&rsquo;ll use the same <code>expect()</code> syntax that Jasmine gives us.</p>

<p>Writing tests for Protractor requires us to work with a few global variables that Protractor exposes to us in our tests. The following is a list of a few of those global variables:</p>

<h4>browser</h4>

<p>The <code>browser</code> variable is a wrapper around the WebDriver instance. We use the <code>browser</code> variable for any navigation or for grabbing any information off the page.</p>

<p>We can use the <code>browser</code> variable to navigate to a page using the <code>get()</code> function:</p>
<pre class="highlight javascript"><span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://127.0.0.1:9000/'</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>We can run some neat tricks with the <code>browser</code> object. For instance, we can debug the page using the <code>debugger()</code> method on the <code>browser</code> object:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'should find title element'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'app/index.html'</span><span class="p">);</span>

  <span class="nx">browser</span><span class="p">.</span><span class="kr">debugger</span><span class="p">();</span>

  <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">binding</span><span class="p">(</span><span class="s1">'user.name'</span><span class="p">));</span>
<span class="p">});</span>
</pre>
<p>To kick this test off with the node debugger, we can run the test in debug mode:</p>
<pre class="highlight javascript"><span class="nx">$</span> <span class="nx">protractor</span> <span class="nx">debug</span> <span class="nx">conf</span><span class="p">.</span><span class="nx">js</span>
</pre>
<p>We get benefits when we run Protractor in debug mode: The execution halts in the browser, and every client-side script provided by Protractor is available in the console.</p>

<p>To get access to the Protractor client-side scripts, we can call them with the <code>window.clientSideScripts</code> object that&rsquo;s inserted by Protractor.</p>

<h2>Let&rsquo;s Test!</h2>

<p>Although it&rsquo;s easy to talk about how to use Protractor, it&rsquo;s not always clear how to get it going. As we always try to share the highest-quality material available on Angular, we&rsquo;re going to dive right into testing an application and strategies.</p>

<h3>Our Application</h3>

<p>Let&rsquo;s suppose we have an application that provides an alternative view for viewing <a href="https://github.com/">GitHub</a> issues. The simple app itself has only a few major features:</p>

<ul>
<li>It allows the user to input a repo owner and URL through an input box</li>
<li>It has a main page and an about page</li>
<li>It lists the issues, one by one, with a user&rsquo;s Gravatar</li>
</ul>

<p>The final app we&rsquo;re building looks like this:</p>

<p><img src="/images/protractor/home.png" />
<img src="/images/protractor/final-app.png" /></p>

<p>With any application, we can strategize about the tests that we want to write. We may end up writing a hundred tests for an incredibly simple app OR we might end up writing very few. Finding the right balance between the two will give us an advantage when it comes time to implement both the application and the tests.</p>

<h3>Strategy for Testing</h3>

<p>We&rsquo;ve found that the best balance between writing tests and writing code pretty much exists in knowing <strong>what</strong> to test just as much as how to test. Whenever we&rsquo;re writing tests for our code, we want to be writing tests that <strong>specifically</strong> address the behavior we are implementing. That is, we don&rsquo;t need to write a test to make sure an <code>&lt;h1&gt;</code> tag&rsquo;s content changes as we type into an <code>&lt;input&gt;</code> field. We do need to test our custom filtering for live search, for instance.</p>

<p>We&rsquo;ve found that writing our tests ahead of time when prototyping never works out in our favor. When we&rsquo;re in the prototyping phase, we&rsquo;ll write very few tests, if any at all, as we&rsquo;re still working through features of our application. When the application starts to grow, however, writing tests is always a good idea to ensure that the app behaves as we expect it to behave in production.</p>

<p>Finally, we&rsquo;ll want to set up our tests such that each block tests as little as possible. Ideally, each test block should contain no more than <strong>1</strong> expectation.</p>

<p>Enough theory, let&rsquo;s apply some strategy to testing our app.</p>

<p>We&rsquo;ll want to test that our page updates with the title of the new repo against which we&rsquo;re testing. The Angular app employs a custom service that makes an <code>$http</code> request to <code>github.com</code>. This request comes back, and we fill the rest of the front page.</p>

<p>Second, we&rsquo;ll want to test that the page navigation and content change. This test will involve us pressing the navigation buttons in our view to prompt a <code>$location</code> change.</p>

<p>Let&rsquo;s get started!</p>

<h2>Setting Up Our First Tests</h2>

<p>Our Protractor configuration file is pretty simple and nearly unmodified from the example configuration that comes with Protractor itself:</p>
<pre class="highlight javascript"><span class="c1">// An example configuration file.
</span><span class="nx">exports</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">seleniumAddress</span><span class="p">:</span> <span class="s1">'http://0.0.0.0:4444/wd/hub'</span><span class="p">,</span>
  <span class="na">capabilities</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'browserName'</span><span class="err">:</span> <span class="s1">'chrome'</span> <span class="p">},</span>
  <span class="na">specs</span><span class="p">:</span> <span class="p">[</span><span class="s1">'test/e2e/**/*.spec.js'</span><span class="p">],</span>
  <span class="na">jasmineNodeOpts</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">showColors</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">defaultTimeoutInterval</span><span class="p">:</span> <span class="mi">30000</span>
  <span class="p">}</span>
<span class="p">};</span>
</pre>
<p>We&rsquo;ll be writing our Protractor tests in the <code>test/e2e</code> directory, as we specified in our configuration file with the naming convention of <code>[name].spec.js</code>. Let&rsquo;s create our first test in the <code>test/e2e</code> directory called <code>main.spec.js</code>. </p>

<p>As Protractor tests are simply Jasmine tests, we&rsquo;ll start out with a simple Jasmine stub:</p>
<pre class="highlight javascript"><span class="c1">// in test/e2e/main.spec.js
</span><span class="nx">describe</span><span class="p">(</span><span class="s1">'E2E: main page'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Our tests go in here
</span><span class="p">});</span>
</pre>
<p>Given that we&rsquo;re writing our tests with Jasmine, we can use our <code>beforeEach()</code> block to set them up. We also need to keep track of the Protractor instance, so let&rsquo;s set up a variable we&rsquo;ll call <code>ptor</code> that will hold on to it. For every single one of these tests, we&rsquo;ll use the <code>browser</code> object to navigate to the home page.</p>

<blockquote>
<p>As with end-to-end tests, we need to have a server running against which our end-to-end tests run.</p>
</blockquote>
<pre class="highlight javascript"><span class="nx">describe</span><span class="p">(</span><span class="s1">'E2E: main page'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ptor</span><span class="p">;</span>

  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'http://127.0.0.1:9000/'</span><span class="p">);</span>
    <span class="nx">ptor</span> <span class="o">=</span> <span class="nx">protractor</span><span class="p">.</span><span class="nx">getInstance</span><span class="p">();</span>
  <span class="p">});</span>

<span class="p">});</span>
</pre>
<p>Instead of pointing our tests to the full URL every time we want to test a page, we can set the <code>baseUrl</code> in our Protractor configuration file. For the rest of the section, we&rsquo;ll assume that we have the option set in our config file like so:</p>
<pre class="highlight javascript"><span class="nx">baseUrl</span><span class="err">:</span> <span class="s1">'http://127.0.0.1:9000/'</span><span class="p">,</span>
</pre>
<p>Our first test will simply test that the main page loads up: We can test that an element exists on the page. Since our home page contains the ID <code>#home</code>, we can write an <em>expectation</em> to guarantee the condition.</p>

<p>We&rsquo;ll first find the element we&rsquo;re interested in using the <code>by.id()</code> function to target the <code>&lt;div&gt;</code> with the <code>#main</code> ID:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'should load the home page'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">'home'</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>Once we have the element, we can set an expectation that the element is present on the page using the Protractor instance&rsquo;s method <code>isElementPresent()</code>:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'should load the home page'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">'home'</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">ptor</span><span class="p">.</span><span class="nx">isElementPresent</span><span class="p">(</span><span class="nx">ele</span><span class="p">)).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>To run our tests, we need to launch a Selenium server. Luckily, Protractor makes this process easy using a built-in tool called <code>webdriver-manager</code>. This manager is included by default (as we saw above). Let&rsquo;s start our <code>webdriver-manager</code>:</p>
<pre class="highlight shell"><span class="gp">$ </span>./node_modules/protractor/bin/webdriver-manager start
</pre>
<p>In a new shell, we&rsquo;ll need to launch Protractor to actually run our tests. The <code>protractor</code> binary takes a single argument: the configuration file:</p>
<pre class="highlight shell"><span class="gp">$ </span>./node_modules/protractor/bin/protractor protractor_conf.js
</pre>
<p><img src="/images/protractor/running_first_test.png" /></p>

<h2>Testing the Input Box</h2>

<p>First, we&rsquo;re setting our sights on testing the input box. The main page loads a single form with a single input box that is only shown if the user has not yet picked a repo in which to search issues. The <code>&lt;input type=&quot;text&quot;&gt;</code> is bound to a model called <code>repoName</code>. Once the user has submitted the form, then the form itself disappears and the list of issues appears instead.</p>

<p><img src="/images/protractor/home.png" /></p>

<p>The HTML looks like:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;repoform&quot;</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span> <span class="na">ng-if=</span><span class="s">&quot;!repoName&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;getIssues()&quot;</span> <span class="na">class=</span><span class="s">&quot;input-group&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;input-group&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">'repo.name'</span> <span class="na">placeholder=</span><span class="s">'Enter repo name'</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;input-group-btn&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="na">value=</span><span class="s">&quot;Search&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>The functionality that we&rsquo;re interested in testing is that the form disappears and the listing appears. In a new test, we&rsquo;ll want to target the <code>&lt;input&gt;</code> element and write into it. We can do so with the <code>sendKeys()</code> method on our targeted element. To target our <code>&lt;input&gt;</code> element, we can use the <code>by.input()</code> method that gives us access to find input elements containing a binding with <code>ng-model</code>.</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'the input box should go away on submit'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="s1">'repo.name'</span><span class="p">)).</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">'angular/angular.js\n'</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>When we run this test, we&rsquo;ll see that the <code>&lt;input&gt;</code> field is filled out. There will be no expectations set up as we haven&rsquo;t yet written one, but we can see the input filling up with <code>angular/angular.js</code>.</p>

<p>To make our input field disappear, we need to submit the form. The easiest way to submit a form is by faking pressing the enter button. In the above <code>sendKeys()</code>, we included the <code>\n</code> character, which fakes pressing enter in the <code>&lt;input&gt;</code> element.</p>

<p>At this point, we only need to set up an expectation that the <code>repoform</code> element no longer exists on the page (as we&rsquo;re hiding it with <code>ng-if</code>). We can use the same method we did above to confirm it is no longer on the page:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'the input box should go away on submit'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="s1">'repo.name'</span><span class="p">)).</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">'angular/angular.js\n'</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">ptor</span><span class="p">.</span><span class="nx">isElementPresent</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s1">'repoform'</span><span class="p">))).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<h3>Testing the Listing</h3>

<p>After we&rsquo;ve set up our tests that set up the <code>&lt;input&gt;</code> element, we can move on and test the functionality of our listing page. </p>

<p><img src="/images/protractor/listing.png" /></p>

<p>Since the rest of the tests that we&rsquo;ll write will take place in the listing page, we&rsquo;ll nest the rest of the tests here within their own <code>describe()</code> block. Using a separate block allows us to set another <code>beforeEach()</code> block where we&rsquo;ll set up the tests to run against the <code>angular/angular.js</code> github repository.</p>

<p>The describe block will simply act as a user coming to our homepage and typing in the input field and pressing enter. It might seem superfluous to set up our tests in the manner, but remember that the goal of end-to-end testing is to automate user interaction. </p>
<pre class="highlight javascript"><span class="nx">describe</span><span class="p">(</span><span class="s1">'listing page'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">input</span><span class="p">(</span><span class="s1">'repo.name'</span><span class="p">)).</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">'angular/angular.js\n'</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="c1">// ...
</span>  <span class="c1">// our listing page tests will go here
</span><span class="p">});</span>
</pre>
<p>The listing page will have a number of elements that we&rsquo;ll iterate over using <code>ng-repeat</code>. Using the GitHub APi, we&rsquo;ll retrieve 30 issues by default. We can test that this page does in fact resolve to 30 issues. </p>

<p>We can target the <code>ng-repeat</code> element by using the <code>by.repeater()</code> helper. This helper looks at the <code>ng-repeat</code> directives on the page and finds the one that matches our expression. In this case, we&rsquo;re repeating using the Angular expression <code>d in data | orderBy:created_at:false</code>. We can target the repeater using:</p>
<pre class="highlight javascript"><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data | orderBy:created_at:false'</span><span class="p">)</span>
</pre>
<p>We have the option of being explicit with the filters (as we have done above) or leaving off the filters and being more generic:</p>
<pre class="highlight javascript"><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">);</span>
</pre>
<p>Using the <code>by.repeater()</code> doesn&rsquo;t actually return us any elements; only a pointer to the method to fetch elements. If we try to set expectations against the object returned by the <code>by.repeater()</code> method, we&rsquo;ll simply get an ugly error. Protractor is set up in this way because elements are populated through promises, so we have to use the <code>element.all()</code> function to give us access to the resolved elements.</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">elems</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">));</span>
</pre>
<p>With our element targeted, we can simply ask for a count on the <code>element.all()</code> object and set an expectation that there will be 30 elements:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'should have 30 issues'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">elems</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">));</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">elems</span><span class="p">.</span><span class="nx">count</span><span class="p">()).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>Great. Let&rsquo;s dive more deeply into these repeated elements and ensure that the avatar is shown for each of them. We can make a reasonable assumption that the each element is a repeat of every other element, so we&rsquo;ll set up a test that tests a single element. </p>

<p>In order to fetch the elements on the page, we&rsquo;ll start in the same manner using the <code>by.repeater()</code> method. The <code>element.all()</code> method returns an object containing several methods we can use to interact with the repeated listing elements. In this case, we&rsquo;ll simply use the <code>first()</code> method to find the first element in the list.</p>

<p>Since the list is not yet populated on the page, the <code>first()</code> method returns a promise that will be resolved with the first element on the page. </p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'includes a user gravatar per-element'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">elems</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">));</span>
  <span class="nx">elems</span><span class="p">.</span><span class="nx">first</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// elm is the first element
</span>  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>Since we&rsquo;re interested in only a single child element, we&rsquo;ll use the <code>findElement()</code> method to fetch the <code>&lt;img&gt;</code> element. We can target this element by multiple methods. We&rsquo;ll use the <code>by.tagName()</code> method. As with the <code>first()</code> method, <code>findElement()</code> returns a promise for the very same reason. </p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'includes a user gravatar per-element'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">elems</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">));</span>
  <span class="nx">elems</span><span class="p">.</span><span class="nx">first</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elm</span><span class="p">.</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">'img'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// img is the &lt;img&gt; element
</span>    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>We&rsquo;re particularly interested in making sure the src attribute includes a Gravatar URL. We can dive even more deeply into the details of the element using various methods provided by the <code>element</code> object. In this case, we&rsquo;ll use the <code>getAttribute()</code> method to find the src attribute. As with the previous two methods, we&rsquo;ll need to set it up as a promise:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'includes a user gravatar per-element'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">elems</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">));</span>
  <span class="nx">elems</span><span class="p">.</span><span class="nx">first</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elm</span><span class="p">.</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">'img'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">img</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">'src'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// src is the text source
</span>      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>Now that we have the src attribute, we can set up an expectation that the source matches <code>gravatar.com</code>, as GitHub uses Gravatar:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'includes a user gravatar per-element'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">elems</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">'d in data'</span><span class="p">));</span>
  <span class="nx">elems</span><span class="p">.</span><span class="nx">first</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">elm</span><span class="p">.</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">tagName</span><span class="p">(</span><span class="s1">'img'</span><span class="p">)).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">img</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">'src'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">expect</span><span class="p">(</span><span class="nx">src</span><span class="p">).</span><span class="nx">toMatch</span><span class="p">(</span><span class="sr">/gravatar\.com\/avatar/</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">})</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<h3>Testing Routing</h3>

<p>The last piece of functionality we&rsquo;ll want to test is the page navigation. As expected, we&rsquo;ll set up our tests using actions on elements of the page. In this case, we&rsquo;ll target the <code>/about</code> link using CSS and click on the link.</p>

<p>The HTML looks like:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">ng-class=</span><span class="s">&quot;{'active': isCurrentPage('')}&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">id=</span><span class="s">&quot;homelink&quot;</span> <span class="na">ng-href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">ng-class=</span><span class="s">&quot;{'active': isCurrentPage('about')}&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">id=</span><span class="s">'aboutlink'</span> <span class="na">ng-href=</span><span class="s">&quot;#/about&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">&quot;text-muted&quot;</span><span class="nt">&gt;</span>protractorer<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>The <code>/about</code> link is the second element in the header.nav list. The quickest method to target the list is to use a CSS selector through the <code>by.css()</code> method. </p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'should navigate to the /about page when clicking'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">'.header ul li:nth-child(2)'</span><span class="p">))</span>
<span class="p">});</span>
</pre>
<p>Now that we have the link, we can click on it to navigate to the new URL. Once we&rsquo;ve navigated to the <code>/about</code> page, we can test that the page content shows up, or we can test that the current route contains the <code>/about</code> path. Since we can reasonably expect the Angular router to work, we can assume the about page content will load if the browser&rsquo;s URL matches the about page. </p>

<p>Therefore, we&rsquo;ll simply test that the current URL includes <code>/about</code>. We can get hold of the current URL using the Protractor instance method <code>getCurrentUrl()</code>:</p>
<pre class="highlight javascript"><span class="nx">it</span><span class="p">(</span><span class="s1">'should navigate to the /about page when clicking'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">'.header ul li:nth-child(2)'</span><span class="p">)).</span><span class="nx">click</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">ptor</span><span class="p">.</span><span class="nx">getCurrentUrl</span><span class="p">()).</span><span class="nx">toMatch</span><span class="p">(</span><span class="sr">/\/about/</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>Finally, since we&rsquo;re testing the front end, we can also expect that the <code>active</code> class will be added to the link. </p>

<blockquote>
<p>The <code>active</code> class adds the color style on the button.</p>
</blockquote>

<p>We&rsquo;ll want to run the same action we did previously where we click on the <code>/about</code> link. Any time that we find ourselves duplicating test data, it&rsquo;s usually a good idea to nest the tests in their own describe block and move the duplication into the block. Let&rsquo;s go ahead and move our tests into the describe block:</p>
<pre class="highlight javascript"><span class="nx">describe</span><span class="p">(</span><span class="s1">'page navigation'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">link</span><span class="p">;</span>
  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">link</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">'.header ul li:nth-child(2)'</span><span class="p">));</span>
    <span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="s1">'should navigate to the /about page when clicking'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">ptor</span><span class="p">.</span><span class="nx">getCurrentUrl</span><span class="p">()).</span><span class="nx">toMatch</span><span class="p">(</span><span class="sr">/\/about/</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">it</span><span class="p">(</span><span class="s1">'should add the active class when at /about'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// should have the active class
</span>  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>The final test tests whether the class list contains the string <code>active</code>:</p>
<pre class="highlight javascript"><span class="nx">expect</span><span class="p">(</span><span class="nx">link</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">'class'</span><span class="p">)).</span><span class="nx">toMatch</span><span class="p">(</span><span class="sr">/active/</span><span class="p">);</span>
</pre>
<h3>Want More?</h3>

<p>Protractor is a highly active project on GitHub and an incredibly powerful end-to-end testing framework. It will soon replace Karma as the official end-to-end test runner and become the official testing framework for Angular.</p>

<p>The testing source code is available at <a href="http://j.mp/1m4xdma">http://j.mp/1m4xdma</a>.</p>

<p>If you enjoyed this section, check out <a href="https://ng-book.com">ng-book.com</a> for more details. </p>

<p>Thanks, and happy testing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Easily Add a Back End to Your Angular App With Firebase</title>
    <link href="http://www.ng-newsletter.com/posts/back-end-with-firebase.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/back-end-with-firebase.html"/>
    <updated>2014-01-06T00:00:00-08:00</updated>
    <id>urn:uuid:e9222445-db66-5f3a-be9e-d18ffddaaa9c</id>
    <summary>As a client-side framework, Angular alone is not enough to build a full back-end webapp. Often times, it’s difficult to know when to sync our data with the back-end, and how to handle the changes and potential conflicts of data between versions of...</summary>
    <content type="html"><![CDATA[<p>As a client-side framework, Angular alone is not enough to build a full back-end webapp. Often times, it&rsquo;s difficult to know when to sync our data with the back-end, and how to handle the changes and potential conflicts of data between versions of modified content.</p>

<blockquote>
<p>Imagine we have two instances of our application running at the same time. What if both instances are trying to edit the same data? Without handling this case, we can get into trouble, especially if we&rsquo;re building the front-end for a complex web application, like a bank.</p>
</blockquote>

<p>Using Firebase we can easily add a backend to our Angular app. Featured on the Angular.js home page, Firebase is quickly becoming the standard for Angular persistence.</p>

<p>Firebase is a real-time back-end for building collaborative, modern applications. Rather than requiring us to focus on building custom request-response models with a server-side component where we manually worry about data-synchronization, Firebase lets us get our app up and running in minutes. We can build a data-backed webapp entirely in Angular that can scale out-of-the-box and update all clients in real-time.</p>

<p>Even more, data stored in Firebase is standard schema-less JSON, which makes it incredibly easy to save data models of any type into Firebase. If a device loses network connection, Firebase continues to allow access to locally cached data and seamlessly synchronizes changes with the cloud when the device comes back online.</p>

<blockquote>
<p>The Firebase client libraries and REST API provide easy access to that data from any platform. Although we&rsquo;re focusing specifically on Angular, this means native apps or other server-side apps can reach the data saved by Angular.</p>
</blockquote>

<h2>3-Way Data Binding With Firebase and Angular</h2>

<p>With Angular, rendering content to the browser is elegant and easy. Storing and retrieving data, the other major component to production-level webapps, is handled elegantly by Firebase. This makes Firebase an excellent partner to Angular. </p>

<p>Angular is great with its two-way data binding between models in JavaScript and the DOM. By syncing our Angular model with Firebase, our app’s data in the model is synchronized in real-time across all clients. That means that when data changes in one client, these updates are immediately persisted to Firebase and rendered across all connected devices.  </p>

<p><img src="/images/firebase/3-way-binding.png" /></p>

<p>When data is updated in any of the three places (View, Model, or Firebase), the changes propagate in real-time to the other two across <em>all</em> clients.</p>

<h2>Getting Started With AngularFire</h2>

<p>It&rsquo;s easy to create real-time web applications using Firebase and Angular thanks to the official Angular library: AngularFire. The AngularFire bindings were built by the Firebase team specifically for integration with Angular applications, as we&rsquo;ll see. </p>

<p>There are only <strong>four</strong> steps to backing our Angular app on Firebase using AngularFire:</p>

<h3>1. Sign up and Create a Firebase</h3>

<p>Before we can actually save or retrieve any data from Firebase, we&rsquo;ll need an account. It&rsquo;s free to create an account, so let&rsquo;s sign up.</p>

<p><img src="/images/firebase/firebase_home.png" /></p>

<p>First, head to <a href="http://firebase.com">firebase.com</a> and click on the <em>Sign up</em> button (or login if you already have an account):</p>

<p><img src="/images/firebase/signup.png" /></p>

<p>Now that we have signed up for an account, we can create our first Firebase. The name we choose will be part of the URL we&rsquo;ll use to reference our Firebase data.</p>

<p>For example, when we create a Firebase with the name of <code>ng-newsletter</code>, our Firebase URL will be available at <code>https://ng-newsletter.firebaseio.com</code>.  </p>
<pre class="highlight shell">https://&lt;my-firebase-name&gt;.firebaseio.com/
</pre>
<p><img src="/images/firebase/create.png" />
<img src="/images/firebase/complete.png" /></p>

<p>The AngularFire bindings let us associate a Firebase URL with a model or collection of models. These models will represent the data that will be transparently kept in sync across all clients currently using our app. </p>

<p>Angular’s two-way data binding keeps the DOM synced to JavaScript variables in memory, and Firebase stores those changes and sends them to all listening clients in real-time. </p>

<blockquote>
<p>We get this data synchronization <strong>without changing</strong> how we build our angular app. Very cool!</p>
</blockquote>

<h3>2. Include the Firebase and AngularFire libraries</h3>

<p>Using AngularFire is as simple as including two JavaScript files in our HTML file, one for Firebase and another for AngularFire. </p>

<p>We&rsquo;ll need to use Firebase&rsquo;s CDN, so at the top of our index.html file we&rsquo;ll add the following two lines:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.firebase.com/v0/firebase.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.firebase.com/libs/angularfire/0.5.0-rc1/angularfire.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<h3>3. Add Firebase as a dependency</h3>

<p>As usual with any application libraries, we&rsquo;ll need to set the firebase library as a dependency for our module. This tells the rest of our application that we can use the firebase bindings in our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;myapp&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;firebase&quot;</span><span class="p">]);</span>
</pre>
<h3>4. Bind a model to a Firebase URL</h3>

<p>By declaring Firebase as a dependency, we now have access to the <code>$firebase</code> service, which allows us to inject it as a dependency in our controllers and services. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myapp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'firebase'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MyCtrl&quot;</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;$scope&quot;</span><span class="p">,</span> <span class="s2">&quot;$firebase&quot;</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$firebase</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Our controller definition goes here
</span>  <span class="p">}</span>
<span class="p">]);</span>
</pre>
<p>The <code>$firebase</code> service takes a single argument: a Firebase reference.</p>

<h4>FirebaseRef (Firebase reference)</h4>

<p>The Firebase reference tells <code>$firebase</code> where the data is stored and how to connect. The <code>$firebase</code> service handles the synchronization with Angular, and is where we&rsquo;ll call methods to save our changes.</p>

<p>This object has several methods we&rsquo;ll use to interact with our remote data. These methods, detailed below are all prefixed with the <code>$</code> symbol, such as <code>$add()</code> and <code>$save()</code> and are available on this object. </p>

<blockquote>
<p>Note that <strong>no</strong> changes to the object will result in changes made to the remote data.</p>
</blockquote>

<p>To synchronize a local object model to the remote Firebase reference, we&rsquo;ll use the service method and pass it an instance of the Firebase object. For example, to synchronize the <code>$scope.items</code> model to our <code>ng-newsletter</code> items, we&rsquo;ll run the following method:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MyCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$firebase</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Firebase URL
</span>  <span class="kd">var</span> <span class="nx">URL</span> <span class="o">=</span> <span class="s2">&quot;https://ng-newsletter.firebase.com&quot;</span><span class="p">;</span>
  <span class="c1">// Synchronizing the items on our $scope
</span>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="nx">$firebase</span><span class="p">(</span><span class="k">new</span> <span class="nx">Firebase</span><span class="p">(</span><span class="nx">URL</span> <span class="o">+</span> <span class="s1">'/items'</span><span class="p">));</span>
<span class="p">});</span>
</pre>
<p>Now, we can simply interact with the <code>$scope.items</code> object to synchronize our Angular models with Firebase. </p>

<h3>Data Synchronization</h3>

<p>We can synchronize our data back to Firebase by using the following methods provided by the <code>$firebase</code> object.</p>

<h4>$add(value)</h4>

<p>The <code>$add</code> method takes a single argument of any type. It will append this value as a member of a chronologically ordered list. We can think of this like we&rsquo;re calling <code>.push(value)</code> on to the Firebase reference <em>array</em>.</p>

<blockquote>
<p>Note that the Firebase reference object is not really an array, but we can act as though it is.</p>
</blockquote>

<p>For example, we can add the string &ldquo;bar&rdquo; to the Firebase reference located at the <code>/foo</code> endpoint:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$add</span><span class="p">({</span><span class="na">foo</span><span class="p">:</span> <span class="s2">&quot;bar&quot;</span><span class="p">});</span>
</pre>
<h4>$remove([key])</h4>

<p>The <code>$remove</code> method removes remote child references from Firebase. It takes a single optional argument: </p>

<h5>key (optional string)</h5>

<p>If a <code>key</code> argument (as a string) is provided, the <code>$remove()</code> method will remove the child referenced by that key. If no key is provided, the entire remote object will be removed.</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$remove</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="c1">// Remove the child named &quot;foo&quot;.
</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$remove</span><span class="p">();</span>      <span class="c1">// Remove the entire object.
</span></pre>
<h4>$save([key])</h4>

<p>The <code>$save</code> method synchronizes all changes to the local elements with the Firebase data store and pushes them instantly to all listening clients. It takes a single argument:</p>

<h5>key (optional string)</h5>

<p>If the <code>key</code> argument (string) is provided, the <code>$save()</code> method will save changes made to the child element referenced by the key to Firebase. If no key is provided to the <code>$save()</code> method, then all local changes made to the object will be persisted to Firebase.</p>

<blockquote>
<p>The <code>$save()</code> method is most commonly used to save any local changes made to the model.</p>
</blockquote>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;baz&quot;</span><span class="p">;</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$save</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>  <span class="c1">// new Firebase(URL + &quot;/foo&quot;) now contains &quot;baz&quot;.
</span></pre>
<h4>$child(key)</h4>

<p>The <code>$child()</code> method creates a new <code>$firebase</code> object for a child referenced by the provided key. The method takes a single argument:</p>

<h5>key (string)</h5>

<p>The <code>key</code> string is used to reference the newly created child.</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$child</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
<span class="nx">child</span><span class="p">.</span><span class="nx">$remove</span><span class="p">();</span>            <span class="c1">// Equivalent to calling $scope.items.$remove(&quot;foo&quot;);
</span></pre>
<h4>$set(value)</h4>

<p>The <code>$set()</code> method overwrites the remote value for this object to newValue. The local object will also be subsequently updated to this new value.</p>

<p>It takes a single argument:</p>

<h5>value (string)</h5>

<p>The <code>value</code> argument is the new value of the local object. The value will overwrite the old value, and will be subsequently updated to this new value.</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$set</span><span class="p">({</span><span class="na">bar</span><span class="p">:</span> <span class="s2">&quot;baz&quot;</span><span class="p">});</span>  <span class="c1">// new Firebase(URL + &quot;/foo&quot;) is now null.
</span></pre>
<h2>Ordering in AngularFire</h2>

<p>If we want to sort our remote objects, rather than simply sorting locally with Angular&rsquo;s orderBy filter, we can set the <code>$priority</code> field on a record before calling <code>$save()</code>.</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">foo</span><span class="p">.</span><span class="nx">$priority</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$save</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>  <span class="c1">// new Firebase(URL + &quot;foo&quot;)'s priority is now 2.
</span></pre>
<p>By default, the <code>$firebase</code> service returns a simple JavaScript object. We can convert this object into an array that respects order simply by using the <code>orderByPriority</code> filter.</p>

<p>This filter turns the object returned by the <code>$firebase</code> service into an array and orders by the <code>priority</code> definition defined by Firebase. Each object in the new array will get an <code>$id</code> property defined on it which references the keyname of the object.</p>
<pre class="highlight html"><span class="nt">&lt;ul</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items | orderByPriority&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;l&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;{{item.$id}}&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;item.$priority&quot;</span><span class="nt">/&gt;</span>
    {{item.name}}
  <span class="nt">&lt;/l&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<h2>Firebase events</h2>

<p>Firebase fires two types of events that we can use to handle custom logic from within our app. We can use the <code>$on()</code> method to attach event handlers for these two event types:</p>

<h4>loaded</h4>

<p>The <code>loaded</code> event is fired when initial data is received from Firebase. It is fired once and only once.</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">'loaded'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Items loaded&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<h4>change</h4>

<p>The <code>change</code> event is fired whenever there is a remote change in the data applied to the local object. For instance, this happens if there is a new task added by another user to our task list.</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">'change'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;A change is afoot&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<h2>Implicit Synchronization</h2>

<p>To add automatic, implicit synchronization with a $scope variable, we can call the <code>$bind()</code> method on the object returned by the <code>$firebase</code> service. </p>

<p>The <code>$bind()</code> method automatically establishes a 3-way binding so we don&rsquo;t need to explicitly save data to Firebase using the <code>$add()</code> or <code>$save()</code> methods. </p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$bind</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="s2">&quot;remoteItems&quot;</span><span class="p">);</span>
<span class="nx">$scope</span><span class="p">.</span><span class="nx">remoteItems</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>  <span class="c1">// new Firebase(URL + &quot;/bar&quot;) is now &quot;foo&quot;.
</span></pre>
<p>The <code>$bind()</code> method returns a promise, which will be resolved when the initial data from the server has been received. The promise will be resolved with an <code>unbind</code> function, which will disassociate the 3-way binding when called.</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">$bind</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="s2">&quot;remote&quot;</span><span class="p">)</span>
<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">unbind</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">unbind</span><span class="p">();</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">remote</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>    <span class="c1">// No changes have been made to the remote data.
</span><span class="p">});</span>
</pre>
<p>The <code>$bind</code> method returns a promise, which will be resolved when the initial data from the server has been received. The promise will be resolved with an <code>unbind</code> function, which will disassociate the 3-way binding when called. This is useful for optimizing our site and removing unnecessary watches.</p>

<h2>Authentication with AngularFire</h2>

<p>Firebase provides a simple, client-side authentication strategy out of the box.</p>

<p>Using Firebase’s Simple Login or Custom Login methods, we can easily add user authentication to our application with AngularFire. </p>

<p>Custom Login is most appropriate to use if we have our own server where we want to control our own authentication, or we want to integrate existing authentication with Firebase. </p>

<p>If we want to use Firebase to manage all of our authentication, we can use Simple Login, which supports Facebook, Twitter, GitHub, Persona, and Email/Password authentication.</p>

<p>By defining Firebase as a dependency in our app’s module, we have access to the <code>$firebaseAuth</code> service in our controllers and services. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MyAuthCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$firebaseAuth</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Define our controller here 
</span><span class="p">});</span>
</pre>
<p>The <code>$firebaseAuth</code> service method takes two arguments: a Firebase reference, and an optional object with options. The object can contain the following properties to customize how the authentication works with Firebase:</p>

<ul>
<li>path - the <code>path</code> to which the user will be redirected if the <code>authRequired</code> property is set to true in the <code>$routeProvider</code> and the user is not logged in.</li>
<li>simple - <code>$firebaseAuth</code> requires inclusion of the firebase-simple-login.js file by default. If this <code>simple</code> value is set to false, this requirement is waived, but only custom login functionality will be enabled and we cannot use simple auth.</li>
<li>callback - a function that will be called when there is a change in authentication state. We can use this callback as an alternative to events fired on <code>$rootScope</code>, which is the recommended way to handle changes in auth state.</li>
</ul>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s2">&quot;MyAuthCtrl&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$firebaseAuth</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Firebase</span><span class="p">(</span><span class="nx">URL</span><span class="p">);</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">auth</span> <span class="o">=</span> <span class="nx">$firebaseAuth</span><span class="p">(</span><span class="nx">ref</span><span class="p">);</span>
    <span class="c1">// $scope.auth.user is null until the user logs in.
</span><span class="p">});</span>
</pre>
<p>The object returned by <code>$firebaseAuth()</code> contains a single property named <code>user</code>. <code>user</code> will be set to null if the user is logged out and will change to an object containing the user’s details once they are logged in. We&rsquo;ll cover detecting logins below. </p>

<blockquote>
<p>The contents of the user&rsquo;s detail object will vary depending upon the authentication mechanism used, but at the very least, it will contain a user <code>id</code> and <code>provider</code> name.</p>
</blockquote>

<h2>Authentication Events</h2>

<p>With the AngularFire authentication, we have access to several methods for changing a user&rsquo;s authentication state. These methods are <code>$login()</code>, <code>$logout()</code>, and <code>$createUser()</code>.</p>

<p>Authentication state in AngularFire is considered global and each of the authentication methods below will be broadcast on the <code>$rootScope</code>. Since nearly all scopes inherit from <code>$rootScope</code>, we can call <code>$scope.on(...)</code> from any controller.</p>

<blockquote>
<p>Global authentication means that we cannot have multiple users logged into the same instance of the application at the same time. For example, global authentication prevents two users from being logged into GMail at the same time in the same browser instance.</p>
</blockquote>

<h5>$firebaseAuth:login</h5>

<p>This event is triggered when a user successfully logs in. This event fires with two arguments: an event and user object.</p>
<pre class="highlight javascript"><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s2">&quot;$firebaseAuth:login&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;User &quot;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot; successfully logged in!&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<h5>$firebaseAuth:logout</h5>

<p>The <code>logout</code> event is triggered when a user logs out. The event is fired with an event argument.</p>
<pre class="highlight javascript"><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s2">&quot;$firebaseAuth:logout&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;User logged out!&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<h5>$firebaseAuth:error</h5>

<p>The <code>error</code> event is triggered when there was error during either calling <code>$login()</code> or <code>$logout()</code>. This event will be fired with a single argument, the error.</p>

<h3>$login(token, [options])</h3>

<p>We&rsquo;ll use the <code>$login()</code> method to login a user. We&rsquo;ll usually use this method when a user clicks a login button, like the following:</p>
<pre class="highlight html"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> 
    <span class="na">ng-hide=</span><span class="s">&quot;auth.user&quot;</span> 
    <span class="na">ng-click=</span><span class="s">&quot;auth.$login('persona')&quot;</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/a&gt;</span>
</pre>
<p>The <code>$login()</code> function takes up to two arguments:</p>

<h5>tokenOrProvider (string/JWT token)</h5>

<p>If we are using the Firebase Simple Login, we can simply pass in a provider name, such as &lsquo;facebook&rsquo;, or &lsquo;persona&rsquo;. If we want to use the Custom Login flow, then we&rsquo;ll need to pass in a valid JWT token instead.</p>

<h5>options (object)</h5>

<p>The <code>options</code> argument is only used with Simple Login, where the provided options will be passed as-is to the Simple Login method.</p>

<p>For a &ldquo;password&rdquo; provider, we&rsquo;ll want to provide a username and password as an object. </p>

<blockquote>
<p>For more information about the user object, read the Firebase documentation on <a href="http://angularfire.com/">AngularFire.com</a>. </p>
</blockquote>

<h3>$logout()</h3>

<p>The <code>$logout()</code> method will log out the current user. It takes no arguments. </p>

<p>The <code>$firebaseAuth:logout</code> event will be fired, and the user property will be set to null after the logout is completed. This method is typically attached to a logout button:</p>
<pre class="highlight html"><span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;auth.user&quot;</span><span class="nt">&gt;</span>
  {{auth.user.name}} | <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;auth.$logout()&quot;</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/span&gt;</span>
</pre>
<h3>$createUser()</h3>

<p>The <code>$createUser()</code> method is useful when we are using the &ldquo;password&rdquo; provider with Firebase Simple Login. </p>

<p>The <code>$createUser()</code> method takes three arguments:</p>

<h5>email (string)</h5>

<p>The <code>email</code> to create the user with.</p>

<h5>password (string)</h5>

<p>The <code>password</code> is the password the user will be created with.</p>

<h5>callback (function)</h5>

<p>The <code>callback</code> method will be called after the <code>$createUser()</code> has run. It will be called with two arguments: error and user. If there was an error in the <code>$createUser()</code> method, the error will contain the error message and <code>user</code> will be null. If the error is null, then the user will be defined.</p>
<pre class="highlight javascript"><span class="nx">auth</span><span class="p">.</span><span class="nx">createUser</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'User Id: '</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">', Email: '</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Firebase makes it easy to wire up a back-end to our Angular app without having to worry about setting up a server or writing a single line of back-end code. AngularFire enables us to create complex, real-time applications that synchronize immediately between our application’s model and data stored in Firebase.</p>

<p>To learn more about AngularFire, the source code is available on Github: <a href="https://github.com/firebase/angularFire">https://github.com/firebase/angularFire</a>. </p>

<p>To get an AngularFire app up and running in minutes, clone the <a href="https://github.com/firebase/angularFire-seed">angularFire-seed</a> repo.</p>

<h2>Beyond AngularFire</h2>

<p>AngularFire is a great wrapper for interacting with Firebase, but you can certainly interact directly with the Firebase SDK from Angular for more complex operations. Check out the <a href="https://www.firebase.com/tutorial/">Firebase tutorial</a> to learn more about the advanced capabilities of this sophisticated real-time platform.</p>

<script src="https://cdn.firebase.com/v0/firebase.js"></script>

<script src="https://cdn.firebase.com/libs/angularfire/0.5.0-rc1/angularfire.js"></script>

<script type="text/javascript" src="/js/posts/firebase.js"></script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Angular for the jQuery developer</title>
    <link href="http://www.ng-newsletter.com/posts/angular-for-the-jquery-developer.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/angular-for-the-jquery-developer.html"/>
    <updated>2013-11-18T00:00:00-08:00</updated>
    <id>urn:uuid:904b5708-aa5f-5a4b-9e50-6a54b72f4a83</id>
    <summary>One of the most commonly asked questions about learning AngularJS is how to think about it when coming from a jQuery background where manually manipulating the DOM tree is a requirement to adding interactivity to our web pages.

jQuery itself is simply...</summary>
    <content type="html"><![CDATA[<p>One of the most commonly asked questions about learning AngularJS is how to <em>think</em> about it when coming from a jQuery background where manually manipulating the DOM tree is a requirement to adding interactivity to our web pages.</p>

<p>jQuery itself is simply a DOM manipulation utility belt. It is an imperative wrapper around DOM manipulation, <strong>not</strong> a tool for building web apps. We obviously <em>can</em> use jQuery to build dynamic websites, but that&rsquo;s like using a hammer to cut through wood&hellip; Why not just buy a saw and do it right?</p>

<blockquote>
<p>This article is intended on illustrating how to think about Angular, not abandoning jQuery. jQuery, the <em>library</em> is a great tool with years of production maturity and can be used alongside Angular and we use it in our production applications as well.</p>
</blockquote>

<p>In this post, we&rsquo;ll walk through how to <em>think</em> in Angular and provide a mental model for structuring how to <em>think</em> about building better, faster, more stable web apps with AngularJS. </p>

<p>Throughout this section, we&rsquo;re working through a jQuery application and demonstrating how to build it in Angular. </p>

<h2>How we build web apps with jQuery</h2>
<pre class="highlight javascript"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#article&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#article_placeholder&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;Angular for the jQuery developer&quot;</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>Historically, we as developers have been required to manually update DOM components to build a dynamic webpage. </p>

<p>We first lay out the structure to our website and then design the components with CSS and add interactivity to the page. That is, we layer interactivity on top of our HTML as an afterthought in the build process and treat <em>interactivity</em> as a second-class citizen.</p>

<h2>Why not jQuery for building webapps?</h2>

<p>Throughout the source, we are binding actions to specific DOMs with specific DOM IDs. What if a team member determines that the name <code>#message</code> isn&rsquo;t specific enough, we change the DOM entirely to accompany a new design, or we are adding new functionality that includes an ID of <code>#name</code>?</p>

<h3>Tight coupling</h3>

<p>Our JavaScript is written to specifically correspond to our HTML. Such high cohesion often necessitates a lot more work on our part to keep our JavaScript in sync with our HTML. Whenever we change the DOM, we must be delicate and aware so that we don&rsquo;t change the functionality of our JavaScript. </p>

<h3>Code disorganization</h3>

<p>When using jQuery, there is no clearly encouraged organization for our web app functionality; it&rsquo;s up to us to determine how we&rsquo;ll organize it.</p>

<h3>Low-level tools for high-level functionality</h3>

<p>When we&rsquo;re building a web app with any level of complexity, we&rsquo;re forced to write our custom actions with low-level DOM manipulation tools rather than focusing on the functionality.</p>

<p><strong>Angular</strong> takes a different approach to building web apps: It treats building interactivity as a native component to webapps and encourages working interactivity through development while we build our apps.</p>

<p>The following 8 core ideas to keep in mind when we are building Angular apps are:</p>

<h3>1) Declare the interactivity alongside the HTML</h3>

<p>When we write Angular apps, we don&rsquo;t separate how we write our page and our interaction; instead, we define the functionality inside our HTML. If we want to run an action when we click a button, we attach the action to the button:</p>
<pre class="highlight html"><span class="c">&lt;!-- Call the runAction() method --&gt;</span>
<span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;runAction()&quot;</span><span class="nt">&gt;</span>Run action<span class="nt">&lt;/button&gt;</span>
</pre>
<p>Doing so allows us to be explicit and <strong>declarative</strong> with our DOM. Additionally, our DOM tells us explicitly what it will do in the browser.</p>

<blockquote>
<p>Imperative programming: telling the &ldquo;machine&rdquo; how to do something, and as a result what you want to happen will happen.
Declarative programming: telling the &ldquo;machine&rdquo; what you would like to happen, and letting the computer figure out how to do it.</p>
</blockquote>

<h3>2) Leave the DOM alone</h3>

<p>Angular very clearly lays out a strategy of building applications using the data to drive the functionality. Rather than building a page to manipulate, we interact with a data object (called <code>$scope</code>).</p>

<p>When we want to change an element in our view, we change the data that is tied to it and let Angular take care of updating the DOM.</p>
<pre class="highlight html"><span class="c">&lt;!-- Show the name in the browser --&gt;</span>
<span class="nt">&lt;h1&gt;</span>Welcome {{ name }}<span class="nt">&lt;/h1&gt;</span>
<span class="c">&lt;!-- Bind the input to the name --&gt;</span>
<span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span> 
      <span class="na">name=</span><span class="s">&quot;name&quot;</span> 
      <span class="na">placeholder=</span><span class="s">&quot;Enter your name&quot;</span> <span class="nt">/&gt;</span>
</pre>
<div class="see_it">
  <h4>See it</h4>
  <h1>Welcome {{ name }}</h1>
  <!-- Bind the input to the name -->
  <input ng-model="name" 
        name="name" 
        placeholder="Enter your name" />
</div>

<p>At no point in this example have we needed to manipulate the DOM. This fact allows us to write HTML and design it at the same time.</p>

<h3>3) Architecting the app</h3>

<p>Writing an Angular app allows us to think in terms of building an application. We can focus on the functionality, from understanding how our app interacts with a server-side API and what actions happen when we click on a button to which routes our app supports.</p>

<p>We need to think about how to divide the functionality of our app into small components that make it easy to extend and test our app.</p>

<h3>4) Leave jQuery cold turkey</h3>

<p>It&rsquo;s tempting to use jQuery as a crutch when we first start learning Angular. In our classes and books, we constantly recommend to not even import jQuery when first starting to build with Angular. </p>

<p><strong>Everything that we do in jQuery, we can do with Angular, often with much less code.</strong></p>

<p>We&rsquo;ll write more efficient, more extensible, more testable applications if we stick to using Angular and don&rsquo;t rely on tools we&rsquo;re used to as crutches. If you want to build a piece of functionality that is not included in Angular, someone in the community has likely built it.</p>

<h3>5) The view is the state official record</h3>

<p>Angular apps use the view as the container of interactivity and data. We use directives to attach functionality to the view, which, in turn, uses data bindings to create an explicit data-action chain inside the app. </p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">fs-modal</span> 
      <span class="na">on-ok=</span><span class="s">&quot;proceedAsPlanned()&quot;</span>
      <span class="na">on-cancel=</span><span class="s">&quot;abort()&quot;</span>
      <span class="na">title=</span><span class="s">&quot;Are you sure?&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<p>The <code>fs-modal</code> directive used above very clearly demonstrates what the <code>&lt;div&gt;</code> element&rsquo;s responsibility is. The only way that we can change the view&rsquo;s responsibility is by changing the HTML, unlike the sticky situation we get into when we imperatively assign functionality to elements outside in a foreign document.</p>

<h3>6) Models update the view, which updates the models</h3>

<p>One of the most basic, coolest features of Angular is that we don&rsquo;t need to worry about the DOM beyond writing the HTML.</p>

<p>Unlike jQuery, where we need to imperatively build elements and attach them, while maintaining the state or query the <code>document</code> at runtime, we can focus on building the functionality based on expected data.</p>

<p>For instance, to show a loading indicator, we can set a boolean flag that shows or hides the element based upon a model value:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;isLoading&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/loading.gif&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Now, whenever we are loading new data, we can simply flip this &ldquo;switch&rdquo; on (by setting <code>isLoading</code> to true). When we are done loading data, we can flip it back to false, and the indicator will hide. </p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">loadNewData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">isLoading</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/api/data.json'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">isLoading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">isLoading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre>
<div class="see_it">
  <h4>See it</h4>
  <small>This will change isLoading for two seconds, not actually load any real data</small>
  <div ng-controller="LoadingCtrl">
    <div ng-show="isLoading">
      <img class="logo"
            src="/images/thinking/loading.gif" />
    </div>
    <button ng-click="showLoadingData()">
      Load new data
    </button>
  </div>
</div>

<p>If we update the model in our controllers, then the view will update. If we act upon and change the model in the view, then the model in our controllers will update and everything is kept in sync. </p>

<p>The <em>magic</em> of Angular is that throughout this entire process, we don&rsquo;t need to even think about how &ndash; we can simply concern ourselves with the functionality we are building.</p>

<h3>7) Dependencies, dependencies, dependencies - oh my!</h3>

<p>Another task Angular handles seamlessly for us in the background is dependency injection: We simply tell Angular what we need to operate our app, and, as long as Angular can find it, Angular will handle loading it for us.</p>

<h3>8) Test-driven development</h3>

<p>One of the greatest components of Angular is that it was built, from the ground up, to be testable. When we write tests, we not only guarantee that our web app is working, but also that components we are using work as expected.</p>

<p>Angular was built with test-driven development in mind, and thus, it is incredibly easy to write testable applications. </p>

<p>We can write tests for all parts of our application &ndash; for the model layer, the service layer, the view layer, etc.</p>

<p>We can test both from the perspective of the developer (and unit test each component) and from the perspective of our users (by end-to-end testing, wherein we load our app in a browser and tell the test framework to click on buttons and test that the view is showing what we expect).</p>

<blockquote>
<p>No more manually clicking buttons every time we make a minor change to <em>test</em> if a feature is working.</p>
</blockquote>

<h2>In summary</h2>

<p>When we think in Angular terms, we think about:</p>

<ul>
<li>Views, not DOM elements</li>
<li>Directives, not event bindings</li>
<li>Models as a projection of view</li>
<li>Functionality separation</li>
</ul>

<h2>The jQuery chat app</h2>

<p>For instance, let&rsquo;s say we have a very basic chat application built in jQuery. The application is incredibly simple and has the following features:</p>

<ul>
<li>Allow users to input their username</li>
<li>Allow users to input a message and send it to recipients of the chat window</li>
<li>Show a list of users connected to our chat app</li>
</ul>

<p>The app that we&rsquo;ll be building has the following HTML structure (with styles removed for simplicity):</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;chatApp&quot;</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;message_placeholder&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
            <span class="na">id=</span><span class="s">&quot;name&quot;</span>
            <span class="na">placeholder=</span><span class="s">&quot;Your name&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
            <span class="na">id=</span><span class="s">&quot;message&quot;</span>
            <span class="na">placeholder=</span><span class="s">&quot;Your message...&quot;</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span>
            <span class="na">class=</span><span class="s">&quot;button prefix&quot;</span>
            <span class="na">value=</span><span class="s">&quot;Send&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>We have a form with several input fields and a div that will contain our list of messages.</p>

<div class="see_it">
  <h4>Live example in jQuery</h4>
  <div id="chatApp" class="row">
    <div class="row">
      <div class="small-12 columns">
        <div id="message_placeholder" class="messages_placeholder"></div>
      </div>
    </div>
    <div class="row">
      <div class="small-12 columns">
        <form>
          <div class="row collapse">
            <div class="small-2 columns">
              <input type="text"
                  id="name"
                  placeholder="Your name" />
            </div>
            <div class="small-8 columns">
              <input type="text"
                  id="message"
                  placeholder="Your message..." />
            </div>
            <div class="small-2 columns">
              <input type="submit"
                  class="button prefix"
                  value="Send" />
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<h2>Building it in jQuery</h2>

<p>To build this chat app in jQuery, we&rsquo;re going to need some important pieces of information. We need to know the IDs of the following input fields:</p>

<ul>
<li>The user&rsquo;s name input (#name)</li>
<li>The message input (#message)</li>
<li>The chat window (#message_placeholder)</li>
</ul>

<p>For these field, we&rsquo;ll attach an event listener to the <code>&lt;form&gt;</code> submit action where we&rsquo;ll handle attaching the messages to the chat window.</p>

<p>Inside the chat window, we&rsquo;ll only keep a limited number of messages in the history, so we&rsquo;ll need to make sure we remove <em>old</em> messages. </p>

<p>Lastly, we&rsquo;ll only be able to run this entire process after the document is ready to go, so we&rsquo;ll need to wrap it in a <code>$(document).ready(function() {})</code>. </p>

<p>Since this is not a jQuery tutorial, this source is:</p>
<pre class="highlight javascript"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">maxMessages</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
      <span class="nx">messageBox</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message_placeholder&quot;</span><span class="p">);</span>

  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#chatApp form&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'submit'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">from</span>  <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#name&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span> <span class="o">||</span> <span class="s2">&quot;Anonymous&quot;</span><span class="p">,</span>
        <span class="nx">msg</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">()</span>

    <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;div /&gt;&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">from</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">msg</span><span class="p">);</span>
    <span class="nx">messageBox</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#message&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">messageBox</span><span class="p">.</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">maxMessages</span><span class="p">)</span>
      <span class="nx">messageBox</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">).</span><span class="nx">first</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>

    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<h2>Building it with Angular</h2>

<p>When we build this same chat program in Angular, we don&rsquo;t need to bother with knowing the selectors for the elements that we&rsquo;re attaching interactivity to, because we&rsquo;ll write our DOM <em>to include</em> the interactivity.</p>

<p>Like all Angular apps, we&rsquo;ll start by defining our app in the page. Angular apps do not have to take over the entire page; rather, they can be placed in specific elements by using the <code>ng-app</code> directive. We&rsquo;ll also want to contain our functionality inside of a controller so we don&rsquo;t <em>dirty</em> the global scope:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;ngChatApp&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;ChatCtrl&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<blockquote>
<p>A <strong>directive</strong> is simply a fancy term for a <strong>function that is run on a specific DOM element</strong>. It allows us to attach functionality to HTML elements.</p>
</blockquote>

<p>Next, we&rsquo;ll create the JavaScript that we&rsquo;ll use to write our functionality:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'ngChatApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ChatCtrl'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Write our controller here
</span><span class="p">});</span>
</pre>
<h3>It&rsquo;s about the data, not the DOM</h3>

<p>We only need to think about what data we want to place in our HTML and where, not worry about how it gets there. With that in mind, we&rsquo;ll be keeping track of <code>messages</code> to display, not DOM elements to create.</p>

<p>In our view, we can simply iterate over our messages and allow the DOM to display as it naturally will when the messages model is filled with data:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;message_placeholder&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">&quot;message in messages&quot;</span><span class="nt">&gt;</span>
    {{ message.from }}: {{ message.msg }}
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Similarly, we can bind model values to our input fields and allow the model to be built in the background so that we can use it within our controller action. We can also bind actions, such as form submission, to the HTML. </p>
<pre class="highlight html"><span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;addMessage()&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
        <span class="na">ng-model=</span><span class="s">&quot;username&quot;</span>
        <span class="na">placeholder=</span><span class="s">&quot;Your name&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
        <span class="na">ng-model=</span><span class="s">&quot;message&quot;</span>
        <span class="na">placeholder=</span><span class="s">&quot;Your message&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span>
        <span class="na">value=</span><span class="s">&quot;Send&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<p>When the form is submitted, the <code>addMessage()</code> function will be called, and we&rsquo;ll have the values of <code>username</code> and <code>message</code> available to us&hellip; but where can we get them?</p>

<h2>$scope</h2>

<p>The <code>$scope</code> is the glue between the view and the controller. Anything that we <em>bind</em> in the view will become available on the <code>$scope</code> of the controller and vice versa. Thus, we can simply manipulate the <code>messages</code> array on our scope, and the view will updates.</p>

<p>The <code>addMessage()</code> function looks like this:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'ngChatApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ChatCtrl'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">maxMessages</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="p">[];</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">addMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
      <span class="na">from</span><span class="p">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
      <span class="na">msg</span><span class="p">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">message</span>
    <span class="p">});</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">maxMessages</span><span class="p">)</span> 
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>

    <span class="nx">$scope</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Yep, that&rsquo;s it! Angular will take care of loading the data model into the DOM and rendering the view. </p>

<div class="see_it">
  <h4>Live example in Angular</h4>
  <div id="ngChatApp" class="row" ng-controller="ChatCtrl">
    <div class="row">
      <div class="small-12 columns">
        <div class="messages_placeholder">
          <div ng-repeat="message in messages">
            {{ message.from }}: {{ message.msg }}
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="small-12 columns">
        <form ng-submit="addMessage()">
          <div class="row collapse">
            <div class="small-2 columns">
              <input type="text"
                  id="name"
                  ng-model="username"
                  placeholder="Your name" />
            </div>
            <div class="small-8 columns">
              <input type="text"
                  ng-model="message"
                  placeholder="Your message..."/>
            </div>
            <div class="small-2 columns">
              <input type="submit"
                  class="button prefix"
                  value="Send" />
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<p>We hope this article helps to clear up some confusion about how to start working with Angular if you come from a jQuery background.</p>

<p>For more information about Angular, check out the rest of our <a href="/posts">posts</a> or check out our book on Angular, <a href="http://www.ng-book.com">ng-book: The Complete Book on AngularJS</a>.</p>

<p>Cheers!</p>

<script src="/js/vendor/jquery.js"></script>

<script type="text/javascript">
  $(document).ready(function() {
    var maxMessages = 5,
        messageBox = $("#message_placeholder");

    $("#chatApp form").on('submit', function(evt) {
      var from  = $("#name").val() || "Anonymous",
          msg   = $("#message").val()

      var msg = $("<div />").text(from+": "+msg);
      messageBox.append(msg);
      $("#message").val("");

      if (messageBox.children().length > maxMessages)
        messageBox.children("div").first().remove();

      return false;
    });
  });
</script>

<script>
  // angular.module('ngChatApp', ['ng'])

  // angular.bootstrap(
  //   document.querySelector('#ngChatApp'),
  //   ['ng', 'ngChatApp']
  // )
  angular.module('thinkApp', [])
  .controller('LoadingCtrl', function($scope, $timeout) {
    $scope.isLoading = false;
    var loadingTimer;

    $scope.showLoadingData = function() {
      if (loadingTimer)
        $timeout.cancel(loadingTimer);

      $scope.isLoading = true;

      loadingTimer = $timeout(function() {
        $scope.$apply(function() {
          $scope.isLoading = false;
        });
      }, 2000);
    }
  })
  .controller('ChatCtrl', function($scope) {
    var maxMessages = 5;
    $scope.messages = [];
    $scope.addMessage = function() {
      $scope.messages.push({
        from: $scope.username,
        msg: $scope.message
      });

      if ($scope.messages.length > maxMessages) 
        $scope.messages.splice(0,1);

      $scope.message = "";
    }
  })
</script>

<style>
  .messages_placeholder {
    height: 150px;
    border: 1px solid #eee;
    overflow: auto;
    padding: 10px;
  }
  input {
    padding: 5px;
  }
  #article img.logo {
    padding: 0;
    width: 31px !important;
    height: 31px !important;
  }
  .see_it {
    border: 1px solid #eee;
    margin: 20px 0;
    padding: 10px;
  }
</style>
]]></content>
  </entry>
  
  <entry>
    <title type="html">AWS JS SDK - The Canonical Angular Guide</title>
    <link href="http://www.ng-newsletter.com/posts/aws-js-sdk.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/aws-js-sdk.html"/>
    <updated>2013-11-04T00:00:00-08:00</updated>
    <id>urn:uuid:abbb2460-7c1f-50e9-94a7-0e28913649dc</id>
    <summary>One of the biggest benefits to building a single page app (SPA) is the ability to host flat files, rather than needing to build and service a back-end infrastructure.

However, most of the applications that we will build need to be powered by a back...</summary>
    <content type="html"><![CDATA[<p>One of the biggest benefits to building a single page app (SPA) is the ability to host flat files, rather than needing to build and service a back-end infrastructure.</p>

<p>However, most of the applications that we will build need to be powered by a back-end server with custom data. There are a growing number of options to enable us developers to focus on building only our front-end code and leave the back-ends alone.</p>

<p>Amazon released a new option for us late last week to allow us to build server-less web applications from right inside the browser: <a href="http://aws.amazon.com/">Amazon AWS Javascript SDK</a>.</p>

<p>Their browser-based (and server-side with NodeJS) SDK allows us to confidently host our applications and interact with production-grade back-end services. </p>

<p>Now, it&rsquo;s possible to host our application stack entirely on Amazon infrastructure, using S3 to host our application and files, DynamoDB as a NoSQL store, and other web-scale services. We can even securely accept payments from the client side and get all the benefits of the Amazon CDN.</p>

<p>With this release, the Javascript SDK now allows us to interact with a large portion of the dozens of Amazon AWS services. These services include:</p>

<h3>DynamoDB</h3>

<p>The fast, fully managed NoSQL database service that allows you to scale to <em>infinite</em> size with automatic triplicate replication with secure access controls.</p>

<h3>Simple Notification Service (SNS)</h3>

<p>The fast, flexible fully managed push notification service that allows us to push messages to mobile devices as well as other services, such as email or even to amazon&rsquo;s own Simple Queue Service (SQS).</p>

<h3>Simple Queue Service (SQS)</h3>

<p>The fast, reliable, fully managed queue service that allows us to create huge queues in a fully managed way. It allows us to create large request objects so we can fully decouple our application&rsquo;s components from each other using a common queue.</p>

<h3>Simple Storage Service (S3)</h3>

<p>The web-scale and fully managed data store that allows us to store large objects (up to 5 terabytes) with an unlimited number of objects. We can use S3 to securely store encrypted and protected data all over the world. We&rsquo;ll even use S3 to host our own Angular apps.</p>

<h3>Security Token Service (STS)</h3>

<p>The web-service that allows us to request temporary and limited privileged credentials for IAM users. We won&rsquo;t cover this in-depth, but it does provide a nice interface to creating limited secure operations on our data.</p>

<p>The full list of services can be found on the official project <a href="https://github.com/aws/aws-sdk-js">here</a>.</p>

<h2>AWSJS + Angular</h2>

<p>In this section, we intend on demonstrating how to get our applications up and running on the AWSJS stack in minutes. </p>

<p>To do so, we&rsquo;re going to create a mini, bare-bones version of <a href="https://gumroad.com/">Gumroad</a> that we will allow our users to upload screenshots and we&rsquo;ll let them sell their screenshots by integrating with the fantastic <a href="http://stripe.com">Stripe</a> API.</p>

<blockquote>
<p>We cannot recommend enough these two services and this mini-demo is not intended on replacing their services, only to demonstrate the power of Angular and the AWS API.</p>
</blockquote>

<p>To create our product, we&rsquo;ll need to:</p>

<ul>
<li>Allow users to login to our service and store their unique emails</li>
<li>Allow users to upload files that are associated with them</li>
<li>Allow buyers to click on images and present them with an option to buy the uploaded image</li>
<li>Take credit card charges and accept money, directly from a single page angular app</li>
</ul>

<p>We&rsquo;ve included the entire source of the article at <a href="http://d.pr/aL9q">http://d.pr/aL9q</a>.</p>

<h2>Getting started</h2>

<p>We&rsquo;ll start with a standard structured <code>index.html</code>:</p>
<pre class="highlight html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.3/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/1.2.0-rc.3/angular-route.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/directives.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre>
<p>In this standard angular template, we&rsquo;re not loading anything crazy. We&rsquo;re loading the base angular library as well as <code>ngRoute</code> and our custom application code.</p>

<p>Our application code is also standard. Our <code>scripts/app.js</code> simply defines an angular module along with a single route <code>/</code>:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">'ngRoute'</span><span class="p">,</span> 
  <span class="s1">'myApp.services'</span><span class="p">,</span> 
  <span class="s1">'myApp.directives'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$routeProvider</span>
  <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">controller</span><span class="p">:</span> <span class="s1">'MainCtrl'</span><span class="p">,</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'templates/main.html'</span><span class="p">,</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span>
    <span class="na">redirectTo</span><span class="p">:</span> <span class="s1">'/'</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>Our <code>scripts/controllers.js</code> creates controllers from the main module:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>

<span class="p">});</span>
</pre>
<p>And our <code>scripts/services.js</code> and <code>scripts/directives.js</code> are simple as well:</p>
<pre class="highlight javascript"><span class="c1">// scripts/services.js
</span><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.services'</span><span class="p">,</span> <span class="p">[]);</span>
</pre><pre class="highlight javascript"><span class="c1">// scripts/directives.js
</span><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.directives'</span><span class="p">,</span> <span class="p">[])</span>
</pre>
<p><img alt="Angular Structure" src="/images/aws/dir_tree.png" /></p>

<h2>Introduction</h2>

<p>The aws ecosystem is huge and is used all over the world, in production. The gross amount of useful services that Amazon runs makes it a fantastic platform to power our applications on top of.</p>

<p>Historically, the APIs have not always been the easiest to use and understand, so we hope to address some of that confusion here.</p>

<p>Traditionally, we&rsquo;d use a signed request with our applications utilizing the client<em>id/secret access key model. Since we&rsquo;re operating in the browser, it&rsquo;s not a good idea to embed our client</em>id and our client_secret in the browser where anyone can see it. (It&rsquo;s not much of a secret anyway if it&rsquo;s embedded in clear text, right?).</p>

<p>Luckily, the AWS team has provided us with an alternative method of identifying and authenticating our site to give access to the aws resources.</p>

<p>The first steps to creating an AWS-based angular app will be to set up this relatively complex authentication and authorization we&rsquo;ll use throughout the process.</p>

<p>Currently (at the time of this writing), the AWS JS library integrates cleanly with three authentication providers:</p>

<ul>
<li>Facebook</li>
<li>Google Plus</li>
<li>Amazon Login</li>
</ul>

<p>In this section, we&rsquo;ll be focusing on integrating with the <code>Google+</code> API to host our login, but the process is very similar for the other two authentication providers.</p>

<h2>Installation</h2>

<p>First things first, we&rsquo;ll need to <em>install</em> the files in our <code>index.html</code>. Inside of our <code>index.html</code>, we&rsquo;ll need to include the aws-sdk library as well as the Google API library. </p>

<p>We&rsquo;ll modify our <code>index.html</code> to include these libraries:</p>
<pre class="highlight html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.3/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/1.2.0-rc.3/angular-route.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://sdk.amazonaws.com/js/aws-sdk-2.0.0-rc1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;styles/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;scripts/directives.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://js.stripe.com/v2/&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
      <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
       <span class="kd">var</span> <span class="nx">po</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span> <span class="nx">po</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">'text/javascript'</span><span class="p">;</span> <span class="nx">po</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
       <span class="nx">po</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'https://apis.google.com/js/client:plusone.js?onload=onLoadCallback'</span><span class="p">;</span>
       <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="nx">s</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">po</span><span class="p">,</span> <span class="nx">s</span><span class="p">);</span>
     <span class="p">})();</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre>
<p>Now, notice that we added an <code>onload</code> callback for the Google Javascript library and we <strong>did not</strong> use the <code>ng-app</code> to bootstrap our application. If we let angular automatically bootstrap our application, we&rsquo;ll run into a race condition where the Google API may not be loaded when the application starts. </p>

<p>This non-deterministic nature of our application will make the experience unusable, so instead we will manually bootstrap our app in the <code>onLoadCallback</code> function.</p>

<p>To manually bootstrap the application, we&rsquo;ll add the <code>onLoadCallback</code> function to the window service. Before we can call to bootstrap angular, we&rsquo;ll need to ensure that the google login client is loaded.</p>

<p>The google API client, or <code>gapi</code> gets included at run-time and is set by default to lazy-load its services. By telling the <code>gapi.client</code> to load the oauth2 library in advance of starting our app, we will avoid any potential mishaps of the oauth2 library being unavailable.</p>
<pre class="highlight javascript"><span class="c1">// in scripts/app.js
</span><span class="nb">window</span><span class="p">.</span><span class="nx">onLoadCallback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// When the document is ready
</span>  <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Bootstrap the oauth2 library
</span>    <span class="nx">gapi</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">'oauth2'</span><span class="p">,</span> <span class="s1">'v2'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Finally, bootstrap our angular app
</span>      <span class="nx">angular</span><span class="p">.</span><span class="nx">bootstrap</span><span class="p">(</span><span class="nb">document</span><span class="p">,</span> <span class="p">[</span><span class="s1">'myApp'</span><span class="p">]);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre>
<p>With the libraries available and our application ready to be bootstrapped, we can set up the authorization part of our app.</p>

<h2>Running</h2>

<p>As we are using services that depend upon our URL to be an expected URL, we&rsquo;ll need to run this as a server, rather than simply loading the html in our browser.</p>

<p>We recommend using the incredibly simple python SimpleHTTPServer</p>
<pre class="highlight shell"><span class="gp">$ </span>python -m SimpleHTTPServer 9000
</pre>
<p>Now we can load the url <code>http://localhost:9000/</code> in our browser.</p>

<h2>User authorization/authentication</h2>

<p>First, we&rsquo;ll need to get a <code>client_id</code> and a <code>client_secret</code> from Google so that we&rsquo;ll be able to actually interact with the google plus login system.</p>

<p>To get an app, head over to the <a href="https://developers.google.com/console">Google APIs console</a> and create a project.</p>

<p><img alt="Create a google plus project" src="/images/aws/google_create_project.png" /></p>

<p>Open the project by clicking on the name and click on the <em>APIs &amp; auth</em> nav button. From here, we&rsquo;ll need to enable the <code>Google+ API</code>. Find the <em>APIs</em> button and click on it. Find the <code>Google+ API</code> item and click the OFF to ON slider.</p>

<p><img alt="Enable Google+ API" src="/images/aws/google_enable_plus.png" /></p>

<p>Once that&rsquo;s set, we&rsquo;ll need to create and register an application and use it&rsquo;s application ID to make authenticated calls. </p>

<p>Find the <code>Registered apps</code> option and click on it to create an app. Make sure to select the Web Application option when it asks about the type of application.</p>

<p><img alt="Create a registered application" src="/images/aws/google_create_app.png" /></p>

<p>Once this is set, you&rsquo;ll be brought to the application details page. Select the <code>OAuth 2.0 Client ID</code> dropdown and take note of the application&rsquo;s Client ID. We&rsquo;ll use this in a few minutes.</p>

<p>Lastly, add the localhost origin to the WEB ORIGIN of the application. This will ensure we can develop with the API locally:</p>

<p><img alt="Registered app details" src="/images/aws/google_app_details.png" /></p>

<p>Next, we&rsquo;ll create a google+ login directive. This Angular directive will enable us to add a customized login button to our app with a single file element. </p>

<blockquote>
<p>For more information about directives, check out our <a href="http://www.ng-newsletter.com/posts/directives.html">in-depth post on directives</a>.</p>
</blockquote>

<p>We&rsquo;re going to have two pieces of functionality with our google login, we&rsquo;ll create an element that we&rsquo;ll attach a the standard google login button and we&rsquo;ll want to run a custom function after the button has been rendered.</p>

<p>The final directive will look like the following in <code>scripts/directives.js</code>:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.directives'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'googleSignin'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;span id=&quot;signinButton&quot;&gt;&lt;/span&gt;'</span><span class="p">,</span>
    <span class="na">replace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">afterSignin</span><span class="p">:</span> <span class="s1">'&amp;'</span>
    <span class="p">},</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Set standard google class
</span>      <span class="nx">attrs</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'g-signin'</span><span class="p">);</span>
      <span class="c1">// Set the clientid
</span>      <span class="nx">attrs</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">'data-clientid'</span><span class="p">,</span> 
          <span class="nx">attrs</span><span class="p">.</span><span class="nx">clientId</span><span class="o">+</span><span class="s1">'.apps.googleusercontent.com'</span><span class="p">);</span>
      <span class="c1">// build scope urls
</span>      <span class="kd">var</span> <span class="nx">scopes</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">scopes</span> <span class="o">||</span> <span class="p">[</span>
        <span class="s1">'auth/plus.login'</span><span class="p">,</span> 
        <span class="s1">'auth/userinfo.email'</span>
      <span class="p">];</span>
      <span class="kd">var</span> <span class="nx">scopeUrls</span> <span class="o">=</span> <span class="p">[];</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">scopes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">scopeUrls</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">'https://www.googleapis.com/'</span> <span class="o">+</span> <span class="nx">scopes</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
      <span class="p">};</span>

      <span class="c1">// Create a custom callback method
</span>      <span class="kd">var</span> <span class="nx">callbackId</span> <span class="o">=</span> <span class="s2">&quot;_googleSigninCallback&quot;</span><span class="p">,</span>
          <span class="nx">directiveScope</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">;</span>
      <span class="nb">window</span><span class="p">[</span><span class="nx">callbackId</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">oauth</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="nx">directiveScope</span><span class="p">.</span><span class="nx">afterSignin</span><span class="p">({</span><span class="na">oauth</span><span class="p">:</span> <span class="nx">oauth</span><span class="p">});</span>
        <span class="nb">window</span><span class="p">[</span><span class="nx">callbackId</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="p">};</span>

      <span class="c1">// Set standard google signin button settings
</span>      <span class="nx">attrs</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">'data-callback'</span><span class="p">,</span> <span class="nx">callbackId</span><span class="p">);</span>
      <span class="nx">attrs</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">'data-cookiepolicy'</span><span class="p">,</span> <span class="s1">'single_host_origin'</span><span class="p">);</span>
      <span class="nx">attrs</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">'data-requestvisibleactions'</span><span class="p">,</span> <span class="s1">'http://schemas.google.com/AddActivity'</span><span class="p">)</span>
      <span class="nx">attrs</span><span class="p">.</span><span class="nx">$set</span><span class="p">(</span><span class="s1">'data-scope'</span><span class="p">,</span> <span class="nx">scopeUrls</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">' '</span><span class="p">));</span>

      <span class="c1">// Finally, reload the client library to 
</span>      <span class="c1">// force the button to be painted in the browser
</span>      <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
       <span class="kd">var</span> <span class="nx">po</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span> <span class="nx">po</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">'text/javascript'</span><span class="p">;</span> <span class="nx">po</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
       <span class="nx">po</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'https://apis.google.com/js/client:plusone.js'</span><span class="p">;</span>
       <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'script'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span> <span class="nx">s</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">po</span><span class="p">,</span> <span class="nx">s</span><span class="p">);</span>
      <span class="p">})();</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Although it&rsquo;s long, it&rsquo;s fairly straightforward. We&rsquo;re assigning the google button class <code>g-signin</code>, attaching the clientid based on an attribute we pass in, building the scopes, etc.</p>

<p>One unique part of this directive is that we&rsquo;re creating a custom callback on the window object. Effectively, this will allow us to <em>fake</em> the callback method needing to be called in Javascript when we make the function to allow us to actually make the call to the local <code>afterSignin</code> action instead. </p>

<p>We&rsquo;ll then clean up the global object because we&rsquo;re allergic to global state in AngularJS.</p>

<p>With our directive primed and ready to go, we can include the directive in our view. We&rsquo;re going to call the directive in our view like so, replacing the <code>client-id</code> and the <code>after-signin</code> attributes on the directive to our own. </p>

<blockquote>
<p>Make sure to include the <code>oauth</code> parameter exactly as it&rsquo;s spelled in the <code>after-signup</code> attribute. This is called this way due to how angular directives call methods with parameters inside of directives.</p>
</blockquote>
<pre class="highlight html"><span class="nt">&lt;h2&gt;</span>Signin to ngroad<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;div</span> <span class="na">google-signin</span> 
  <span class="na">client-id=</span><span class="s">'CLIENT_ID'</span> 
  <span class="na">after-signin=</span><span class="s">&quot;signedIn(oauth)&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;pre&gt;</span>{{ user | json }}<span class="nt">&lt;/pre&gt;</span>
</pre>
<h4>See it</h4>

<div ng-controller="DemoCtrl">
  <div>
    <h2>Signin to ngroad</h2>
    <div google-signin 
      client-id='395118764244-q12ta6un8j1ns15o5blj203sho962prs' 
      after-signin="signedIn(oauth)"></div>
  </div>
  <pre class="height150">{{ user | json }}</pre>
</div>

<blockquote>
<p>The user data in the example is the returned access_token for your login (if you log in). It is <strong>not</strong> saved on our servers, not sensitive data, and will disappear when you leave the page.</p>
</blockquote>

<p>Finally, we&rsquo;ll need our button to <em>actually</em> cause an action, so we&rsquo;ll need to define our <code>after-signin</code> method <code>signedIn(oauth)</code> in our controller.</p>

<p>This <code>signedIn()</code> method will kill off the authenticated page for us in our real application. Note, this method would be an ideal place to set a redirect to a new route, for instance the <code>/dashboard</code> route for authenticated users.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signedIn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">oauth</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">oauth</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre>
<h2>UserService</h2>

<p>Before we dive a bit deeper into the AWS-side of things, let&rsquo;s create ourselves a <code>UserService</code> that is responsible for holding on to our new user. This <code>UserService</code> will handle the bulk of the work for interacting with the AWS backend as well as keep a copy of the current user.</p>

<p>Although we&rsquo;re not quite ready to attach a backend, we can start building it out to handle holding on to a persistent copy of the user instance.</p>

<p>In our <code>scripts/services.js</code>, we&rsquo;ll create the beginnings of our <code>UserService</code>:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.services'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'UserService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">_user</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">setCurrentUser</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">u</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">u</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">service</span><span class="p">.</span><span class="nx">_user</span> <span class="o">=</span> <span class="nx">u</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">service</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">();</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">currentUser</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
      <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">_user</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">service</span><span class="p">;</span>
<span class="p">});</span>
</pre>
<p>Although this setup is a bit contrived for the time being, we&rsquo;ll want the functionality to set the currentUser as a permanent fixture in the service. </p>

<blockquote>
<p>Remember, services are singleton objects that live for the duration of the application lifecycle.</p>
</blockquote>

<p>Now, instead of simply setting our user in the return of the <code>signedIn()</code> function, we can set the user to the <code>UserService</code>:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signedIn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">oauth</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">UserService</span><span class="p">.</span><span class="nx">setCurrentUser</span><span class="p">(</span><span class="nx">oauth</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>For our application to work, we&rsquo;re going to need to hold on to actual user emails so we can provide a better method of interacting with our users as well as holding on to some persistent, unique data per-user.</p>

<p>We&rsquo;ll use the <code>gapi.client.oauth2.userinfo.get()</code> method to fetch the user&rsquo;s email address rather than holding on to the user&rsquo;s <code>access_token</code> (and other various access details).</p>

<p>In our <code>UserService</code>, we&rsquo;ll update our <code>currentUser()</code> method to include this functionality:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="err">}</span><span class="p">,</span>
<span class="nx">currentUser</span><span class="err">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">_user</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">_user</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">gapi</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">userinfo</span><span class="p">.</span><span class="nx">get</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">service</span><span class="p">.</span><span class="nx">_user</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
    <span class="p">})</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...
</span></pre>
<h2>All aboard AWS</h2>

<p>Now, as we said when we first started this journey, we&rsquo;ll need to set up authorization with the AWS services.</p>

<p>If you do not have an AWS account, head over to <a href="http://aws.amazon.com/">aws.amazon.com</a> and grab an account. It&rsquo;s free and quick.</p>

<p>Now, first things first: we&rsquo;ll need to create an IAM role. IAM, or AWS&rsquo;s Identity and Access Management service is one of the reasons why the AWS services are so powerful. We can create fine-grain access controls over our systems and data using IAM.</p>

<p>Unfortunately, this flexibility and power of IAM also makes it a bit more complex, so we&rsquo;ll walk through creating it here and making it as clear as we can.</p>

<p>Let&rsquo;s create the IAM role. Head to the <a href="https://console.aws.amazon.com/iam/home?region=us-east-1#roles">IAM console</a> and click on the Roles navigation link.</p>

<p>Click the <em>Create New Role</em> button and give our new role a name. We&rsquo;ll call ours the <code>google-web-role</code>.</p>

<p><img alt="Create a new role" src="/images/aws/iam_create_role.png" /></p>

<p>Next, we&rsquo;ll need to configure the IAM role to be a <em>Web Identity Provider Access</em> role type. This is how we&rsquo;ll be able to manage our new role&rsquo;s access to our AWS services.</p>

<p><img alt="Set the role type" src="/images/aws/iam_web_provider.png" /></p>

<p>Now, remember the CLIENT ID that we created from google above? In the next screen, select Google from the dropdown and paste the CLIENT ID into the Audience box.</p>

<p>This will join our IAM role and our Google app together so that our application can call out to AWS services with an authenticated Google user.</p>

<p><img alt="Google auth" src="/images/aws/iam_google.png" /></p>

<p>Click through the <em>Verify Trust</em> (the next screen). This screen shows the raw configuration for AWS services. Next, we&rsquo;ll create the policy for our applications.</p>

<p>The Policy Generator is the easiest method of getting up and running quickly to build policies. This is where we&rsquo;ll set what actions our users can and cannot take.</p>

<p>In this step, we&rsquo;re going to be taking very specific actions that our web users can take. We&rsquo;re going to allow our users to the following actions for each service:</p>

<h4>S3</h4>

<p>On the specific bucket (<code>ng-newsletter-example</code>, in our example app), we&rsquo;re going to allow our users to take the following actions:</p>

<ul>
<li>GetObject</li>
<li>ListBucket</li>
<li>PutObject</li>
</ul>

<p>The Amazon Resource Name (ARN) for our s3 bucket is:</p>
<pre class="highlight javascript"><span class="nx">arn</span><span class="err">:</span><span class="nx">aws</span><span class="err">:</span><span class="nx">s3</span><span class="err">:::</span><span class="nx">ng</span><span class="o">-</span><span class="nx">newsletter</span><span class="o">-</span><span class="nx">example</span><span class="o">/*</span>
</pre>
<h4>DynamoDB</h4>

<p>For two specific table resources, we&rsquo;re going to allow the following actions:</p>

<ul>
<li>GetItem</li>
<li>PutItem</li>
<li>Query</li>
</ul>

<p>The Amazon Resource Name (ARN) for our dynamoDB tables are the following:</p>
<pre class="highlight javascript"><span class="p">[</span>
  <span class="s2">&quot;arn:aws:dynamodb:us-east-1:&lt;ACCOUNT_ID&gt;:table/Users&quot;</span><span class="p">,</span>
  <span class="s2">&quot;arn:aws:dynamodb:us-east-1:&lt;ACCOUNT_ID&gt;:table/UsersItems&quot;</span>
<span class="p">]</span>
</pre>
<blockquote>
<p>Your <ACCOUNT_ID> can be found on your Account dashboard. Click on the <code>My Account</code> button at the top of the page and navigate to the page. Your ACCOUNT_ID is the number called &lsquo;Account Number:&rsquo;.</p>
</blockquote>

<p>The final version of our policy can be found <a href="http://d.pr/9Obg">here</a>.</p>

<p><img alt="Adding the IAM policy" src="/images/aws/iam_permissions.png" /></p>

<blockquote>
<p>For more information on the confusing ARN numbers, check out the amazon documentation on them <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">here</a>.</p>
</blockquote>

<p>One final piece of information that we&rsquo;ll need to hold on to is the <code>Role ARN</code>. We can find this <code>Role ARN</code> on the summary tab of the IAM user in our IAM console.</p>

<p>Take note of this string as we&rsquo;ll set it in a moment.</p>

<p><img alt="Role ARN" src="/images/aws/iam_summary.png" /></p>

<p>Now that we&rsquo;re finally done with creating our IAM user, we can move on to integrating it inside of our angular app.</p>

<h2>AWSService</h2>

<p>We&rsquo;ll move the root of our application for integrating with AWS into it&rsquo;s own service we&rsquo;re going to build called the <code>AWSService</code>. </p>

<p>Since we are going to need to have the ability to custom configure our service at configure-time, we&rsquo;ll want to create it as a <code>provider</code>.</p>

<blockquote>
<p>Remember, the <em>only</em> service-type that can be <em>injected</em> into the <code>.config()</code> function is the <code>.provider()</code> type.</p>
</blockquote>

<p>First, we&rsquo;ll create the stub of our provider in <code>scripts/services.js</code>:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">'AWSService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">self</span><span class="p">.</span><span class="nx">arn</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

  <span class="nx">self</span><span class="p">.</span><span class="nx">setArn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">arn</span><span class="p">)</span> <span class="nx">self</span><span class="p">.</span><span class="nx">arn</span> <span class="o">=</span> <span class="nx">arn</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">self</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>As we can already start to notice, we&rsquo;ll need to set the <code>Role ARN</code> for this service so that we can attach the proper user to the correct services.</p>

<p>Setting up our <code>AWSService</code> as a provider like we do above enables us to set the following in our <code>scripts/app.js</code> file:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> 
  <span class="p">[</span><span class="s1">'ngRoute'</span><span class="p">,</span> <span class="s1">'myApp.services'</span><span class="p">,</span> <span class="s1">'myApp.directives'</span><span class="p">]</span>
<span class="p">)</span>
<span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">AWSServiceProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">AWSServiceProvider</span>
    <span class="p">.</span><span class="nx">setArn</span><span class="p">(</span>
      <span class="s1">'arn:aws:iam::&lt;ACCOUNT_ID&gt;:role/google-web-role'</span><span class="p">);</span>
<span class="p">})</span>
</pre>
<p>Now, we can carry on with the <code>AWSService</code> and not worry about overriding our <code>Role ARN</code> as well as it becomes incredibly easy to share amongst our different applications instead of recreating it every time.</p>

<p>Our <code>AWSService</code> at this point doesn&rsquo;t really do anything yet. The last component that we&rsquo;ll need to ensure works is that we give access to our actual users who log in. </p>

<p>This final step is where we&rsquo;ll need to tell the AWS library that we have an authenticated user that can operate as our IAM role.</p>

<p>We&rsquo;ll create this <code>credentials</code> as a promise that will eventually be resolved so we can define the different portions of our application without needing to bother checking if the credentials have been loaded simply by using the <code>.then()</code> method on promises.</p>

<p>Let&rsquo;s modify our <code>$get()</code> method in our service adding a method that we&rsquo;ll call <code>setToken()</code> to create a new set of <code>WebIdentityCredentials</code>:</p>
<pre class="highlight javascript">  <span class="c1">// ...
</span>  <span class="nx">self</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">credentialsDefer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">(),</span>
        <span class="nx">credentialsPromise</span> <span class="o">=</span> <span class="nx">credentialsDefer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">credentials</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">credentialsPromise</span><span class="p">;</span>
      <span class="p">},</span>
      <span class="na">setToken</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">providerId</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
          <span class="na">RoleArn</span><span class="p">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">arn</span><span class="p">,</span>
          <span class="na">WebIdentityToken</span><span class="p">:</span> <span class="nx">token</span><span class="p">,</span>
          <span class="na">RoleSessionName</span><span class="p">:</span> <span class="s1">'web-id'</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">providerId</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">config</span><span class="p">[</span><span class="s1">'ProviderId'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">providerId</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">self</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="nx">config</span><span class="p">;</span>
        <span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">credentials</span> <span class="o">=</span> 
          <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">WebIdentityCredentials</span><span class="p">(</span><span class="nx">config</span><span class="p">);</span>
        <span class="nx">credentialsDefer</span>
          <span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">credentials</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// ...
</span></pre>
<p>Now, when we get our <code>oauth.access_token</code> back from our login through Google, we&rsquo;ll pass in the <code>id_token</code> to this function which will take care of the AWS config setup.</p>

<p>Let&rsquo;s modify the <code>UserService</code> service such that we call the <code>setToken()</code> method:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'UserService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">_user</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">setCurrentUser</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">u</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">u</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">AWSService</span><span class="p">.</span><span class="nx">setToken</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">id_token</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">service</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">();</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">error</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="c1">// ...
</span></pre>
<h2>Starting on dynamo</h2>

<p>In our application, we&rsquo;ll want to associate any images that one user uploads to that unique user. To create this association, we&rsquo;ll create a dynamo table that stores our users as well as another that stores the association between the user and the user&rsquo;s uploaded files.</p>

<p>To start interacting with dynamo, we&rsquo;ll first need to instantiate a dynamo object. We&rsquo;ll do this inside of our <code>AWSService</code> service object, like so:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">setToken</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">providerId</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="p">},</span>
<span class="nx">dynamo</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">credentialsPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">DynamoDB</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">table</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">},</span>
<span class="c1">// ...
</span></pre>
<p>As we discussed earlier, by using promises inside of our service objects, we only need to use the promise <code>.then()</code> api method to ensure our credentials are set when we&rsquo;re starting to use them.</p>

<p>You might ask why we&rsquo;re setting <code>params</code> with our <code>dynamo</code> function. Sometimes we&rsquo;ll want to interact with our dynamoDB with different configurations and different setups. This might cause us to need to recreate objects that we already use once in our page. </p>

<p>Rather than having this duplication around with our different <code>AWS</code> objects, we&rsquo;ll <em>cache</em> these objects using the built-in angular <code>$cacheFactory</code> service.</p>

<h2>$cacheFactory</h2>

<p>The <code>$cacheFactory</code> service enables us to create an object if we need it or recycle and reuse an object if we&rsquo;ve already needed it in the past. </p>

<p>To start caching, we&rsquo;ll create a <code>dynamoCache</code> object where we&rsquo;ll store our cached dynamo objects:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">self</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$cacheFactory</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">dynamoCache</span> <span class="o">=</span> <span class="nx">$cacheFactory</span><span class="p">(</span><span class="s1">'dynamo'</span><span class="p">),</span>
      <span class="nx">credentialsDefer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">(),</span>
      <span class="nx">credentialsPromise</span> <span class="o">=</span> <span class="nx">credentialsDefer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>

  <span class="k">return</span> <span class="p">{</span>
  <span class="c1">// ...
</span></pre>
<p>Now, back in our <code>dynamo</code> method, we can draw from the cache if the object exists in the cache or we can set it to create the object when necessary:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">dynamo</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">credentialsPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> 
      <span class="nx">dynamoCache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">DynamoDB</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
      <span class="nx">dynamoCache</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">),</span> <span class="nx">table</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">table</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">},</span>
<span class="c1">// ...
</span></pre>
<h2>Saving our currentUser</h2>

<p>When a user logs in and we fetch the user&rsquo;s email, this is a good point for us to add the user to our user&rsquo;s database.</p>

<p>To create a <code>dynamo</code> object, we&rsquo;ll use the promise api method <code>.then()</code> again, this time outside of the service. We&rsquo;ll create an object that will enable us to interact with the User&rsquo;s table we&rsquo;ll create in the dynamo API console.</p>

<blockquote>
<p>We&rsquo;ll need to manually create these dynamo tables the first time because we do not want to give access to our web users the ability to create dynamo tables, which might include us. </p>
</blockquote>

<p>To create a dynamo table, head to the <a href="https://console.aws.amazon.com/dynamodb/home">dynamo console</a> and find the Create Table button.</p>

<p>Create a table called <code>Users</code> with a primary key type of <code>Hash</code>. The Hash Attribute Name will be the primary key that we&rsquo;ll use to get and put objects on the table. For this demo, we&rsquo;ll use the string: <code>User email</code>.</p>

<p><img alt="Create the Users dynamo table" src="/images/aws/dynamo_create_users.png" /></p>

<p>Click through the next two screens and set up a basic alarm by entering your email. Although this step isn&rsquo;t 100% necessary, it&rsquo;s easy to forget that our tables are up and without being reminded, we might just end up leaving them up forever.</p>

<p>Once we&rsquo;ve clicked through the final review screen and click create, we&rsquo;ll end up with a brand new Dynamo table where we will store our users.</p>

<p>While we are at the console, we&rsquo;ll create the <em>join</em> table. This is the table that will join the User and the items they upload.</p>

<p>Find the Create Table button again and create a table called <code>UsersItems</code> with a primary key type of <code>Hash and Range</code>. For this table, The Hash Attribute Name will also be <code>User email</code> and the Range Attribute Name will be <code>ItemId</code>.</p>

<p>This will allow us to query for User&rsquo;s who have created items based on the User&rsquo;s email.</p>

<p>The rest of the options that are available on the next screens are optional and we can click through the rest.</p>

<p>At this point, we have two <code>dynamo</code> tables available. </p>

<p>Back to our <code>UserService</code>, we&rsquo;ll first query the table to see if the user is already saved in our database, otherwise we&rsquo;ll create an entry in our dynamo database.</p>
<pre class="highlight javascript">  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">_user</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">UsersTable</span><span class="p">:</span> <span class="s2">&quot;Users&quot;</span><span class="p">,</span>
    <span class="na">UserItemsTable</span><span class="p">:</span> <span class="s2">&quot;UsersItems&quot;</span><span class="p">,</span>
    <span class="c1">// ...
</span>    <span class="na">currentUser</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">_user</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">_user</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// After we've loaded the credentials
</span>        <span class="nx">AWSService</span><span class="p">.</span><span class="nx">credentials</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="nx">gapi</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">userinfo</span><span class="p">.</span><span class="nx">get</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">email</span><span class="p">;</span>
            <span class="c1">// Get the dynamo instance for the
</span>            <span class="c1">// UsersTable
</span>            <span class="nx">AWSService</span><span class="p">.</span><span class="nx">dynamo</span><span class="p">({</span>
              <span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">TableName</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">UsersTable</span><span class="p">}</span>
            <span class="p">})</span>
            <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
              <span class="c1">// find the user by email
</span>              <span class="nx">table</span><span class="p">.</span><span class="nx">getItem</span><span class="p">({</span>
                <span class="na">Key</span><span class="p">:</span> <span class="p">{</span><span class="s1">'User email'</span><span class="err">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">email</span><span class="p">}}</span>
              <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                  <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// User didn't previously exist
</span>                    <span class="c1">// so create an entry
</span>                    <span class="kd">var</span> <span class="nx">itemParams</span> <span class="o">=</span> <span class="p">{</span>
                      <span class="na">Item</span><span class="p">:</span> <span class="p">{</span>
                        <span class="s1">'User email'</span><span class="err">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">email</span><span class="p">},</span> 
                        <span class="nl">data</span><span class="p">:</span> <span class="p">{</span> <span class="na">S</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">}</span>
                      <span class="p">}</span>
                    <span class="p">};</span>
                    <span class="nx">table</span><span class="p">.</span><span class="nx">putItem</span><span class="p">(</span><span class="nx">itemParams</span><span class="p">,</span> 
                      <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">service</span><span class="p">.</span><span class="nx">_user</span> <span class="o">=</span> <span class="nx">e</span><span class="p">;</span>
                        <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
                    <span class="p">});</span>
                  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="c1">// The user already exists
</span>                    <span class="nx">service</span><span class="p">.</span><span class="nx">_user</span> <span class="o">=</span> 
                      <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">Item</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">S</span><span class="p">);</span>
                    <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">_user</span><span class="p">);</span>
                  <span class="p">}</span>
              <span class="p">});</span>
            <span class="p">});</span>
          <span class="p">});</span>
        <span class="p">});</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="c1">// ...
</span></pre>
<p>Although it looks like a lot of code, this simply does a <code>find or create by username</code> on our dynamoDB.</p>

<p>At this point, we can finally get back to our view and check out what&rsquo;s happening in the view. </p>

<p>In our <code>templates/main.html</code>, we&rsquo;ll add a container that simply shows the Login form if there is no user and shows the user details if there is a user.</p>

<p>We&rsquo;ll do this with simple <code>ng-show</code> directives and our new google-signin directive.</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Home<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;!user&quot;</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-md-12&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h2&gt;</span>Signup or login to ngroad<span class="nt">&lt;/h2&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">google-signin</span> 
        <span class="na">client-id=</span><span class="s">'395118764200'</span> 
        <span class="na">after-signin=</span><span class="s">&quot;signedIn(oauth)&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;user&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;pre&gt;</span>{{ user | json }}<span class="nt">&lt;/pre&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>With our view set up, we can now work with logged in users inside the second <code>&lt;div&gt;</code> (in production, it&rsquo;s a good idea to make it a separate route).</p>

<h2>Uploading to s3</h2>

<p>Now that we have our logged in user stored in dynamo, it&rsquo;s time we create the ability to handle file upload where we&rsquo;ll store our files directly on S3.</p>

<p>First and foremost, a shallow dive into CORS. CORS, or Cross-Origin Resource Sharing is a security features that modern browsers support allowing us to make requests to foreign domains using a standard protocol.</p>

<p>Luckily, the AWS team has made supporting CORS incredibly simple. If we&rsquo;re hosting our site on s3, then we don&rsquo;t even need to set up CORS (other than for development purposes).</p>

<p>To enable CORS on a bucket, head to the <a href="https://console.aws.amazon.com/s3/home">s3 console</a> and find the bucket that we&rsquo;re going to use for file uploads. For this demo, we&rsquo;re using the <code>ng-newsletter-example</code> bucket.</p>

<p>Once the bucket has been located, click on it and load the Properties tab and pull open the Permissions option. click on the <em>Add CORS configuration</em> button and pick the standard CORS configuration.</p>

<p><img alt="Enable CORS on an S3 bucket" src="/images/aws/s3_cors.png" /></p>

<p>We&rsquo;ll create a simple file upload directive that kicks off a method that uses the HTML5 File API to handle the file upload. This way, when the user selects the file the file upload will immediately start.</p>

<p>To handle the file selection directive, we&rsquo;ll create a simple directive that binds to the change event and calls a method after the file has been selected.</p>

<p>The directive is simple:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'fileUpload'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span> <span class="na">fileUpload</span><span class="p">:</span> <span class="s1">'&amp;'</span> <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;input type=&quot;file&quot; id=&quot;file&quot; /&gt; '</span><span class="p">,</span>
    <span class="na">replace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ele</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">'change'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">ele</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">files</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">fileUpload</span><span class="p">({</span><span class="na">files</span><span class="p">:</span> <span class="nx">file</span><span class="p">});</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre>
<p>This directive can be used in our view like so:</p>
<pre class="highlight html"><span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span>
  <span class="err">&lt;</span><span class="na">div</span> <span class="na">class=</span><span class="s">&quot;col-md-12&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">file-upload=</span><span class="s">&quot;onFile(files)&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Now, when the file selection has been made, it will call the method <code>onFile(files)</code> in our current scope.</p>

<blockquote>
<p>Although we&rsquo;re creating our own file directive here, we recommend checking out the <a href="https://github.com/twilson63/ngUpload">ngUpload</a> library for handling file uploads.</p>
</blockquote>

<p>Inside the <code>onFile(files)</code> method, we&rsquo;ll want to handle the file upload to s3 and save the record to our dynamo database table. Instead of placing this functionality in the controller, we&rsquo;ll be nice angular citizens and place this in our <code>UserService</code> service.</p>

<p>First, we&rsquo;ll need to make sure we have the ability to get an s3 Javascript object just like we made the <code>dynamo</code> available. </p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="kd">var</span> <span class="nx">dynamoCache</span> <span class="o">=</span> <span class="nx">$cacheFactory</span><span class="p">(</span><span class="s1">'dynamo'</span><span class="p">),</span>
    <span class="nx">s3Cache</span> <span class="o">=</span> <span class="nx">$cacheFactory</span><span class="p">(</span><span class="s1">'s3Cache'</span><span class="p">);</span>
<span class="c1">// ...
</span><span class="k">return</span> <span class="p">{</span>
  <span class="c1">// ...
</span>  <span class="nl">s3</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
    <span class="nx">credentialsPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">s3Obj</span> <span class="o">=</span> <span class="nx">s3Cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">));</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">s3Obj</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">s3Obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">S3</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
        <span class="nx">s3Cache</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">),</span> <span class="nx">s3Obj</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">s3Obj</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
  <span class="p">},</span>
<span class="c1">// ...
</span></pre>
<p>This method works the exact same way that our dynamo object creation works, giving us direct access to the s3 instance object as we&rsquo;ll see shortly.</p>

<h2>Handling file uploads</h2>

<p>To handle file uploads, we&rsquo;ll create a method that we&rsquo;ll call <code>uploadItemForSale()</code> in our <code>UserService</code>. Planning our functionality, we&rsquo;ll want to:</p>

<ul>
<li>Upload the file to S3</li>
<li>Get a signedUrl for the file</li>
<li>Save this information to our database</li>
</ul>

<p>We&rsquo;re going to be using our current user through this process, so we&rsquo;ll start out by making sure we have our user and get an instance</p>
<pre class="highlight javascript"><span class="c1">// in scripts/services.js
// ...
</span><span class="err">}</span><span class="p">,</span>
<span class="nx">Bucket</span><span class="err">:</span> <span class="s1">'ng-newsletter-example'</span><span class="p">,</span>
<span class="nx">uploadItemForSale</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">service</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Handle the upload
</span>    <span class="nx">AWSService</span><span class="p">.</span><span class="nx">s3</span><span class="p">({</span>
      <span class="na">params</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">Bucket</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">Bucket</span>
      <span class="p">}</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">s3</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// We have a handle of our s3 bucket
</span>      <span class="c1">// in the s3 object
</span>    <span class="p">});</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">},</span>
<span class="c1">// ...
</span></pre>
<p>With the handle of the s3 bucket, we can create a file to upload. There are 3 required parameters when uploading to s3:</p>

<ul>
<li>Key - The key of the file object</li>
<li>Body - The file blob itself</li>
<li>ContentType - The type of file</li>
</ul>

<p>Luckily for us, all this information is available on the file object when we get it from the browser.</p>
<pre class="highlight javascript"><span class="c1">// ...
// Handle the upload
</span><span class="nx">AWSService</span><span class="p">.</span><span class="nx">s3</span><span class="p">({</span>
  <span class="na">params</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">Bucket</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">Bucket</span>
  <span class="p">}</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">s3</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// We have a handle of our s3 bucket
</span>  <span class="c1">// in the s3 object
</span>  <span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// Get the first file
</span>  <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">Key</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
    <span class="na">Body</span><span class="p">:</span> <span class="nx">file</span><span class="p">,</span>
    <span class="na">ContentType</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">type</span>
  <span class="p">}</span>

  <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// The file has been uploaded
</span>    <span class="c1">// or an error has occurred during the upload
</span>  <span class="p">});</span>
<span class="p">});</span>
<span class="c1">// ...
</span></pre>
<p>By default, s3 uploads files in a protected form. It prevents us from uploading and having the files available to the public without some work. This is a definite <em>feature</em> as anything that we upload to s3 will be protected and it forces us to make conscious choices about what files will be public and which are not.</p>

<p>With that in mind, we&rsquo;ll create a temporary url that expires after a given amount of time. In our ngroad marketplace, this will give a time-expiry on each of the items that are available for sale.</p>

<p>In any case, to create a temporary url, we&rsquo;ll fetch a <code>signedUrl</code> and store that in our join table for User&rsquo;s Items:</p>
<pre class="highlight javascript">  <span class="c1">// ...
</span>  <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">Bucket</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">Bucket</span><span class="p">,</span> 
        <span class="na">Key</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> 
        <span class="na">Expires</span><span class="p">:</span> <span class="mi">900</span><span class="o">*</span><span class="mi">4</span> <span class="c1">// 1 hour
</span>      <span class="p">};</span>
      <span class="nx">s3</span><span class="p">.</span><span class="nx">getSignedUrl</span><span class="p">(</span><span class="s1">'getObject'</span><span class="p">,</span> <span class="nx">params</span><span class="p">,</span> 
        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// Now we have a url
</span>      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="err">}</span><span class="p">);</span>
<span class="c1">// ...
</span></pre>
<p>Finally, we can save our User&rsquo;s object along with the file they uploaded in our Join table:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">s3</span><span class="p">.</span><span class="nx">getSignedUrl</span><span class="p">(</span><span class="s1">'getObject'</span><span class="p">,</span> <span class="nx">params</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Now we have a url
</span>    <span class="nx">AWSService</span><span class="p">.</span><span class="nx">dynamo</span><span class="p">({</span>
      <span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">TableName</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">UserItemsTable</span><span class="p">}</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">itemParams</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">Item</span><span class="p">:</span> <span class="p">{</span>
          <span class="s1">'ItemId'</span><span class="err">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">},</span>
          <span class="s1">'User email'</span><span class="err">:</span> <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">},</span> 
          <span class="nl">data</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">S</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
              <span class="na">itemId</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
              <span class="na">itemSize</span><span class="p">:</span> <span class="nx">file</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span>
              <span class="na">itemUrl</span><span class="p">:</span> <span class="nx">url</span>
            <span class="p">})</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">};</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">putItem</span><span class="p">(</span><span class="nx">itemParams</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">});</span>
<span class="p">});</span>
<span class="c1">// ...
</span></pre>
<p>This method, all together is available <a href="https://gist.github.com/auser/7316267#file-services-js-L98">here</a>.</p>

<p>We can use this new method inside of our controller&rsquo;s <code>onFile()</code> method, which we can write to be similar to:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">onFile</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">files</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">UserService</span><span class="p">.</span><span class="nx">uploadItemForSale</span><span class="p">(</span><span class="nx">files</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Refresh the current items for sale
</span>  <span class="p">});</span>
<span class="p">}</span>
</pre>
<h2>Querying dynamo</h2>

<p>Ideally, we&rsquo;ll want to be able to list all the products a certain user has available for purchase. In order to set up a listing of the available items, we will use the <code>query</code> api.</p>

<p>The dynamo query api is a tad esoteric and can be considerably confusing when looking at it at first glance.</p>

<blockquote>
<p>The dynamo query documentation is available <a href="http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html">http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html</a></p>
</blockquote>

<p>Basically, we&rsquo;ll match object schemes up with a comparison operator, such as <code>equal</code>, <code>lt</code> (less than), or <code>gt</code> (greater than) and several more.  Our join table&rsquo;s key is the <code>User email</code> key, so we&rsquo;ll match this key against the current user&rsquo;s email as the query key.</p>

<p>As we did with our other APIs related to users, we&rsquo;ll creat a method inside of our <code>UserService</code> to handle this querying of the database:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">itemsForSale</span><span class="err">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">service</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">AWSService</span><span class="p">.</span><span class="nx">dynamo</span><span class="p">({</span>
      <span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">TableName</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">UserItemsTable</span><span class="p">}</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">table</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">table</span><span class="p">.</span><span class="nx">query</span><span class="p">({</span>
        <span class="na">TableName</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">UserItemsTable</span><span class="p">,</span>
        <span class="na">KeyConditions</span><span class="p">:</span> <span class="p">{</span>
          <span class="s2">&quot;User email&quot;</span><span class="err">:</span> <span class="p">{</span>
            <span class="s2">&quot;ComparisonOperator&quot;</span><span class="err">:</span> <span class="s2">&quot;EQ&quot;</span><span class="p">,</span>
            <span class="s2">&quot;AttributeValueList&quot;</span><span class="err">:</span> <span class="p">[</span>
              <span class="p">{</span><span class="na">S</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">}</span>
            <span class="p">]</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">items</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">Items</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">S</span><span class="p">));</span>
          <span class="p">});</span>
          <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">items</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">});</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">},</span>
<span class="c1">// ...
</span></pre>
<blockquote>
<p>In the above query, the <code>KeyConditions</code> and <code>&quot;User email&quot;</code> are required parameters. </p>
</blockquote>

<h2>Showing the listing in HTML</h2>

<p>To show our user&rsquo;s images in HTML, we&rsquo;ll simply assign the result of our new <code>itemsForSale()</code> method to a property of the controller&rsquo;s scope:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">getItemsForSale</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">UserService</span><span class="p">.</span><span class="nx">itemsForSale</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">images</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">images</span> <span class="o">=</span> <span class="nx">images</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="nx">getItemsForSale</span><span class="p">();</span> <span class="c1">// Load the user's list initially
</span></pre>
<p>Now we can iterate over the list of items easily using the <code>ng-repeat</code> directive:</p>
<pre class="highlight html"><span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;images&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;col-sm-6 col-md-4&quot;</span> 
    <span class="na">ng-repeat=</span><span class="s">&quot;image in images&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;thumbnail&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;img</span> <span class="na">ng-click=</span><span class="s">&quot;sellImage(image)&quot;</span>
          <span class="na">data-ng-src=</span><span class="s">&quot;{{image.itemUrl}}&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p><img alt="Image listing" src="/images/aws/image_listing.png" /></p>

<h2>Selling our work</h2>

<p>The final component of our AWS-powered demo app is the ability to create sales from our Single Page App. </p>

<blockquote>
<p>In order to actually take money from customers, we&rsquo;ll need a thin backend component that will need to convert stripe tokens into sales on Stripe. We cover this in our upcoming book that&rsquo;s available for pre-release at <a href="http://www.ng-book.com/">ng-book.com</a>.</p>
</blockquote>

<p>To start handling payments, we&rsquo;ll create a <code>StripeService</code> that will handle creating charges for us. Since we&rsquo;ll want to support configuring Stripe in the <code>.config()</code> method in our module, we&rsquo;ll need to create a <code>.provider()</code>.</p>

<p>The service itself is incredibly simple as it leverages the <code>Stripe.js</code> library to do the heavy lifting work.</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">'StripeService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

  <span class="nx">self</span><span class="p">.</span><span class="nx">setPublishableKey</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">Stripe</span><span class="p">.</span><span class="nx">setPublishableKey</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">self</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">createCharge</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">'number'</span><span class="p">)</span> <span class="o">||</span>
            <span class="o">!</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">'cvc'</span><span class="p">)</span> <span class="o">||</span>
            <span class="o">!</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">'exp_month'</span><span class="p">)</span> <span class="o">||</span>
            <span class="o">!</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">'exp_year'</span><span class="p">)</span>
          <span class="p">)</span> <span class="p">{</span>
          <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="s2">&quot;Bad input&quot;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">Stripe</span><span class="p">.</span><span class="nx">card</span><span class="p">.</span><span class="nx">createToken</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> 
            <span class="kd">function</span><span class="p">(</span><span class="nx">status</span><span class="p">,</span> <span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
              <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">resp</span><span class="p">);</span>
              <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">status</span><span class="p">);</span>
              <span class="p">}</span>
          <span class="p">});</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>If you do not have a Stripe account, get one at <a href="http://stripe.com">stripe.com</a>. Stripe is an incredibly developer friendly payment processing gateway, which makes it ideal for us building our ngroad marketplace on it.</p>

<p>Once you have an account, find your <code>Account Settings</code> page and locate the <code>API Keys</code> page. Find the publishable key (either the test one &ndash; which will not actually make charges or the production version) and take note of it. </p>

<p>In our <code>scripts/app.js</code> file, add the following line and replace the &lsquo;pk<em>test</em>YOUR_KEY&rsquo; publishable key with yours.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">StripeServiceProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">StripeServiceProvider</span>
    <span class="p">.</span><span class="nx">setPublishableKey</span><span class="p">(</span><span class="s1">'pk_test_YOUR_KEY'</span><span class="p">);</span>
<span class="p">})</span>
</pre>
<h2>Using Stripe</h2>

<p>When a user clicks on an image they like, we&rsquo;ll open a form in the browser that takes credit card information. We&rsquo;ll set the form to submit to an action on our controller called <code>submitPayment()</code>.</p>

<p>Notice above where we have the thumbnail of the image, we include an action when the image is clicked that calls the <code>sellImage()</code> action with the image.</p>

<p>Implementing the <code>sellImage()</code> function in the <code>MainCtrl</code>, it looks like:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">sellImage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">image</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">showCC</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">currentItem</span> <span class="o">=</span> <span class="nx">image</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...
</span></pre>
<p>Now, when the image is clicked, the <code>showCC</code> property will be true and we can show the credit card form. We&rsquo;ve included an incredibly simple one here:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;showCC&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;submitPayment()&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">ng-bind=</span><span class="s">&quot;errors&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
    <span class="nt">&lt;span&gt;</span>Card Number<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
            <span class="na">ng-minlength=</span><span class="s">&quot;16&quot;</span>
            <span class="na">ng-maxlength=</span><span class="s">&quot;20&quot;</span>
            <span class="na">size=</span><span class="s">&quot;20&quot;</span>
            <span class="na">data-stripe=</span><span class="s">&quot;number&quot;</span>
            <span class="na">ng-model=</span><span class="s">&quot;charge.number&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;span&gt;</span>CVC<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
            <span class="na">ng-minlength=</span><span class="s">&quot;3&quot;</span> 
            <span class="na">ng-maxlength=</span><span class="s">&quot;4&quot;</span> 
            <span class="na">data-stripe=</span><span class="s">&quot;cvc&quot;</span>
            <span class="na">ng-model=</span><span class="s">&quot;charge.cvc&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;span&gt;</span>Expiration (MM/YYYY)<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
      <span class="na">ng-minlength=</span><span class="s">&quot;2&quot;</span> 
      <span class="na">ng-maxlength=</span><span class="s">&quot;2&quot;</span> 
      <span class="na">size=</span><span class="s">&quot;2&quot;</span> 
      <span class="na">data-stripe=</span><span class="s">&quot;exp_month&quot;</span>
      <span class="na">ng-model=</span><span class="s">&quot;charge.exp_month&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;span&gt;</span> / <span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
      <span class="na">ng-minlength=</span><span class="s">&quot;4&quot;</span> 
      <span class="na">ng-maxlength=</span><span class="s">&quot;4&quot;</span> 
      <span class="na">size=</span><span class="s">&quot;4&quot;</span> 
      <span class="na">data-stripe=</span><span class="s">&quot;exp-year&quot;</span>
      <span class="na">ng-model=</span><span class="s">&quot;charge.exp_year&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span>
      <span class="na">name=</span><span class="s">&quot;email&quot;</span>
      <span class="na">value=</span><span class="s">&quot;user.email&quot;</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Submit Payment<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>We&rsquo;re binding the form almost entirely to the <code>charge</code> object on the scope, which we will use when we make the charge.</p>

<p>The form itself submits to the function <code>submitPayment()</code> on the controller&rsquo;s scope. The <code>submitPayment()</code> function looks like:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">submitPayment</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">UserService</span>
    <span class="p">.</span><span class="nx">createPayment</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">currentItem</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">charge</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">showCC</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">}</span>
<span class="c1">// ...
</span></pre>
<p>The last thing that we&rsquo;ll have to do to be able to <em>take charges</em> is implement the <code>createPayment()</code> method on the UserService.</p>

<p>Now, since we&rsquo;re taking payment on the client-side, we&rsquo;re technically not going to be able to process payments, we can only accept the <code>stripeToken</code> which we can set a background process to manage handling turning the stripe tokens into actual payments.</p>

<p>Inside of our <code>createPayment()</code> function, we&rsquo;ll call our <code>StripeService</code> to generate the <code>stripeToken</code>. Then, we&rsquo;ll add the payment to an Amazon <code>SQS</code> queue so that our background process can make the charge.</p>

<p>First, we&rsquo;ll use the <code>AWSService</code> to access our SQS queues. </p>

<p>Unlike our other services, the SQS service requires a bit more integration to make it work as they require us to have a URL to interact with them. In our <code>AWSService</code> service object, we&rsquo;ll need to cache the URL that we&rsquo;re working with and create a new object every time time using that object instead. The idea behind the workflow is the exact same, however.</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">self</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$cacheFactory</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">dynamoCache</span> <span class="o">=</span> <span class="nx">$cacheFactory</span><span class="p">(</span><span class="s1">'dynamo'</span><span class="p">),</span>
      <span class="nx">s3Cache</span> <span class="o">=</span> <span class="nx">$cacheFactory</span><span class="p">(</span><span class="s1">'s3Cache'</span><span class="p">),</span>
      <span class="nx">sqsCache</span> <span class="o">=</span> <span class="nx">$cacheFactory</span><span class="p">(</span><span class="s1">'sqs'</span><span class="p">);</span>
<span class="c1">// ...
</span><span class="nl">sqs</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">credentialsPromise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">sqsCache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">)),</span>
        <span class="nx">queued</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">sqs</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">SQS</span><span class="p">();</span>
      <span class="nx">sqs</span><span class="p">.</span><span class="nx">createQueue</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> 
        <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">url</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">QueueUrl</span><span class="p">;</span>
            <span class="nx">sqsCache</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">params</span><span class="p">),</span> <span class="nx">url</span><span class="p">);</span>
            <span class="nx">queued</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">queued</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">queued</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">queued</span><span class="p">.</span><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">queue</span> <span class="o">=</span> 
        <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">SQS</span><span class="p">({</span><span class="na">params</span><span class="p">:</span> <span class="p">{</span><span class="na">QueueUrl</span><span class="p">:</span> <span class="nx">url</span><span class="p">}});</span>
      <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">queue</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span> 
<span class="p">}</span>
<span class="c1">// ...
</span></pre>
<p>Now we can use SQS inside of our <code>createPayment()</code> function. One caveat to the SQS service is that it can only send simple messages, such as with strings and numbers. It cannot send objects, so we&rsquo;ll need to call  <code>JSON.stringify</code> on our objects that we&rsquo;ll want to pass through the queue.</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">ChargeTable</span><span class="err">:</span> <span class="s2">&quot;UserCharges&quot;</span><span class="p">,</span>
<span class="c1">// ...
</span><span class="nx">createPayment</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">charge</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">StripeService</span><span class="p">.</span><span class="nx">createCharge</span><span class="p">(</span><span class="nx">charge</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">stripeToken</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
    <span class="nx">AWSService</span><span class="p">.</span><span class="nx">sqs</span><span class="p">(</span>
      <span class="p">{</span><span class="na">QueueName</span><span class="p">:</span> <span class="nx">service</span><span class="p">.</span><span class="nx">ChargeTable</span><span class="p">}</span>
    <span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">queue</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">queue</span><span class="p">.</span><span class="nx">sendMessage</span><span class="p">({</span>
        <span class="na">MessageBody</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
          <span class="na">item</span><span class="p">:</span> <span class="nx">item</span><span class="p">,</span>
          <span class="na">stripeToken</span><span class="p">:</span> <span class="nx">stripeToken</span>
        <span class="p">})</span>
      <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="p">})</span>
    <span class="p">})</span>
  <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>When we submit the form&hellip;</p>

<p><img alt="Payment handling" src="/images/aws/app_payment.png" /></p>

<p>Our SQS queue grows and we have a payment just waiting to be completed.</p>

<p><img alt="SQS queue" src="/images/aws/sqs_status.png" /></p>

<h2>Conclusion</h2>

<p>The entire source for this article is available at <a href="http://d.pr/aL9q">http://d.pr/aL9q</a>.</p>

<p>Amazon&rsquo;s AWS presents us with powerful services so that we can completely change the way we work and deploy our angular apps. </p>

<p>For more in-depth information about Angular, both more in-depth articles about back-end infrastructure and all levels of Angular, check out our upcoming book at <a href="http://ng-book.com/">ng-book.com</a>.</p>

<script type="text/javascript" src="/js/posts/aws.js"></script>

<script type="text/javascript">
  window.___gcfg = { isSignedOut: true };
  (function() {
   var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
   po.src = 'https://apis.google.com/js/client:plusone.js?onload=onLoadCallback';
   var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
 })();
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Rapid chrome app development with angular</title>
    <link href="http://www.ng-newsletter.com/posts/chrome-apps-on-angular.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/chrome-apps-on-angular.html"/>
    <updated>2013-10-29T00:00:00-07:00</updated>
    <id>urn:uuid:138a293b-cb1f-566f-b372-02dea5c12336</id>
    <summary>The Chrome web browser is Google’s custom browser. Not only is it incredibly speedy and on the bleeding edge of web development, it is at the forefront of delivering web experiences both on and off the web.

Chrome Apps are embedded applications that...</summary>
    <content type="html"><![CDATA[<p>The <a href="https://www.google.com/intl/en/chrome/browser/">Chrome</a> web browser is Google&rsquo;s custom browser. Not only is it incredibly speedy and on the bleeding edge of web development, it is at the forefront of delivering web experiences both on and off the web.</p>

<p>Chrome Apps are embedded applications that run within the web browser, but are intended on delivering a native app feel. Since they run within Chrome itself, they are written in HTML5, javascript, CSS3, and have access to native-like capabilities that true web applications do not.</p>

<p>Chrome apps have access to the Chrome API and services and can provide a integrated desktop-like experiences to the user.</p>

<p>One more interesting differentiation between Chrome apps and webapps is that they always load locally, so they show up immediately, rather than waiting for the network to fully download the components. This greatly improves the performance and our user&rsquo;s experience with running our apps.</p>

<p>In this article, we&rsquo;ll walk through how to create an advanced Chrome application using Angular. We&rsquo;re going to create a clone of the <em>fantastic</em> chrome webapp <em>Currently</em> by the team at <a href="http://blog.rainfalldesign.com/">Rainfall</a>.</p>

<p><img alt="Currently" src="/images/chromeapp/currently.png" /></p>

<p>We&rsquo;ll be building a clone that we&rsquo;ll call <em>Presently</em>: </p>

<p><img alt="Presently" src="/images/chromeapp/presently.png" /></p>

<h2>Understanding the Chrome apps</h2>

<p>Let&rsquo;s dive into looking at how Chrome apps actually work and how we can start building our own.</p>

<p>Every Chrome application has three core files:</p>

<h3>manifest.json</h3>

<p>The <code>manifest.json</code> file that describes the meta-data about the application, such as the name, description, version, and how to launch our application.</p>

<h3>A background script</h3>

<p>The background script that sets up how our application responds to system-level events, such as a user installing our app or launching it, etc.</p>

<h3>A view</h3>

<p>Most Chrome applications have a view. This component is optional, but will most generally always be used for our applications.</p>

<h3>Architecting Presently</h3>

<p>When we&rsquo;re building Presently, we&rsquo;ll need to take into account the application architecture. This will give us insight into how we&rsquo;ll build the app when we get to code.</p>

<p>Like <em>Currently</em>, <em>Presently</em> will be a &ldquo;newtab&rdquo; app. This means that it will launch every time we open a new tab.</p>

<p><em>Presently</em> has two main screens:</p>

<h4>The home screen</h4>

<p>This is the screen that features the current time and the current weather. It also features several weather icons beside the weather.</p>

<h4>The settings screen</h4>

<p>This screen will allow our users to change their location within the app.</p>

<p>In order to support the home screen, we&rsquo;ll need to be able to show a properly formatted date and time as well as fetch weather from a remote API service.</p>

<p>To support the settings screen, we&rsquo;ll integrate with a remote API service to auto-suggest potential locations for an input box.</p>

<p>Finally, we&rsquo;ll use the basic localstorage (session storage) to persist our settings across the app.</p>

<h2>Building the skeleton</h2>

<p>Building our app, we&rsquo;ll set up a file structure like so:</p>

<p><img alt="File structure" src="/images/chromeapp/tree.png" /></p>

<p>We&rsquo;ll place our css files in <code>css/</code>, our custom fonts in <code>fonts/</code>, and our javascript files in <code>js/</code>. The main javascript file will be set in the <code>js/app.js</code> file and the HTML for our app will be placed in <code>tab.html</code> at the root.</p>

<blockquote>
<p>There are great tools to help bootstrap Chrome app extensions such as <a href="http://yeoman.io">yeoman</a>. </p>
</blockquote>

<p>Before we can start up our Chrome extension, we&rsquo;ll need to grab a few dependencies.</p>

<p>We&rsquo;ll grab the <em>latest</em> version of <a href="http://code.angularjs.org/snapshot/angular.min.js">angular.min.js</a> (snapshot version) as well as <a href="http://code.angularjs.org/snapshot/angular-route.min.js">angular-route.min.js</a> from <a href="http://angularjs.org/">angularjs.org</a> and save them to the <code>js/vendor/</code> directory. </p>

<blockquote>
<p>Note that these versions are the snapshot versions of angular, not the release candidates.</p>
</blockquote>

<p>Lastly, we&rsquo;ll use twitter&rsquo;s bootstrap 3 framework to style our app, so we&rsquo;ll need to get the <code>bootstrap.min.css</code> and save it to <code>css/</code> from <a href="http://getbootstrap.com/">getbootstrap.com</a>.</p>

<blockquote>
<p>In production, it&rsquo;s often more efficient when working with multiple developers to use a tool like <a href="http://bower.io/">Bower</a> to manage dependencies. Since we&rsquo;re building a newtab app, however it&rsquo;s important we keep our app lightweight so it launches quickly.</p>
</blockquote>

<h2>manifest.json</h2>

<p>With every Chrome app we&rsquo;ll write, we&rsquo;ll need to set up a <code>manifest.json</code>. This manifest tells Chrome how the application should run, what files it should use, what permissions it has, etc. etc.</p>

<p>Our <code>manifest.json</code> will need to describe our app as <em>newtab</em> app as well as describing the <code>content_security_policy</code> (the policies that describe what our application can and cannot do) and the background script (needed by Chrome).</p>
<pre class="highlight javascript"><span class="p">{</span>
  <span class="s2">&quot;manifest_version&quot;</span><span class="err">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="s2">&quot;name&quot;</span><span class="err">:</span> <span class="s2">&quot;Presently&quot;</span><span class="p">,</span>
  <span class="s2">&quot;description&quot;</span><span class="err">:</span> <span class="s2">&quot;A currently clone&quot;</span><span class="p">,</span>
  <span class="s2">&quot;version&quot;</span><span class="err">:</span> <span class="s2">&quot;0.1&quot;</span><span class="p">,</span>
  <span class="s2">&quot;permissions&quot;</span><span class="err">:</span> <span class="p">[</span>
    <span class="s2">&quot;http://api.wunderground.com/api/&quot;</span><span class="p">,</span>
    <span class="s2">&quot;http://autocomplete.wunderground.com/api&quot;</span>
  <span class="p">],</span>
  <span class="s2">&quot;background&quot;</span><span class="err">:</span> <span class="p">{</span>
    <span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">[</span><span class="s2">&quot;js/vendor/angular.min.js&quot;</span><span class="p">]</span>
  <span class="p">},</span>
  <span class="s2">&quot;content_security_policy&quot;</span><span class="err">:</span> <span class="s2">&quot;script-src 'self'; object-src 'self'&quot;</span><span class="p">,</span>
  <span class="s2">&quot;chrome_url_overrides&quot;</span> <span class="err">:</span> <span class="p">{</span>
    <span class="s2">&quot;newtab&quot;</span><span class="err">:</span> <span class="s2">&quot;tab.html&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>The <code>manifest.json</code> is relatively straightforward with the name, the manifest version, the version, etc. In order to tell Chrome to launch our app as a <code>newtab</code> app, we set the app to <em>override</em> the <code>newtab</code> page. </p>

<h2>tab.html</h2>

<p>The main HTML file for our application is the <code>tab.html</code> file. This is the file that will be loaded when we open a new tab in Chrome.</p>

<p>We&rsquo;ll set up the basic angular app inside of the <code>tab.html</code> file:</p>
<pre class="highlight html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">data-ng-app=</span><span class="s">&quot;myApp&quot;</span> <span class="na">data-ng-csp=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Presently<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/main.css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/vendor/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/vendor/angular-route.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre>
<p>This very basic structure of an angular application looks almost identical to any angular app, with one exception: <code>data-ng-csp=&quot;&quot;</code>. </p>

<p>The <code>ngCsp</code> directive enables Content Security Policy (or CSP) support for our angular app. Since Chrome apps prevent the browser from using <code>eval</code> or <code>function(string)</code> generated functions and Angular uses the <code>function(string)</code> generated function for speed, <code>ngCsp</code> will cause Angular to evaluate all expressions.</p>

<p>This compatibility mode comes as a cost of performance, however as it will execute operations much slower, but will not throw any security violations in the process. </p>

<p>CSP also forbids javascript files from inlining stylesheet rules, so we&rsquo;ll need to include <code>angular-csp.css</code> manually. </p>

<p>The <code>angular-csp.css</code> file can be found at <a href="http://code.angularjs.org/snapshot/angular-csp.css">http://code.angularjs.org/snapshot/angular-csp.css</a>.</p>

<p>Lastly, <code>ngCsp</code> must be placed alongside the root of our angular apps:</p>
<pre class="highlight javascript"><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">app</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">csp</span><span class="o">&gt;</span>
</pre>
<blockquote>
<p>Without the <code>ng-csp</code> directive, our Chrome app will <strong>not</strong> run as it will throw a security exception. If you see a security exception being thrown, make sure you check the root element for the directive.</p>
</blockquote>

<h2>Loading the app in Chrome</h2>

<p>With our app in progress, let&rsquo;s load it into Chrome so we can follow our progress along in the browser. To load our app in Chrome, navigate to the url: <code>chrome://extensions/</code>.</p>

<p>Once there, click on the button &ldquo;Load unpackged extension&hellip;&rdquo; and find the root directory (the directory that contains our <code>manifest.json</code> file from above). </p>

<p><img alt="Load unpacked extension" src="/images/chromeapp/load_unpacked.png" /></p>

<p>Once the application has been <em>loaded</em> into the Chrome browser, open a new tab and we should see our empty app with one error (don&rsquo;t worry, we&rsquo;ll fix this shortly):</p>

<p><img alt="Load unpacked extension" src="/images/chromeapp/first_run.png" /></p>

<blockquote>
<p>Anytime that we update or modify our <code>manifest.json</code> file, we&rsquo;ll need to click on the <code>Reload</code> link underneath our Chrome app in <code>chrome://extensions</code>.</p>
</blockquote>

<h2>The main module</h2>

<p>Our entire angular application will be built in the <code>js/app.js</code> file. For production versions of our app, we may want to split this functionality into multiple files or use a tool like <a href="http://gruntjs.com/">grunt</a> to compress and concatenate them for us. </p>

<p>Our app is called <code>myApp</code>, so we&rsquo;ll create an angular module with the same name:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[])</span>
</pre>
<p>With this, our app will run in the browser without any issues.</p>

<h2>Building the homepage</h2>

<p>We&rsquo;ll start by building the home section in our app. In this section, we&rsquo;ll work on putting together components of our app that will make the application run. In the next section, we&rsquo;ll set up the multi-route application.</p>

<h3>Building the clock</h3>

<p>The main feature of <em>Presently</em> is the large clock that sits right at the top of the application and updates every second. In Angular, we can set this up pretty simply.</p>

<p>We&rsquo;ll first start by building a <code>MainCtrl</code> will be responsible for managing the home screen. Inside this <code>MainCtrl</code> controller, we&rsquo;ll set up a timeout that will tick every second and update a local scope variable.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Build the date object
</span>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">date</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="c1">// Update function
</span>  <span class="kd">var</span> <span class="nx">updateTime</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">date</span><span class="p">.</span><span class="nx">raw</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">$timeout</span><span class="p">(</span><span class="nx">updateTime</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// Kick off the update function
</span>  <span class="nx">updateTime</span><span class="p">();</span>
<span class="p">});</span>
</pre>
<p>Every second that our <code>MainCtrl</code> is visible, the <code>updateTime()</code> function will be ran to update the <code>$scope.date.raw</code> timestamp and our view will be updated. </p>

<p>In order for us to see anything in the view load in our Chrome app, we&rsquo;ll need to bind this data to the document. We can set up this binding using the normal <code>{{ }}</code> template syntax:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
    {{ date.raw }}
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>When we go back to the browser and refresh, we&rsquo;ll see an unformatted Date object ticking in the view:</p>

<p><img alt="Unformatted date" src="/images/chromeapp/unformatted_date.png" /></p>

<p>The date is very ugly in the browser as it stands now. We can utilize Angular&rsquo;s built-in filters to format our date in a much more elegant manner.</p>

<p>Following along with how <em>Currently</em> formats the date in their homescreen, we&rsquo;ll format ours similarly. Updating the view, we will move our date into it&rsquo;s own nested div and add formatting to display the date:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;datetime&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>{{ date.raw | date:'hh mm ss' }}<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>With a little CSS and help from bootstrap, our dates will appear on the screen in a much more human-friendly format.</p>

<p><img alt="First screen" src="/images/chromeapp/first_screen.png" /></p>

<p>We&rsquo;re using the CSS rules to align the date and times to the center of the screen and increasing the font-size to be prominently displayed on-screen.</p>
<pre class="highlight css"><span class="nf">#datetime</span> <span class="p">{</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#datetime</span> <span class="nt">h1</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">6.1em</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>We can add a second date in our view that simply shows our date with a human-friendly display. This is simply a matter of adding a second formatted date:</p>
<pre class="highlight html"><span class="c">&lt;!-- ... --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;datetime&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>{{ date.raw | date:'hh mm ss' }}<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;h2&gt;</span>{{ date.raw | date:'EEEE, MMMM yyyy' }}<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="c">&lt;!-- ... --&gt;</span>
</pre>
<p>Our CSS for the <code>#datetime h2</code> tag simply increases the size of the <code>&lt;h2&gt;</code> tag:</p>
<pre class="highlight css"><span class="nf">#datetime</span> <span class="nt">h2</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.0em</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p><img alt="Full dates" src="/images/chromeapp/full_dates.png" /></p>

<h2>Sign up for wunderground&rsquo;s weather API</h2>

<p>Our app will need to reach out to foreign sources to fetch the current weather for the location we&rsquo;re interested in. In this application, we&rsquo;re using the <a href="http://www.wunderground.com/">wunderground</a> api. </p>

<p>In order to use the wunderground api, we&rsquo;ll need to get an access api key.</p>

<p>To get an access api key, we&rsquo;ll need to sign up first. Head to the weather api wunderground page at <a href="http://www.wunderground.com/weather/api/">http://www.wunderground.com/weather/api/</a> and click &ldquo;Sign Up for Free!&rdquo;.</p>

<p><img alt="Sign up for wunderground" src="/images/chromeapp/wunderground_page.png" /></p>

<p>Fill out the relevant details on the following page and we&rsquo;ll click through until we reach the detail page that shows our API key.</p>

<p><img alt="Fill out details" src="/images/chromeapp/wunderground_signup.png" /></p>

<p>Once we&rsquo;re set, locate the wunderground api key and save it. We&rsquo;ll be using it shortly.</p>

<h3>Building the angular service</h3>

<p>We won&rsquo;t place our logic into the Controller to fetch the weather as it is both inefficient (as the controller will be blown away when we navigate to another page and we&rsquo;ll need to re-call the api every time the controller is loaded) and poor design to mix in business logic details with implementation details.</p>

<p>Instead, we&rsquo;ll use a <a href="#service">service</a>. A service persists across controllers, for the duration of the application&rsquo;s lifetime and is the appropriate place for us to hide business logic away from the controller.</p>

<p>As we&rsquo;ll need to <em>configure</em> our app when it boots up, we&rsquo;ll use the <code>.provider()</code> method of creating a service. This is the <strong>only</strong> method for creating services that can be injected into <code>.config()</code> functions. </p>

<p>To build the service, we&rsquo;ll use the <code>.provider()</code> api method that takes both a name of the service as well as a function that defines the actual provider. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">'Weather'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="p">})</span>
</pre>
<p>Inside here, we&rsquo;ll need to define a <code>$get()</code> function that returns the methods available to the service. To configure this service, we&rsquo;ll need to allow a method for the api key to be set on configuration. These methods will live outside of the scope of the <code>$get()</code> function.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">provider</span><span class="p">(</span><span class="s1">'Weather'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">setApiKey</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">apiKey</span> <span class="o">=</span> <span class="nx">key</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="k">this</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="c1">// Service object
</span>    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre>
<p>With this minimal amount of code, we can now <em>inject</em> the <code>Weather</code> service into our <code>.config()</code> function and configure the service with our wunderground api key.</p>

<p>When angular encounters a provider created with the <code>.provider()</code> api method, it creates a <code>[Name]Provider</code> injectable object. This is what we&rsquo;ll inject into our config function:</p>
<pre class="highlight javascript"><span class="c1">// .provider('Weather', function() {
//  ...
// })
</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">WeatherProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">WeatherProvider</span><span class="p">.</span><span class="nx">setApiKey</span><span class="p">(</span><span class="s1">'YOUR_API_KEY'</span><span class="p">);</span>
<span class="p">})</span>
<span class="c1">// .controller('MainCtrl', function($scope, $timeout) {
// ...
</span></pre>
<p>The wunderground API requires that we pass the API key with our request in the URL. In order to pass our api key in with every request, we&rsquo;ll create a function that will generate the url.</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
<span class="c1">// ...
</span><span class="k">this</span><span class="p">.</span><span class="nx">getUrl</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">ext</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">&quot;http://api.wunderground.com/api/&quot;</span> <span class="o">+</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">apiKey</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nx">type</span> <span class="o">+</span> <span class="s2">&quot;/q/&quot;</span> <span class="o">+</span>
    <span class="nx">ext</span> <span class="o">+</span> <span class="s1">'.json'</span><span class="p">;</span>
<span class="p">};</span>
</pre>
<p>Now, we can create our API call for the <code>Weather</code> service to get us the latest forecast data from the wunderground API.</p>

<p>We&rsquo;ll create our own promises that we can use to resolve in the view as we&rsquo;ll want to return only the relevant results from our API call:</p>
<pre class="highlight javascript"><span class="k">this</span><span class="p">.</span><span class="nx">$get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$q</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">getWeatherForecast</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
      <span class="nx">$http</span><span class="p">({</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getUrl</span><span class="p">(</span><span class="s2">&quot;forecast&quot;</span><span class="p">,</span> <span class="nx">city</span><span class="p">),</span>
        <span class="na">cache</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// The wunderground API returns the 
</span>        <span class="c1">// object that nests the forecasts inside
</span>        <span class="c1">// the forecast.simpleforecast key
</span>        <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">forecast</span><span class="p">.</span><span class="nx">simpleforecast</span><span class="p">);</span>
      <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="p">});</span>
      <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>Now, we can inject the <code>Weather</code> service into our controller and simply call the method <code>getWeatherForecast()</code> and respond to the promise instead of dealing with the complexity of the API in our controller.</p>

<p>Back to our <code>MainCtrl</code>, we can inject the <code>Weather</code> service and set the result on our scope:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">Weather</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">weather</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="c1">// Hardcode San_Francisco for now
</span>    <span class="nx">Weather</span><span class="p">.</span><span class="nx">getWeatherForecast</span><span class="p">(</span><span class="s2">&quot;CA/San_Francisco&quot;</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">weather</span><span class="p">.</span><span class="nx">forecast</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="c1">// ...
</span></pre>
<p>To view the result of the API call in our view, we&rsquo;ll need to update our <code>tab.html</code>. For debugging purposes, we like to use the <code>json</code> filter inside a <code>&lt;pre&gt;</code> tag:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;forecast&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;pre&gt;</span>{{ weather.forecast | json }}<span class="nt">&lt;/pre&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p><img alt="Weather API debugging call" src="/images/chromeapp/wunderground_api_debug.png" /></p>

<p>We can see that the view is updated with the latest weather and now we&rsquo;re good to go to create a more polished view.</p>

<p>The view itself will iterate over the <code>forecast.forecastday</code> collection. For each element, we&rsquo;ll create a view that displays the weather icon given to us by the wunderground api as well as the human-readable date and high.</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;forecast&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;row list-unstyled&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;day in weather.forecast.forecastday&quot;</span> <span class="na">class=</span><span class="s">&quot;col-md-3&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">ng-class=</span><span class="s">&quot;{today: $index == 0}&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;{{ day.icon }}&quot;</span> <span class="na">ng-src=</span><span class="s">&quot;{{ day.icon_url }}&quot;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;h3&gt;</span>{{ day.high.fahrenheit }}<span class="nt">&lt;/h3&gt;</span>
        <span class="nt">&lt;h4</span> <span class="na">ng-if=</span><span class="s">&quot;$index == 0&quot;</span><span class="nt">&gt;</span>Now<span class="nt">&lt;/h4&gt;</span>
        <span class="nt">&lt;h4</span> <span class="na">ng-if=</span><span class="s">&quot;$index != 0&quot;</span><span class="nt">&gt;</span>{{ day.date.weekday }}<span class="nt">&lt;/h4&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p><img alt="Clean HTML weather view" src="/images/chromeapp/clean_html_view.png" /></p>

<p>The style we&rsquo;ve set in the view is set as:</p>
<pre class="highlight css"><span class="nf">#forecast</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">4.5em</span><span class="p">;</span>
  <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#forecast</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="nt">h3</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.4em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#forecast</span> <span class="nt">ul</span> <span class="nt">li</span> <span class="nc">.today</span> <span class="nt">h3</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">1.8em</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<h2>A settings screen</h2>

<p>Currently our app only has one view, with a hard-coded city that fetched for every browser. Although this works for all of us here in San Francisco, it does <strong>not</strong> work for anyone outside of it.</p>

<p>In order to allow our users the ability to customize their experience with <em>Presently</em>, we&rsquo;ll need to add a second screen: a setting screen.</p>

<p>To introduce a second screen (and multiple views), we&rsquo;ll need to add the <code>ngRoute</code> module as a dependency of our app module.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngRoute'</span><span class="p">])</span>
</pre>
<p>Now we can define our separate views and routes as well as pull our home screen view out of the main <code>tab.html</code> view.</p>

<p>In defining our routes, note that we&rsquo;ll need two; one for each of the two different screens of our app.</p>
<pre class="highlight javascript"><span class="c1">// angular.module(...)
// ...
</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$routeProvider</span>
    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'templates/home.html'</span><span class="p">,</span> 
      <span class="na">controller</span><span class="p">:</span> <span class="s1">'MainCtrl'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">'/settings'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'templates/settings.html'</span><span class="p">,</span>
      <span class="na">controller</span><span class="p">:</span> <span class="s1">'SettingsCtrl'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span><span class="na">redirectTo</span><span class="p">:</span> <span class="s1">'/'</span><span class="p">});</span>
<span class="p">})</span>
</pre>
<p>Now we can take our entire <code>tab.html</code> html between the <code>.container</code> div, move it into the file <code>templates/home.html</code>, and replace it with <code>&lt;div ng-view&gt;&lt;/div&gt;</code>. </p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>When we refresh the page, we&rsquo;ll see that nothing has appeared to have <em>changed</em>, but our html is no longer loaded inside the <code>tab.html</code>, but from the <code>templates/home.html</code> template.</p>

<p>Currently, we have no way of navigating between our two screens. We can add some footer-based navigation that we can allow our users to navigate between the pages. We&rsquo;ll simply add two links at the bottom of the page to navigate between pages, like so:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;actionbar&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;list-inline&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-home&quot;</span> <span class="na">href=</span><span class="s">&quot;#/&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-cog&quot;</span> <span class="na">href=</span><span class="s">&quot;#/settings&quot;</span><span class="nt">&gt;&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>In order to add them to the the bottom right-hand corner of the screen, we&rsquo;ll apply a bit of CSS to absolutely position them:</p>
<pre class="highlight css"><span class="nf">#actionbar</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">bottom</span><span class="p">:</span> <span class="m">0.5em</span><span class="p">;</span>
  <span class="nl">right</span><span class="p">:</span> <span class="m">1.0em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nf">#actionbar</span> <span class="nt">a</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">2</span><span class="p">.</span><span class="n">2rem</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>Now, if we navigate to our settings page by clicking on the cog button, we&rsquo;ll see that nothing is rendered. We need to define our <code>SettingsCtrl</code> so we can start manipulating the view and working with our user.</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'SettingsCtrl'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Our controller will go here
</span><span class="p">})</span>
</pre>
<p>The settings screen itself will feature a single form that will be responsible for allowing the user to change cities that they are interested in. The HTML itself will look similar to this (with a few features we have yet to implement):</p>
<pre class="highlight html"><span class="nt">&lt;h2&gt;</span>Settings<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;save()&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
          <span class="na">ng-model=</span><span class="s">&quot;user.location&quot;</span>
          <span class="na">placeholder=</span><span class="s">&quot;Enter a location&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> 
        <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Save&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<h2>Implementing a User service</h2>

<p>For the same reasons that we are hiding away the complexity of the wunderground API, we&rsquo;ll also hide away our User api. This will enable us to use localstorage as well as communicate across our controllers about the user settings at any part of the app.</p>

<p>The <code>UserService</code> itself is straightforward and does not need to be configured in our app. Without the use of localstorage, our <code>UserService</code> will simply be:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'UserService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">location</span><span class="p">:</span> <span class="s1">'autoip'</span>
  <span class="p">};</span>
  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">user</span><span class="p">:</span> <span class="nx">defaults</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="nx">service</span><span class="p">;</span>
<span class="p">})</span>
</pre>
<p>This service will hold on to our user object for the lifetime of the application. That is to say, while the browser window is open, the settings of the application will remain constant to the user&rsquo;s settings. However, if our user opens a new tab in chrome, these settings disappear, which is not ideal.</p>

<p>We can persist our settings across our app by using Chrome&rsquo;s sessionStorage capabilities. Luckily, this api is straightforward and simple.</p>

<p>We&rsquo;ll add two functions to the <code>UserService</code>:</p>

<ul>
<li>save</li>
<li>restore</li>
</ul>

<p>Even with these capabilities, the <code>UserService</code> has not grown </p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'UserService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">location</span><span class="p">:</span> <span class="s1">'autoip'</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">user</span><span class="p">:</span> <span class="p">{},</span>
    <span class="na">save</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">presently</span> <span class="o">=</span>
        <span class="nx">angular</span><span class="p">.</span><span class="nx">toJson</span><span class="p">(</span><span class="nx">service</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="na">restore</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Pull from sessionStorage
</span>      <span class="nx">service</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> 
        <span class="nx">angular</span><span class="p">.</span><span class="nx">fromJson</span><span class="p">(</span><span class="nx">sessionStorage</span><span class="p">.</span><span class="nx">presently</span><span class="p">)</span> <span class="o">||</span> <span class="nx">defaults</span>

      <span class="k">return</span> <span class="nx">service</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="c1">// Immediately call restore from the session storage
</span>  <span class="c1">// so we have our user data available immediately
</span>  <span class="nx">service</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
  <span class="k">return</span> <span class="nx">service</span><span class="p">;</span>
<span class="p">})</span>
<span class="c1">// ...
</span></pre>
<p>Now, we can inject this <code>UserService</code> across our Chrome app and have access to the same user data. Heading back to our <code>SettingsCtrl</code>, we can now set up a user object to define settings with the new service:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'SettingsCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">UserService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">UserService</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
<span class="p">});</span>
</pre>
<p>If we refresh the browser, we&rsquo;ll now see that we have a default set for the user as <code>&#39;autoip&#39;</code>, which is the default we set up in the <code>UserService</code> definition.</p>

<p><img alt="Settings page" src="/images/chromeapp/settings_one.png" /></p>

<p>Now, we only need a way for our user to save their data into their session storage so we can use it across the app. In our <code>templates/settings.html</code>, we defined the form as having a <code>ng-submit=&quot;save()&quot;</code> action, thus when our user submits the form, the <code>save()</code> function will be called.</p>

<p>Inside our <code>SettingsCtrl</code>, we&rsquo;ll implement the <code>save()</code> function that will call save on the <code>UserService</code> and persist the user&rsquo;s data into their sessionStorage.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'SettingsCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">UserService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">UserService</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>

    <span class="nx">$scope</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">UserService</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Now, with the single input field bound to <code>user.location</code>, if we change the value and press save, our user&rsquo;s <code>sessionStorage</code> will be updated:</p>

<p><img alt="sessionStorage" src="/images/chromeapp/sessionStorage.png" /></p>

<p>By using the <code>UserService</code> in our <code>HomeCtrl</code>, we can now remove the hardcoded value of &lsquo;&ldquo;CA/San_Francisco&rdquo;&rsquo; and replace it with our new <code>UserService</code> object&rsquo;s location.</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">Weather</span><span class="p">,</span> <span class="nx">UserService</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">UserService</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
    <span class="nx">Weather</span><span class="p">.</span><span class="nx">getWeatherForecast</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">weather</span><span class="p">.</span><span class="nx">forecast</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="c1">// ...
</span><span class="p">})</span>
</pre>
<p>As we can see, if we flip back and forth from the settings view and input &ldquo;NY/New_York&rdquo;, for instance we can see the weather changing based upon the location we place in the settings page.</p>

<p><img alt="New york location" src="/images/chromeapp/newyork.png" /></p>

<h2>City autofill/autocomplete</h2>

<p>It&rsquo;s pretty inconvenient to need to type a city that conforms to the wunderground API formats (lat/long, city and state, country codes, etc). Luckily, the wunderground api also provides us an <a href="http://www.wunderground.com/weather/api/d/docs?d=autocomplete-api">autocomplete API</a>.</p>

<p>Instead of requiring our users to <em>know</em> the specific city format, we&rsquo;ll provide a list of them for our user&rsquo;s to select.</p>

<blockquote>
<p>For simplicity and flexibility purposes, we&rsquo;re only going to create a raw javascript-based autocomplete, rather than use a plugin library, such as the <code>typeahead.js</code> or <code>jQuery</code> plugin libraries. </p>
</blockquote>

<p>To do this, we&rsquo;ll create a directive that we&rsquo;ll place on the <code>&lt;input&gt;</code> element that will append a <code>&lt;ul&gt;</code> element with a list of suggested places.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'autoFill'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$timeout</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">autoFill</span><span class="p">:</span> <span class="s1">'&amp;'</span><span class="p">,</span>
      <span class="na">ngModel</span><span class="p">:</span> <span class="s1">'='</span>
    <span class="p">},</span>
    <span class="na">compile</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tEle</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Our compile function
</span>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Our link function
</span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre>
<p>As we will be creating a new element, we&rsquo;ll need to use the <code>compile</code> function, rather than just the link function and a template, since our <code>&lt;ul&gt;</code> element cannot be nested underneath an <code>&lt;input&gt;</code> element.</p>

<p>Without diving too deeply into how the <code>compile</code> function works, we&rsquo;re going to create a new element and we&rsquo;ll set up the bindings on our new element:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">compile</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tEle</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">tplEl</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="s1">'&lt;div class=&quot;typeahead&quot;&gt;'</span> <span class="o">+</span>
  <span class="s1">'&lt;input type=&quot;text&quot; autocomplete=&quot;off&quot; /&gt;'</span> <span class="o">+</span>
  <span class="s1">'&lt;ul id=&quot;autolist&quot; ng-show=&quot;reslist&quot;&gt;'</span> <span class="o">+</span>
    <span class="s1">'&lt;li ng-repeat=&quot;res in reslist&quot; '</span> <span class="o">+</span>
      <span class="s1">'&gt;{{res.name}}&lt;/li&gt;'</span> <span class="o">+</span>
  <span class="s1">'&lt;/ul&gt;'</span> <span class="o">+</span>
  <span class="s1">'&lt;/div&gt;'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">tplEl</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'input'</span><span class="p">);</span>
  <span class="nx">input</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'type'</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span>
  <span class="nx">input</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'ng-model'</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">.</span><span class="nx">ngModel</span><span class="p">);</span>
  <span class="nx">tEle</span><span class="p">.</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">tplEl</span><span class="p">);</span>

  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...
</span></pre>
<p>Inside of our link function, we&rsquo;ll bind on a <code>keyup</code> event and check that we have at least a minimum number of characters in our input field. Once there are a minimum number of characters, we&rsquo;ll run a function set by the use of the directive to fetch the auto-suggested values.</p>

<h3>auto-complete api</h3>

<p>Examining how we invoke this directive, we call it by passing a function to the <code>auto-fill</code> directive call as well as binding the location to the <code>user.location</code> value:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
  <span class="na">ng-model=</span><span class="s">&quot;user.location&quot;</span>
  <span class="na">auto-fill=</span><span class="s">&quot;fetchCities&quot;</span>
  <span class="na">autocomplete=</span><span class="s">&quot;off&quot;</span>
  <span class="na">placeholder=</span><span class="s">&quot;Location&quot;</span> <span class="nt">/&gt;</span>
</pre>
<p>In our <code>Weather</code> service, we&rsquo;ll create another function that specifically calls the <code>autocomplete</code> api and resolves a promise with a list of suggestions completions for a query term.</p>
<pre class="highlight javascript"><span class="nx">getWeatherForecast</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="p">},</span>
<span class="nx">getCityDetails</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">query</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
  <span class="nx">$http</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="s2">&quot;http://autocomplete.wunderground.com/' +
          'aq?query=&quot;</span> <span class="o">+</span>
          <span class="nx">query</span>
  <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">RESULTS</span><span class="p">);</span>
  <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">d</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>Back in our <code>SettingsCtrl</code>, we can simply reference this function as the function that retrieves the list of suggested values. Remember, we&rsquo;ll need to inject the <code>Weather</code> service in the controller to reference it.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'SettingsCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">UserService</span><span class="p">,</span> <span class="nx">Weather</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...
</span>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">fetchCities</span> <span class="o">=</span> <span class="nx">Weather</span><span class="p">.</span><span class="nx">getCityDetails</span><span class="p">;</span>
<span class="p">});</span>
</pre>
<p>In the directive, we can now call this function that we&rsquo;ll reference when we create. </p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">tEle</span><span class="p">.</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">tplEl</span><span class="p">);</span>
<span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">minKeyCount</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">minKeyCount</span> <span class="o">||</span> <span class="mi">3</span><span class="p">,</span>
      <span class="nx">timer</span><span class="p">,</span>
      <span class="nx">input</span> <span class="o">=</span> <span class="nx">ele</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">'input'</span><span class="p">);</span>

  <span class="nx">input</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">'keyup'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="o">=</span> <span class="nx">ele</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">minKeyCount</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">timer</span><span class="p">)</span> <span class="nx">$timeout</span><span class="p">.</span><span class="nx">cancel</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">reslist</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">timer</span><span class="p">)</span> <span class="nx">$timeout</span><span class="p">.</span><span class="nx">cancel</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
      <span class="nx">timer</span> <span class="o">=</span> <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">scope</span><span class="p">.</span><span class="nx">autoFill</span><span class="p">()(</span><span class="nx">val</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">data</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">scope</span><span class="p">.</span><span class="nx">reslist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
            <span class="nx">scope</span><span class="p">.</span><span class="nx">ngModel</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">zmw</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">});</span>
      <span class="p">},</span> <span class="mi">300</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
  <span class="c1">// Hide the reslist on blur
</span>  <span class="nx">input</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">'blur'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">scope</span><span class="p">.</span><span class="nx">reslist</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="nx">scope</span><span class="p">.</span><span class="nx">$digest</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre>
<p>We&rsquo;re using a <em>timeout</em> so that we only call the function once we are done typing. This is a simple way to prevent the function from being called repeatedly while we&rsquo;re really only interested in the first call to the suggestion API.</p>

<p><img alt="Autofill in the browser" src="/images/chromeapp/autofill.png" /></p>

<h2>Sprinkling in timezone support</h2>

<p>Finally, we also want our clock to update and reflect the new location that the user has set in their settings. Updating the clock to include timezone support is easy to add as we&rsquo;ve implemented the most difficult part already through the autocomplete API.</p>

<p>First, we&rsquo;ll add one more attribute to our directive usage as <code>timezone</code>:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>
    <span class="na">ng-model=</span><span class="s">&quot;user.location&quot;</span>
    <span class="na">timezone=</span><span class="s">&quot;user.timezone&quot;</span>
    <span class="na">auto-fill=</span><span class="s">&quot;fetchCities&quot;</span>
    <span class="na">autocomplete=</span><span class="s">&quot;off&quot;</span>
    <span class="na">placeholder=</span><span class="s">&quot;Location&quot;</span> <span class="nt">/&gt;</span>
</pre>
<p>Next, we&rsquo;ll need to add the timezone attribute on to our generated <code>&lt;input&gt;</code> field in our directive&rsquo;s compile function:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">input</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'type'</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span>
<span class="nx">input</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'ng-model'</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">.</span><span class="nx">ngModel</span><span class="p">);</span>
<span class="nx">input</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'timezone'</span><span class="p">,</span> <span class="nx">tAttrs</span><span class="p">.</span><span class="nx">timezone</span><span class="p">);</span>
<span class="nx">tEle</span><span class="p">.</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">tplEl</span><span class="p">);</span>
<span class="c1">// ...
</span></pre>
<p>Last, but not least, we&rsquo;ll simply save the user&rsquo;s timezone when we save the topmost value for the user&rsquo;s location in the autocomplete link function:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="nx">scope</span><span class="p">.</span><span class="nx">reslist</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
<span class="nx">scope</span><span class="p">.</span><span class="nx">ngModel</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">zmw</span><span class="p">;</span>
<span class="nx">scope</span><span class="p">.</span><span class="nx">timezone</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">tz</span><span class="p">;</span>
<span class="c1">// ...
</span></pre>
<p>Back in the browser, when we type our city we&rsquo;ll also save the timezone along with the new value of the city as well:</p>

<p><img alt="Timezone support" src="/images/chromeapp/timezone.png" /></p>

<p>Finally, we&rsquo;ll need to update the time and date in our <code>MainCtrl</code> to take into account the new timezone.</p>

<p>Previously, matching timezone names to their GMT offsets was a difficult task. The Mozilla and Chrome teams have implemented the toLocaleString with the new <code>timeZone</code> argument that enables us to remap a date according to it&rsquo;s timezone. Since we are writing a Chrome app, we can depend upon this function being available for us to use in our app.</p>

<p>Back in our <code>MainCtrl</code>, we&rsquo;ll create a new Date based off the saved timezone:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">Weather</span><span class="p">,</span> <span class="nx">UserService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">date</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="kd">var</span> <span class="nx">updateTime</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">date</span><span class="p">.</span><span class="nx">tz</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toLocaleString</span><span class="p">(</span>
          <span class="s2">&quot;en-US&quot;</span><span class="p">,</span> <span class="p">{</span><span class="na">timeZone</span><span class="p">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">timezone</span><span class="p">}</span>
        <span class="p">));</span>
      <span class="nx">$timeout</span><span class="p">(</span><span class="nx">updateTime</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// ...
</span></pre>
<p>Now, instead of using the <code>$scope.date.raw</code> in our view, we&rsquo;ll switch over to using the <code>$scope.date.tz</code>. Now, the time will change along with the timezone.</p>

<p>In chicago:
<img alt="Chicago" src="/images/chromeapp/chicago.png" /></p>

<p>In Hawaii:
<img alt="Hawaii" src="/images/chromeapp/hawaii.png" /></p>

<p>Our upcoming book, <a href="http://ng-book.com/">ng-book: The Complete Book on AngularJS</a> features some more techniques for how to allow our users to customize the UI along with a lot of other professional AngularJS information.</p>

<p>The complete source code for this article is available <a href="http://d.pr/dSW2">here</a>. Enjoy!</p>

<style type="text/css">
#article article.post img {
  width: 75%;
}
</style>
]]></content>
  </entry>
  
  <entry>
    <title type="html">What you need to know about Angular SEO</title>
    <link href="http://www.ng-newsletter.com/posts/serious-angular-seo.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/serious-angular-seo.html"/>
    <updated>2013-10-22T00:00:00-07:00</updated>
    <id>urn:uuid:b58aae2c-5995-5d89-98e7-cfeb15fc4a0f</id>
    <summary>Search engines, such as Google and Bing are engineered to crawl static web pages, not javascript-heavy, client-side apps. This is typical of a search engine which does not render javascript when the search bot is crawling over web pages. 

This is...</summary>
    <content type="html"><![CDATA[<p>Search engines, such as Google and Bing are engineered to crawl static web pages, not javascript-heavy, client-side apps. This is typical of a search engine which does not render javascript when the search bot is crawling over web pages. </p>

<p>This is because our javascript-heavy apps need a javascript engine to run, like PhantomJS or v8, for instance. Web crawlers typically load a web page without using a javascript interpreter. </p>

<blockquote>
<p>Search engines do not include JS interpreters in their crawlers for good reason, they don&rsquo;t need to and it slows them down and makes them more inefficient for crawling the web.</p>
</blockquote>

<p>Are we out of luck for providing good SEO for our Angular apps? This article will show you exactly what you need to know to get your app indexed <em>today</em>.</p>

<h2>Getting angular apps indexed</h2>

<p>There are several different ways that we can tell Google to handle indexing our app. One, the more common approach is by using a backend to serve our angular app. This has the advantage of being simple to implement without much duplication of code. </p>

<p>A second approach is to render all of the content delivered by our angular app inside a <code>&lt;noscript&gt;</code> tag in our javascript. We&rsquo;re not going to cover the second approach </p>

<p>In this article, we&rsquo;re going to walk through how you can build an SEO toolchain for your workflow, presenting a bunch of different options for you to choose what works best for you.</p>

<h2>How modern search engines work with client-side apps</h2>

<p>Google and other advanced search engines support the hashbang URL format, which is used to identify the current page that&rsquo;s being accessed at a given URL. These search engines transform this URL into a custom URL format that enables them to be accessible by the server. </p>

<p>The search engine visits the URL and expects to get the HTML that our browsers will receive, with the fully rendered HTML content. For instance, Google will turn the hashbang URL from:</p>
<pre class="highlight html">http://www.ng-newsletter.com/#!/signup/page
</pre>
<p>Into the URL:</p>
<pre class="highlight html">http://www.ng-newsletter.com/?_escaped_fragment_=/signup/page
</pre>
<p>Within our angular app, we will need to tell Google to handle our site slightly differently depending upon which style we handle.</p>

<h3>Hashbang syntax</h3>

<p>Google&rsquo;s Ajax crawling specification was written and originally intended for delivering URLs with the hashbang syntax, which was an original method of creating permalinks for JS applications. </p>

<p>We&rsquo;ll need to configure our app to use the <code>hashPrefix</code> (default) in our routing. This will turn our routes from simply using the <code>/#/</code> syntax to the <code>/#!/</code> syntax:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">'$location'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$location</span><span class="p">.</span><span class="nx">hashPrefix</span><span class="p">(</span><span class="s1">'!'</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<h3>HTML5 routing mode</h3>

<p>The new HTML5 pushState doesn&rsquo;t work the same way as it modifies the browser&rsquo;s URL and history. To get angular apps to &ldquo;fool&rdquo; the search bot, we can add a simple element to the header:</p>
<pre class="highlight html"><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;fragment&quot;</span> <span class="na">content=</span><span class="s">&quot;!&quot;</span><span class="nt">&gt;</span>
</pre>
<p>This tells the Google spider to use the new crawling spec to crawl our site. When it encounters this tag, instead of crawling our site like <em>normal</em>, it will revisit the site using the <code>?_escaped_fragment_=</code> tag.</p>

<p>This assumes that we&rsquo;re using HTML5 mode with the <code>$location</code> service:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">'$location'</span><span class="p">,</span> 
<span class="kd">function</span><span class="p">(</span><span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$location</span><span class="p">.</span><span class="nx">html5Mode</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<p>With the <code>_escaped_fragment_</code> in our query string, we can use our backend server to serve static HTML instead of our client-side app. </p>

<p>Now, our backend can detect if the request has the <code>_escaped_fragment_</code> in the request and and we can serve static HTML back instead of our pure angular app so that the crawler can crawl our site as though it were a static site.</p>

<h2>Options for handling SEO from the server-side</h2>

<p>We have a number of different options available to us to make our site SEO-friendly. We&rsquo;ll walk through three different ways to deliver our apps from the server-side:</p>

<ul>
<li>Using node/express middleware</li>
<li>Use Apache to rewrite URLS</li>
<li>Use nginx to proxy URLS</li>
</ul>

<h3>Using node/express middleware</h3>

<p>To deliver static HTML using NodeJS and Express (the web application framework for NodeJS), we&rsquo;ll add some middleware that will look for the <code>_escaped_fragment_</code> in our query parameters. </p>

<p>In this case, this middleware will only be called if the <code>_escaped_fragment_</code> exists as a query parameter, otherwise it will continue along the call chain.</p>
<pre class="highlight javascript"><span class="c1">// In our app.js configuration
</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_escaped_fragment_</span><span class="p">;</span>

  <span class="c1">// If there is no fragment in the query params
</span>  <span class="c1">// then we're not serving a crawler
</span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fragment</span><span class="p">)</span> <span class="k">return</span> <span class="nx">next</span><span class="p">();</span>

  <span class="c1">// If the fragment is empty, serve the
</span>  <span class="c1">// index page
</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">fragment</span> <span class="o">===</span> <span class="s2">&quot;&quot;</span> <span class="o">||</span> <span class="nx">fragment</span> <span class="o">===</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
    <span class="nx">fragment</span> <span class="o">=</span> <span class="s2">&quot;/index.html&quot;</span><span class="p">;</span>

  <span class="c1">// If fragment does not start with '/'
</span>  <span class="c1">// prepend it to our fragment
</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">fragment</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">!==</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span>
    <span class="nx">fragment</span> <span class="o">=</span> <span class="s1">'/'</span> <span class="o">+</span> <span class="nx">fragment</span><span class="p">;</span>

  <span class="c1">// If fragment does not end with '.html'
</span>  <span class="c1">// append it to the fragment
</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">fragment</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">'.html'</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="nx">fragment</span> <span class="o">+=</span> <span class="s2">&quot;.html&quot;</span><span class="p">;</span>

  <span class="c1">// Serve the static html snapshot
</span>  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/snapshots&quot;</span> <span class="o">+</span> <span class="nx">fragment</span><span class="p">;</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">sendfile</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>This middleware expects our snapshots to exist in a top-level directory called &lsquo;/snapshots&rsquo; and serve files based upon the request path.</p>

<p>For instance, it will serve a request to <code>/</code> as <code>index.html</code>, while it will serve a request to <code>/about</code> as <code>about.html</code> in the snapshots directory.</p>

<h3>Use Apache to rewrite URLS</h3>

<p>If we&rsquo;re using the <a href="http://httpd.apache.org/">apache server</a> to deliver our angular app, we can add a few lines to our configuration that will serve snapshots instead of our javascript app.</p>

<p>We can use the <code>mod_rewrite</code> mod to detect if the route being requested includes the <code>_escaped_fragment_</code> query parameter or not. If it <strong>does</strong> include it, then we&rsquo;ll rewrite the request to point to the static version in the <code>/snapshots</code> directory.</p>

<p>In order to set the rewrite in motion, we&rsquo;ll need to enable the appropriate modules:</p>
<pre class="highlight shell"><span class="gp">$ </span>a2enmod proxy
<span class="gp">$ </span>a2enmod proxy_http
</pre>
<p>Then we&rsquo;ll need to reload the apache config:</p>
<pre class="highlight shell"><span class="gp">$ </span>sudo /etc/init.d/apache2 reload
</pre>
<p>We can set the rewrite rules either in the virtualhost configuration for the site or the <code>.htaccess</code> file that sits at the root of the server directory.</p>
<pre class="highlight shell">RewriteEngine On
Options +FollowSymLinks
RewriteCond %<span class="o">{</span>REQUEST_URI<span class="o">}</span>  ^/<span class="err">$</span>
RewriteCond %<span class="o">{</span>QUERY_STRING<span class="o">}</span> ^_escaped_fragment_<span class="o">=</span>/?<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="err">$</span>
RewriteRule ^<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>/snapshots/%1? <span class="o">[</span>NC,L]
</pre>
<h3>Use nginx to proxy URLS</h3>

<p>If we&rsquo;re using <a href="http://wiki.nginx.org/Main">nginx</a> to serve our angular app, we can add some configuration to serve snapshots of our app if there is an <code>_escaped_fragment_</code> parameter in the query strings.</p>

<p>Unlike Apache, nginx does not require us to enable a module, so we can simply update our configuration to replace the path with the question file instead.</p>

<p>In our nginx configuration file (For instance, <code>/etc/nginx/nginx.conf</code>), ensure your configuration looks like this:</p>
<pre class="highlight shell">server <span class="o">{</span>
  listen 80;
  server_name example;

  <span class="k">if</span> <span class="o">(</span><span class="nv">$args</span> ~ <span class="s2">&quot;_escaped_fragment_=/?(.+)&quot;</span><span class="o">)</span> <span class="o">{</span>
    <span class="nb">set</span> <span class="nv">$path</span> <span class="nv">$1</span>;
    rewrite ^ /snapshots/<span class="nv">$path</span> last;
  <span class="o">}</span>

  location / <span class="o">{</span>
    root /web/example/current/;
    <span class="c"># Comment out if using hash urls</span>
    <span class="k">if</span> <span class="o">(</span>!-e <span class="nv">$request_filename</span><span class="o">)</span> <span class="o">{</span>
      rewrite ^<span class="o">(</span>.<span class="k">*</span><span class="o">)</span><span class="nv">$ </span>/index.html <span class="nb">break</span>;
    <span class="o">}</span>
    index index.html;
  <span class="o">}</span>
<span class="o">}</span>
</pre>
<p>Once this is complete, we&rsquo;re good to reload our configuration:</p>
<pre class="highlight shell">sudo /etc/init.d/nginx reload
</pre>
<h2>Taking snapshots</h2>

<p>We can take snapshots of our HTML app to deliver our backend app, using a tool like <a href="http://phantomjs.org/">PhantomJS</a> or <a href="http://zombie.labnotes.org/">zombie.js</a> to render our pages. When a page is requested by Google using the <code>_escaped_fragment_</code> query parameter, we can simply return and render this page.</p>

<p>We&rsquo;ll discuss two methods to take snapshots, using zombie.js and using a grunt tool. We&rsquo;re not covering using the fantastic <a href="http://phantomjs.org/">PhantomJS</a> tool as there are plenty of great resources that demonstrate it.</p>

<h2>Using Zombie to homebrew snapshots</h2>

<p>To set up <a href="http://zombie.labnotes.org/">zombie.js</a>, we&rsquo;ll need to install the <code>npm</code> package <code>zombie</code>:</p>
<pre class="highlight shell"><span class="gp">$ </span>npm install zombie
</pre>
<p>Now, we&rsquo;ll use NodeJS to save our file using <code>zombie</code>. First, a few helper methods we&rsquo;ll use in the process:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">Browser</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'zombie'</span><span class="p">),</span>
    <span class="nx">url</span>     <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'url'</span><span class="p">),</span>
    <span class="nx">fs</span>      <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">),</span>
    <span class="nx">saveDir</span> <span class="o">=</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">'/snapshots'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">scriptTagRegex</span> <span class="o">=</span> <span class="sr">/&lt;script\b[^&lt;]*(?:(?!&lt;\/script&gt;)&lt;[^&lt;]*)*&lt;\/script&gt;/gi</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">stripScriptTags</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">html</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">scriptTagRegex</span><span class="p">,</span> <span class="s1">''</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">browserOpts</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">waitFor</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>
  <span class="na">loadCSS</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">runScripts</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">saveSnapshot</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">lastIdx</span> <span class="o">=</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">'#/'</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">lastIdx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// If we're using html5mode
</span>    <span class="nx">path</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">uri</span><span class="p">).</span><span class="nx">pathname</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// If we're using hashbang mode
</span>    <span class="nx">path</span> <span class="o">=</span> 
      <span class="nx">uri</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="nx">lastIdx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">uri</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span> <span class="o">===</span> <span class="s1">'/'</span><span class="p">)</span> <span class="nx">path</span> <span class="o">=</span> <span class="s2">&quot;/index.html&quot;</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">'.html'</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="nx">path</span> <span class="o">+=</span> <span class="s2">&quot;.html&quot;</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">saveDir</span> <span class="o">+</span> <span class="nx">path</span><span class="p">;</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="s1">'w'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">fd</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">fs</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">fd</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">};</span>
</pre>
<p>Now all we need to do is run through our pages, turn every link from a relative link into an absolute link (so the crawler can follow them), and save the resulting html.</p>

<p>We&rsquo;re setting a relatively high <code>waitFor</code> in the browser options above. This will cover 90% of the cases we care about. If we want to get more precise on how and when we take a snapshot, instead of waiting the 2 seconds we&rsquo;ll need to modify our angular app to fire an event and listen for the event in our zombie browser. </p>

<p>Since we like to automate as much as possible and prefer not to muck with our angular code, we prefer to set our timeout relatively high to attempt to let the code settle down.</p>

<p>Our <code>crawlPage()</code> function:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">crawlPage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// location = window.location
</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">idx</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">uri</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">idx</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">browser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Browser</span><span class="p">(</span><span class="nx">browserOpts</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="nx">uri</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

      <span class="c1">// Turn links into absolute links
</span>      <span class="c1">// and save them, if we need to
</span>      <span class="c1">// and we haven't already crawled them
</span>      <span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">queryAll</span><span class="p">(</span><span class="s1">'a'</span><span class="p">);</span>
      <span class="nx">links</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">link</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">link</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">'href'</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">absUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="nx">href</span><span class="p">);</span>
        <span class="nx">link</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">'href'</span><span class="p">,</span> <span class="nx">absUrl</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">absUrl</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">arr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">absUrl</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>

      <span class="c1">// Save
</span>      <span class="nx">saveSnapshot</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="nx">browser</span><span class="p">.</span><span class="nx">html</span><span class="p">());</span>
      <span class="c1">// Call again on the next iteration
</span>      <span class="nx">crawlPage</span><span class="p">(</span><span class="nx">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">arr</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>Now we can simply call the method on our first page:</p>
<pre class="highlight javascript"><span class="nx">crawlPage</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;http://localhost:9000&quot;</span><span class="p">]);</span>
</pre>
<h2>Using grunt-html-snapshot</h2>

<p>Our prefered method of taking snapshots is by using the grunt tool <code>grunt-html-snapshot</code>. Since we use <a href="http://yeoman.io">yeoman</a> and grunt is already in our build process, we set up this task to run after we make a release of our apps.</p>

<p>To install <code>grunt-html-snapshot</code>, we&rsquo;ll use npm like so:</p>
<pre class="highlight shell">npm install grunt-html-snapshot --save-dev
</pre>
<p>If we&rsquo;re not using <a href="http://yeoman.io">yeoman</a>, we&rsquo;ll need to include this task as a grunt task in our <code>Gruntfile.js</code>:</p>
<pre class="highlight javascript"><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">'grunt-html-snapshot'</span><span class="p">);</span>
</pre>
<p>Once this is set, we&rsquo;ll set some configuration about our site. To set up configuration, we&rsquo;ll create a new config block in our <code>Gruntfile.js</code> that looks like:</p>
<pre class="highlight javascript"><span class="nx">htmlSnapshot</span><span class="err">:</span> <span class="p">{</span>
  <span class="na">debug</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">options</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">},</span>
  <span class="na">prod</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">options</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>Now we simply get to add our different options for the different stages:</p>
<pre class="highlight javascript"><span class="nx">htmlSnapshot</span><span class="err">:</span> <span class="p">{</span>
  <span class="na">debug</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">options</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">snapshotPath</span><span class="p">:</span> <span class="s1">'snapshots/'</span><span class="p">,</span>
      <span class="na">sitePath</span><span class="p">:</span> <span class="s1">'http://127.0.0.1:9000/'</span><span class="p">,</span>
      <span class="na">msWaitForPages</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
      <span class="na">urls</span><span class="p">:</span> <span class="p">[</span>
        <span class="s1">'/'</span><span class="p">,</span>
        <span class="s1">'/about'</span>
      <span class="p">]</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">prod</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">options</span><span class="p">:</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<p>To see a list of the entire available configuration options, check out the documentation page at <a href="https://github.com/cburgdorf/grunt-html-snapshot">https://github.com/cburgdorf/grunt-html-snapshot</a>.</p>

<h2>Prerender.io</h2>

<p>Alternatively, we can use an open-source tool such as <a href="http://prerender.io/">Prerender.io</a>, which includes a node server that renders our site on-the-fly and an express middleware that communicates with the backend to prerenderHTML on-the-fly.</p>

<p>Essentially, prerender.io will take a url and returns the rendered HTML (with no script tags). Essentially, the prerender server we&rsquo;ll deploy will be called from our app like so:</p>

<p><code>GET http://our-prerenderserver.com/http://localhost:9000/#!/about</code></p>

<p>This GET will return the rendered content of our <code>#/about</code> page.</p>

<p>Setting up a prerender cluster is actually pretty easy to do. We&rsquo;ll also show you how to integrate your own prerender server into your node app. Prerender.io is also avaialble for Ruby on Rails through a gem, but we won&rsquo;t cover how to set it up.</p>

<p>Setting up our own server to run it is pretty easy. Simply run the <code>npm install</code> to install the dependencies and run the command through either foreman or node:</p>
<pre class="highlight shell">npm install
node index.js
<span class="c"># Or through foreman</span>
foreman start
</pre>
<p>The prerender library is also convenient to run on heroku:</p>
<pre class="highlight shell"><span class="gp">$ </span>git clone https://github.com/collectiveip/prerender.git
<span class="gp">$ </span>heroku create
<span class="gp">$ </span>git push heroku master
</pre>
<p>We store our rendered HTML in S3, so we recommend you use the built-in s3 cache. Read the docs how to set this up <a href="https://github.com/collectiveip/prerender#s3-html-cache">here</a>.</p>

<p>After our server is running, we just need to integrate the fetching through our app. In express, this is very easy using the node library <code>prerender-node</code>.</p>

<p>To install <code>prerender-node</code>, we&rsquo;ll use npm:</p>
<pre class="highlight shell"><span class="gp">$ </span>npm install --save prerender-node
</pre>
<p>After this is installed, we&rsquo;ll tell our express app to use this middleware:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">prerender</span> <span class="o">=</span> 
  <span class="nx">require</span><span class="p">(</span><span class="s1">'prerender-node'</span><span class="p">).</span><span class="nx">set</span><span class="p">(</span><span class="s1">'prerenderServiceUrl'</span><span class="p">,</span> <span class="s1">'http://our-prerenderserver.com/'</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">prerender</span><span class="p">);</span>
</pre>
<p>And that is it! This tells our express app that if we see a crawler request (defined by having the <code>_escaped_fragment_</code> or the user agent string), then make a GET request to our prerender service at the appropriate url and get the prerendered HTML for the page.</p>

<h2>Professional alternatives</h2>

<p>Although we present a relatively easy methods of creating SEO opportunities for our apps, it does take work to set it up and maintain. There are definitely professional services that offer SEO as a service. </p>

<p>We recommend one of our sponsors, <a href="http://www.brombone.com/">brombone</a> that has fantastic service and great service.</p>

<p>Other professional SEO services include:</p>

<ul>
<li><a href="http://getseojs.com/">SEO.js</a>, which provides node/express middleware.</li>
<li><a href="http://www.seo4ajax.com/">SEO4Ajax</a> also looks and acts very simple to implement as well. Definitely worth checking out.</li>
<li><a href="http://www.rankjs.com/">RankJS</a>, completely free and looks like a good service (from what we can tell).</li>
</ul>

<p>If you enjoyed this post, you should really check out our upcoming book at <a href="http://www.ng-book.com/">ng-book.com</a>. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html">The Definitive Guide to Angular on Mobile</title>
    <link href="http://www.ng-newsletter.com/posts/angular-on-mobile.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/angular-on-mobile.html"/>
    <updated>2013-10-15T00:00:00-07:00</updated>
    <id>urn:uuid:eaafd1b1-ace0-5f60-9d1a-265e55b733e6</id>
    <summary>Mobile apps are not the next frontier for software developers, they’re already here. There are already 1.2 billion mobile web app users and that number is growing rapidly (Wikipedia). Soon, the number of mobile devices will exceed the number of people...</summary>
    <content type="html"><![CDATA[<p>Mobile apps are <strong>not</strong> the <em>next frontier</em> for software developers, they&rsquo;re already here. There are already 1.2 billion mobile web app users and that number is growing rapidly (<a href="http://en.wikipedia.org/wiki/List_of_countries_by_number_of_mobile_phones_in_use">Wikipedia</a>). Soon, the number of mobile devices will exceed the number of people on the planet. At the rate at which the number of mobile devices is growing, it&rsquo;s estimated that 5.1 billion people will be using mobile phones by 2017. </p>

<p>For us as app developers, it&rsquo;s important that we develop for mobile technology if we want to stay relevant. With AngularJS, we have some great support for mobile, written by both the Angular team and the community.</p>

<p>In this article, we&rsquo;re going to work through these two different ways to give our users a mobile experience for our app:</p>

<ul>
<li><a href="#responsive">Responsive web apps</a></li>
<li><a href="#native">Native with Cordova</a></li>
</ul>

<div id="responsive"></div>

<h2>Responsive web apps</h2>

<p>The easiest way to support mobile with Angular is by using tools we already know and love, HTML and CSS, to create a mobile-ready Angular app. Since Angular apps are already based on HTML, making our designs and interaction responsive is only a matter of building the architecture to support different devices.</p>

<h2>Interaction</h2>

<p>For the desktop, the ability to create interactions is already available to us through the <code>ng-click</code> and family directives. </p>

<p>Starting from Angular version 1.2.0 and on, we now have the ability to use touch events thanks to the new <code>ngTouch</code> module. Since <code>ngTouch</code> is not built in to the core Angular library, we&rsquo;ll need to install the library.</p>

<h3>Installation</h3>

<p>Installing <code>ngTouch</code> can be done in several ways. The simplest way to install the <code>ngTouch</code> module is by downloading the source from <a href="http://angularjs.org/">angularjs.org</a>. </p>

<p>Find the <code>extras</code> in the download article, and we&rsquo;ll download and store the <code>ng-touch.js</code> file into an accessible location in our app.</p>

<p>Alternatively, we can use <a href="#bower">Bower</a> to install <code>angular-touch</code>:</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install angular-touch --save
</pre>
<p>Either way, we&rsquo;ll need to reference the library in our <code>index.html</code> as a script:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/bower_components/angular-touch/angular-touch.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Finally, let&rsquo;s include <code>ngTouch</code> as a dependency in our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngTouch'</span><span class="p">]);</span>
</pre>
<p>Now we&rsquo;re ready to take advantage of the <code>ngTouch</code> library.</p>

<h3>ngTouch</h3>

<p>Mobile browsers work slightly differently than desktop browsers when dealing with click events. Mobile browsers detect a <em>tap</em> event and then wait about 300 ms or so to detect any other taps, for instance if we&rsquo;re double-tapping the device. After this delay, the browser fires a click event.</p>

<p>This delay can make our apps feel incredibly unresponsive. Instead of dealing with the <code>click</code> event, we can detect <code>touch</code> events instead. </p>

<p>The <code>ngTouch</code> library seamlessly handles this detection for us through the <code>ng-click</code> directive and will take care of calling the <em>correct</em> click event for us. This so-called fast click event will be called. </p>

<blockquote>
<p>After the <em>fast</em> click has been called, the browser&rsquo;s delayed click will then be called, causing a &lsquo;double&rsquo; action. <code>ngTouch</code> takes care of this action for us.</p>
</blockquote>

<p>Using the <code>ngClick</code> directive on mobile devices works exactly same way on mobile browsers as it does on desktop browsers:</p>
<pre class="highlight html"><span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;save()&quot;</span><span class="nt">&gt;</span>Save<span class="nt">&lt;/button&gt;</span>
</pre>
<p><code>ngTouch</code> also introduces two new directives: the <em>swipe</em> directives. These swipe directives allow us to capture user swipes, either left or right across the screen. These are useful for situations where we want the user to be able to swipe to the next photo gallery photo or to a new portion of our app.</p>

<p>The <code>ngSwipeLeft</code> directive detects when an element is swiped from the right to the left, while the <code>ngSwipeRight</code> directive detects when an element is swiped from the left to the right.</p>

<blockquote>
<p>One of the nice features the <code>ngSwipe*</code> directives give us is that they work both with touch-based devices as well as mouse clicking and dragging.</p>
</blockquote>

<p>It is easy to use the <code>ngSwipeLeft</code> and <code>ngSwipeRight</code> directives. For instance, let&rsquo;s say we have a list of emails and we want to reveal actions for each email, like the popular mobile email client MailboxApp.</p>

<p>We can easily implement this functionality using these swipe directives on our list of elements. When we are showing our list of emails, we&rsquo;ll enable swiping in one direction to show the actions we can take on that particular mail item. </p>

<p>When we are showing actions for the mail item, we&rsquo;ll enabled swiping in the other direction to hide the actions we can take.</p>
<pre class="highlight html"><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;mail in emails&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> 
      <span class="na">ng-show=</span><span class="s">&quot;!mail.showActions&quot;</span>
      <span class="na">ng-swipe-left=</span><span class="s">&quot;mail.showActions=true&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;from&quot;</span><span class="nt">&gt;</span>
        From: <span class="nt">&lt;span&gt;</span>{{ mail.from }}<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;body&quot;</span><span class="nt">&gt;</span>
        {{ mail.body }}
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span>
      <span class="na">ng-show=</span><span class="s">&quot;mail.showActions&quot;</span>
      <span class="na">ng-swipe-right=</span><span class="s">&quot;mail.showActions=false&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;actions&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;li&gt;&lt;button&gt;</span>Archive<span class="nt">&lt;/button&gt;&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;&lt;button&gt;</span>Trash<span class="nt">&lt;/button&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;/ul&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<h4>See it</h4>

<div id="maildemo" ng-controller="MailCtrl">
  <ul>
    <li ng-repeat="mail in emails">
      <div 
        ng-show="!mail.showActions"
        ng-swipe-right="mail.showActions=true"
        class="animatedItem right mail">
        <div class="from">
          From: <span>{{ mail.from }}</span>
        </div>
        <div class="to">
          To: <span>{{ mail.to }}</span>
        </div>
        <div class="body">
          {{ mail.body }}
        </div>
      </div>
      <div
        ng-swipe-left="mail.showActions=false"
        class="actions">
          <button>Archive</button>
          <button>Trash</button>
      </div>
    </li>
  </ul>
</div>

<h3>$swipe service</h3>

<p>For more <em>custom</em> touch-based animations, we can use the <code>$swipe</code> service directly. The <code>$swipe</code> service is a service that abstracts the details of hold-and-drag swiping behavior.</p>

<p>The <code>$swipe</code> service has a single method called <code>bind()</code>. This <code>bind()</code> method takes an element on which it will bind the swipe actions as well as an object with four event handlers.</p>

<p>These event handlers get called with an object containing the coordinates object, like so: <code>{ x: 200, y: 300 }</code>.</p>

<p>The four events handlers are handlers that handle the following events:</p>

<h4>start</h4>

<p>The <code>start</code> event is fired on either a <code>mousedown</code> or a <code>touchstart</code> event. After this event, the <code>$swipe</code> service sets up watches for <code>touchmove</code> and <code>mousemove</code> events. To prevent accidental swipes, these events are only fired until the <strong>total</strong> distance moved exceeds a small distance.</p>

<p>Once a movement has surpassed this distance, then one of two events happens:</p>

<ul>
<li>If the vertical delta is greater than the horizontal, the browser takes over as a scroll event.</li>
<li>If the horizontal delta is greater than the vertical delta, the action is viewed as a swipe, and our <code>move</code> and <code>end</code> events are set to follow the swipe.</li>
</ul>

<h4>move</h4>

<p>The <code>move</code> event is called on <code>mousemove</code> and <code>touchmove</code> events only after the <code>$swipe</code> service has determined that a swipe is, in fact, in progress.</p>

<h4>end</h4>

<p>The <code>end</code> event is fired when we&rsquo;ve finished with a <code>touchend</code> or a <code>mouseup</code> event after the <code>move</code> event has been fired.</p>

<h4>cancel</h4>

<p>The <code>cancel</code> event is called on either a <code>touchcancel</code> or when we begin scrolling after the <code>start</code> event instead.</p>

<p>For instance, we can create a directive that enables swiping between slides that might control a projector screen. To handle swiping on the mobile control, we&rsquo;ll use the <code>$swipe</code> service to handle our custom logic for how to display the UI layer.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'mySlideController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$swipe'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$swipe</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">startX</span><span class="p">,</span> <span class="nx">pointX</span><span class="p">;</span>

        <span class="nx">$swipe</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="p">{</span>
          <span class="s1">'start'</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">coords</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">startX</span> <span class="o">=</span> <span class="nx">coords</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
            <span class="nx">pointX</span> <span class="o">=</span> <span class="nx">coords</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span>
          <span class="p">},</span>
          <span class="s1">'move'</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">coords</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">delta</span> <span class="o">=</span> <span class="nx">coords</span><span class="p">.</span><span class="nx">x</span> <span class="o">-</span> <span class="nx">pointX</span><span class="p">;</span>
            <span class="c1">// ...
</span>          <span class="p">},</span>
          <span class="s1">'end'</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">coords</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...
</span>          <span class="p">},</span>
          <span class="s1">'cancel'</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">coords</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ...
</span>          <span class="p">}</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<h3>angular-gestures and multi-touch gestures</h3>

<p>Angular-gestures is an Angular module that gives us the ability to handle multi-touch in our Angular apps. It is based on the very popular and well-tested <a href="http://eightmedia.github.io/hammer.js/">Hammer.js</a> library.</p>

<p>The Hammer.js library gives us a bunch of events common to touchscreen events:</p>

<ul>
<li>Tap</li>
<li>DoubleTap</li>
<li>Swipe</li>
<li>Drag</li>
<li>Pinch</li>
<li>Rotate</li>
</ul>

<p>The <code>angular-gestures</code> library enables us to use these events through Angular directives. For instance, all of these directives are available to us:</p>

<ul>
<li>hmDoubleTap</li>
<li>hmDragStart</li>
<li>hmDrag</li>
<li>hmDragUp</li>
<li>hmDragDown</li>
<li>hmDragLeft</li>
<li>hmDragRight</li>
<li>hmDragEnd</li>
<li>hmHold</li>
<li>hmPinch</li>
<li>hmPinchIn</li>
<li>hmPinchOut</li>
<li>hmRelease</li>
<li>hmRotate</li>
<li>hmSwipe</li>
<li>hmSwipeUp</li>
<li>hmSwipeDown</li>
<li>hmSwipeLeft</li>
<li>hmSwipeRight</li>
<li>hmTap</li>
<li>hmTouch</li>
<li>hmTransformStart</li>
<li>hmTransform</li>
<li>hmTransformEnd</li>
</ul>

<h3>angular-gestures installation</h3>

<p>To install the <code>angular-gestures</code> library in our app, we&rsquo;ll need to include the <code>gestures.js</code> (or <code>gestures.min.js</code>) library in our page. </p>

<p>We can either download the <code>gestures.js</code> files directly from the GitHub page at <a href="https://github.com/wzr1337/angular-gestures">https://github.com/wzr1337/angular-gestures</a>, or we can use Bower to install it. </p>

<p>To install <code>angular-gestures</code> using Bower, use the following command:</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install --save angular-gestures
</pre>
<p>Lastly, we&rsquo;ll need to set <code>angular-gestures</code> as a dependency for our Angular app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'angular-gestures'</span><span class="p">]);</span>
</pre>
<h3>Using angular-gestures</h3>

<p>From here, Angular gestures are really easy to use. Gestures are just Angular directives, so we&rsquo;ll use them the same way we use any other directives in our app.</p>

<p>Let&rsquo;s say that we want to allow users to rotate, pinch, and zoom photos in a photo gallery. We can use the Hammer.js library to handle this for us.</p>

<p>In this example, we&rsquo;ll set a <em>random</em> translation on the element only for <em>double taps</em>. To do this, we&rsquo;ll set up our HTML, this time using the <code>hm-tap</code> directive. </p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;photowrapper&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;cardProps&quot;</span> 
        <span class="na">hm-tap=</span><span class="s">&quot;tapped($event)&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tradingcard&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/img/ari.jpeg&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;span&gt;</span>Ari<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tradingcard&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/img/nate.jpeg&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;span&gt;</span>Nate<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>There is nothing incredibly special about this HTML, other than the fact that we have a directive called: <code>hm-tap</code>. This is the <code>angular-gestures</code> directive that will handle our actions when the image is tapped.</p>

<blockquote>
<p>The Hammer.js directives can take angular expressions, so we can call functions or run actions inside of them (just like <code>ng-click</code>, for example) and they also can take Hammer.js options.</p>
</blockquote>

<p>In the example above, we&rsquo;re calling a function that we&rsquo;ll be defined on our <code>$scope</code> as <code>tapped()</code>. This function looks like this:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">tapped</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$event</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ele</span> <span class="o">=</span> <span class="nx">$event</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">200</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
      <span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
      <span class="nx">z</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
      <span class="nx">rot</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">360</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
  <span class="nx">$</span><span class="p">(</span><span class="nx">ele</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
    <span class="s1">'transform'</span><span class="err">:</span> 
      <span class="s2">&quot;translate3d(&quot;</span><span class="o">+</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;px,&quot;</span><span class="o">+</span><span class="nx">y</span><span class="o">+</span><span class="s2">&quot;px,&quot;</span><span class="o">+</span><span class="nx">z</span><span class="o">+</span><span class="s2">&quot;px)&quot;</span> <span class="o">+</span>
      <span class="s2">&quot;rotate(&quot;</span><span class="o">+</span><span class="nx">rot</span><span class="o">+</span><span class="s2">&quot;deg)&quot;</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre>
<p>The <code>angular-gestures</code> library gives us access to the event through a special argument called <code>$event</code>. We&rsquo;ll use the event&rsquo;s target (<code>$event.target</code>) to determine which element our user clicks on and then we can go crazy and do all sorts of neat tricks with the element.</p>

<h4>See it</h4>

<div ng-controller="PhotoCtrl">
  <div id="photowrapper">
      <div class="imgProps" 
          hm-tap="tapped($event)"
          >
          <div class="polaroid">
            <img src="/img/ari.jpeg" alt="" />
            <span>Ari</span>
          </div>
          <div class="polaroid">
            <img src="/img/nate.jpeg" alt="" />
            <span>Nate</span>
          </div>
      </div>
  </div>
</div>

<div id="native"></div>

<h2>Native applications with Cordova</h2>

<p>Cordova is a free, open-source framework that allows us to create mobile apps using standard web APIs, instead of native code. It enables us to write mobile applications using HTML, JavaScript, CSS, and AngularJS instead of needing to write Objective-C or Java (for iOS or Android, respectively).</p>

<p><img alt="Cordova" src="/images/mobile/cordova.png" /></p>

<p>Cordova exposes native device access through JavaScript APIs that allow us to run device-specific operations, such as getting the native location or using the camera. It is built to support the plugin architecture so we can take advantage of Cordova community-built plugins, such as native audio access or barcode scanning plugins.</p>

<p>One of the benefits of using Cordova is that we can reuse our Angular app code to support the mobile environment. Of course, there are a few issues that we&rsquo;ll deal with, such as performance and native component access.</p>

<h3>Installation</h3>

<p>Cordova itself is distributed as an npm package, so we&rsquo;ll use npm to install it. </p>

<blockquote>
<p>If you do not have npm installed, make sure you have <code>node</code> installed. For information on installing NodeJS, read the <a href="#node">Next Steps</a> chapter.</p>
</blockquote>
<pre class="highlight shell"><span class="gp">$ </span>npm install -g cordova
</pre>
<p><img alt="Installing Cordova" src="/images/mobile/install_cordova.png" /></p>

<p>The Cordova package includes a generator that will create our app and make it Cordova-ready.</p>

<h2>Getting started with Cordova</h2>

<p>Getting started with Cordova is simple. We&rsquo;ll use the generator to create the starting point of our Cordova app. We&rsquo;ll call the app <code>GapApp</code>.</p>

<p>The generator takes up to three parameters:</p>

<ul>
<li>project-directory (required)</li>
</ul>

<p>The directory where we&rsquo;ll create the app</p>

<ul>
<li>package-id</li>
</ul>

<p>The ID of the project (the package name in reverse-domain style)</p>

<ul>
<li>name</li>
</ul>

<p>The package name (name of the application)</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova create gapapp io.fullstack.gapapp <span class="s2">&quot;GapApp&quot;</span>
</pre>
<p>This line will set up a directory called <code>gapapp</code> (identified by the first parameter) with a package ID <code>io.fullstack.gapapp</code> and the project name <code>GappApp</code>.</p>

<p><img alt="Cordova file structure" src="/images/mobile/cordova_generated.png" /></p>

<p>The Cordova team has broken Cordova into plugins so that we don&rsquo;t need to include platforms we won&rsquo;t be building for (and thus making it easier to develop support for other platforms). That means that we&rsquo;ll need to add to our project any platforms for which we&rsquo;re interested in developing.</p>

<p>For this project, we&rsquo;ll assume the rest of these commands are run from <em>inside</em> the project directory:</p>
<pre class="highlight shell"><span class="gp">$ </span><span class="nb">cd </span>gapapp/
</pre>
<p>We&rsquo;ll be building for iOS (although the process is the same for other platforms). To add iOS as a platform, simply add it to the project using the following Cordova command:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova platform add ios
</pre>
<blockquote>
<p>For this command to work, we&rsquo;ll need to ensure we have the iOS SDK installed using XCode. Download the iOS SDK and XCode at <a href="https://developer.apple.com/">developer.apple.com</a>.</p>
</blockquote>

<p>Once you have that set, build the basic app:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova build ios
</pre>
<p>Now, due to some intricacies with Apple&rsquo;s developer tools, we will have to build the app ourselves to get it to run on our local iOS simulator. </p>

<p>Let&rsquo;s navigate to our app directory, where we&rsquo;ll find the platforms directory. Inside of it, we&rsquo;ll find the <code>io/</code> directory that was created for us by the <code>platform add</code> command above. </p>

<p><img alt="Generated project" src="/images/mobile/project.png" /></p>

<p>In XCode, open the project that we created with said command. Make sure the simulator is shown in the platform identifier at the top of XCode.</p>

<p><img alt="Build in XCode" src="/images/mobile/build_in_xcode.png" /></p>

<p>Click run.</p>

<p>Once you have done so, we should see the basic Cordova app start to run in our simulator.</p>

<p><img alt="Barebones Cordova app" src="/images/mobile/bear_sim.png" /></p>

<h3>Development workflow with Cordova</h3>

<p>Cordova powers the <code>PhoneGap</code> project, which has been accepted into the Apache Foundation. The project itself includes a command-line tool that we&rsquo;ll use to interact with our native app, from creation to deployment.</p>

<h3>Platforms</h3>

<p>At this point, we&rsquo;ve created our app and added a platform (in this case, iOS). </p>

<blockquote>
<p>Available platforms for the <code>Cordova</code> app vary depending on which development environment we&rsquo;re using. On a Mac, the available platforms are:</p>
</blockquote>

<ul>
<li>iOS</li>
<li>Android</li>
<li>Blackberry10</li>
<li>Firefox OS</li>
</ul>

<p>For a Windows machine, we can develop for the following platforms:</p>

<ul>
<li>Android</li>
<li>Windows Phone 7</li>
<li>Windows Phone 8</li>
<li>Windows8</li>
<li>Blackberry10</li>
<li>Firefox OS</li>
</ul>

<p>If we forget which platforms are available, we can run the <code>platforms</code> command to check which are available and installed:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova platforms ls
</pre>
<p>To add a platform, we can use the <code>platform add</code> command (as we&rsquo;ve done above):</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova platform add android
</pre>
<p>To remove one, we can use the <code>rm</code> or <code>remove</code> command:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova platform rm blackberry10
</pre>
<h3>Plugins</h3>

<p>Cordova is built to be incredibly modular, with the expectation that we will install all of the non-core components with the plugin system. To add a plugin to our project, we&rsquo;ll use the <code>plugin add</code> command:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-geolocation.git
</pre>
<p>We can list the current plugins that we have installed using the <code>plugins ls</code> command:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova plugins ls
<span class="o">[</span> <span class="s1">'org.apache.cordova.geolocation'</span> <span class="o">]</span>
</pre>
<p>Finally, we can remove a plugin using the <code>plugin rm</code> command:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova plugins rm org.apache.cordova.geolocation
</pre>
<h3>Building</h3>

<p>By default, Cordova creates a skeleton project that houses the web files in <code>www/</code> directory in the project directory. When Cordova builds the project, it copies these files and places them in their platform-specific directories.</p>

<p>To build the app, we&rsquo;ll use another Cordova command, the <code>build</code> command:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova build
</pre>
<p>Without specifying any platform to build for, this command will build for all of the platforms we&rsquo;ve listed in our project.</p>

<p>We can limit the scope by building only for specific platforms, such as:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova build ios
<span class="gp">$ </span>cordova build android
</pre>
<blockquote>
<p>The <code>build</code> command will ensure that the necessary platform-specific code is set so our app can be compiled. In effect, we&rsquo;re doing the same thing as calling <code>cordova prepare &amp;&amp; cordova compile</code>. </p>
</blockquote>

<h3>Emulating and running</h3>

<p>Cordova also makes it possible to run an emulator in order to simulate running the app on a device. Doing so is, of course, only possible if an emulator is installed and set up on our local development environment.</p>

<p>Assuming our emulator is set up in our development environment, we can tell Cordova to launch and install our app in our emulator:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova emulate ios
</pre>
<blockquote>
<p>For iOS, we may have to build the project (as we did above) using XCode if the emulator environment is not set up on our machine.</p>
</blockquote>

<p>It&rsquo;s also possible to run the application on a particular device by using the <code>run</code> command instead. The <code>run</code> command will launch the application on a device or on the emulator if no device is found and available. </p>
<pre class="highlight shell"><span class="gp">$ </span>cordova run ios
</pre>
<h3>In development</h3>

<p>It can be cumbersome to make a change to one part of our app and need to recompile the app to see the changes reflected in our app. To help speed the process of developing the web app side of the app, we can use the <code>serve</code> command to serve a local version of our <code>www/</code> folder to a web browser.</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova serve ios
Static file server running at
  <span class="o">=</span>&gt; http://0.0.0.0:8000/
CTRL + C to shutdown
</pre>
<p>Now, we can use our web browser and navigate to the URL: <code>http://localhost:8000/ios/www/index.html</code>. Our app&rsquo;s <code>www/</code> folder is being served through HTTP, so we can build it and watch it change as we make changes to the app.</p>

<p>When we make changes, we&rsquo;ll need to make sure we rebuild the app:</p>
<pre class="highlight shell"><span class="gp">$ </span>cordova build ios
</pre>
<p><img alt="Building using Safari" src="/images/mobile/serve_safari.png" /></p>

<h3>Angular Cordova Service</h3>

<p>When our Cordova app is ready, the device has connected, and everything is ready to go, Cordova will fire the browser event called <code>deviceready</code>.</p>

<p>With Angular, we can either bootstrap the app <em>after</em> this event has been fired or we can use promises to handle our logic after the <code>deviceready</code> event has been fired.</p>

<p>To bootstrap the app after we&rsquo;ve received the <code>deviceready</code> event, we&rsquo;ll need to set an event listener for the event and then manually call bootstrap on our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[]);</span>

<span class="kd">var</span> <span class="nx">onDeviceReady</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">bootstrap</span><span class="p">(</span> <span class="nb">document</span><span class="p">,</span> <span class="p">[</span><span class="s1">'myApp'</span><span class="p">]);</span>
<span class="p">}</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'deviceready'</span><span class="p">,</span> 
<span class="nx">onDeviceReady</span><span class="p">);</span>
</pre>
<p>We prefer to use an alternative method of listening for the <code>deviceready</code> event that uses promises to set up execution bindings for after the <code>deviceready</code> event has been fired. </p>

<p>We&rsquo;ll set up an Angular module that will listen for the <code>deviceready</code> event. We&rsquo;ll use a service that will listen for the <code>deviceready</code> event and resolve our promises depending on whether the event has been fired.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'fsCordova'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">service</span><span class="p">(</span><span class="s1">'CordovaService'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$document'</span><span class="p">,</span> <span class="s1">'$q'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$document</span><span class="p">,</span> <span class="nx">$q</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">(),</span>
        <span class="nx">resolved</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ready</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>

    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'deviceready'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">resolved</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// Check to make sure we didn't miss the 
</span>    <span class="c1">// event (just in case)
</span>    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">resolved</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">)</span> <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">cordova</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<p>Now, we&rsquo;ll set the <code>fsCordova</code> as a dependency for our module:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'fsCordova'</span><span class="p">])</span>
<span class="c1">// ...
</span></pre>
<p>We can use the <code>CordovaService</code> to determine if Cordova is, in fact, ready, and we can set our logic to depend upon the service being ready:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'fsCordova'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MyController'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">CordovaService</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">CordovaService</span><span class="p">.</span><span class="nx">ready</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Cordova is ready
</span>    <span class="p">});</span>
<span class="p">});</span>
</pre>
<h2>Including Angular</h2>

<p>With the bare Cordova app, we only have a bare JavaScript app that hides and displays the JavaScript view in <code>js/index.js</code>.</p>

<p>We can introduce Angular into the workflow very simply. As we are building a native app, including Angular from a CDN is not ideal; instead, we&rsquo;ll include the necessary components directly into the app. </p>

<p>We can use <a href="#bower">Bower</a> for more complex setups, but for the time being, we&rsquo;ll keep it simple.</p>

<p>To get our Angular app building, we&rsquo;ll need to download Angular from <a href="http://angularjs.org/">angularjs.org</a> and store it in a directory accessible by our <code>index.html</code>. We recommend <code>www/js/vendor/angular.js</code>.</p>

<p>Once that&rsquo;s set, we can start building our Angular app. We&rsquo;ll need to include the JavaScript file in our <code>www/index.html</code>. </p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/vendor/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Now, we can replace all of the contents of the <code>js/index.js</code> file with our Angular app and develop our app like normal.</p>

<h3>Development workflow</h3>

<p>When building our app, we&rsquo;ll use the following workflow:</p>

<ul>
<li>Start our local server (Cordova serve [platform])</li>
<li>Edit our app</li>
<li>Rebuild our app (Cordova build [platform])</li>
</ul>

<p>This flow, although somewhat cumbersome, is how we&rsquo;ll edit our app. </p>

<p>If our app doesn&rsquo;t rely on the Cordova platform, we can edit outside of the simulator and in our web browser (e.g., Chrome). In this case, we can work specifically with building our app, instead of needing to rebuild and redeploy the app.</p>

<p>We have included a bunch more information about more mobile workflows in our upcoming book, <a href="http://ng-book.com/">ng-book: The Complete Book on AngularJS</a>. </p>

<p>It&rsquo;s clear that mobile is here to stay and Angular is a <strong>very</strong> powerful framework that can already get us incredibly far in building mobile experiences for our users. As we&rsquo;ve seen, we can deliver both mobile web experiences as well as native apps using AngularJS.</p>

<style type="text/css">
.animatedItem {
  position: relative;
}
@-webkit-keyframes slideInLeft {
  0% {
    opacity: 0;
    -webkit-transform: translateX(-2000px);
  }

  100% {
    -webkit-transform: translateX(0);
  }
}

@-moz-keyframes slideInLeft {
  0% {
    opacity: 0;
    -moz-transform: translateX(-2000px);
  }

  100% {
    -moz-transform: translateX(0);
  }
}

@-o-keyframes slideInLeft {
  0% {
    opacity: 0;
    -o-transform: translateX(-2000px);
  }

  100% {
    -o-transform: translateX(0);
  }
}

@keyframes slideInLeft {
  0% {
    opacity: 0;
    transform: translateX(-2000px);
  }

  100% {
    transform: translateX(0);
  }
}

@-webkit-keyframes slideInRight {
  0% {
    opacity: 0;
    -webkit-transform: translateX(2000px);
  }

  100% {
    -webkit-transform: translateX(0);
  }
}

@-moz-keyframes slideInRight {
  0% {
    opacity: 0;
    -moz-transform: translateX(2000px);
  }

  100% {
    -moz-transform: translateX(0);
  }
}

@-o-keyframes slideInRight {
  0% {
    opacity: 0;
    -o-transform: translateX(2000px);
  }

  100% {
    -o-transform: translateX(0);
  }
}

@keyframes slideInRight {
  0% {
    opacity: 0;
    transform: translateX(2000px);
  }

  100% {
    transform: translateX(0);
  }
}

@-webkit-keyframes slideOutLeft {
  0% {
    -webkit-transform: translateX(0);
  }

  100% {
    opacity: 0;
    -webkit-transform: translateX(-2000px);
  }
}

@-moz-keyframes slideOutLeft {
  0% {
    -moz-transform: translateX(0);
  }

  100% {
    opacity: 0;
    -moz-transform: translateX(-2000px);
  }
}

@-o-keyframes slideOutLeft {
  0% {
    -o-transform: translateX(0);
  }

  100% {
    opacity: 0;
    -o-transform: translateX(-2000px);
  }
}

@keyframes slideOutLeft {
  0% {
    transform: translateX(0);
  }

  100% {
    opacity: 0;
    transform: translateX(-2000px);
  }
}

@-webkit-keyframes slideOutRight {
  0% {
    -webkit-transform: translateX(0);
  }

  100% {
    opacity: 0;
    -webkit-transform: translateX(2000px);
  }
}

@-moz-keyframes slideOutRight {
  0% {
    -moz-transform: translateX(0);
  }

  100% {
    opacity: 0;
    -moz-transform: translateX(2000px);
  }
}

@-o-keyframes slideOutRight {
  0% {
    -o-transform: translateX(0);
  }

  100% {
    opacity: 0;
    -o-transform: translateX(2000px);
  }
}

@keyframes slideOutRight {
  0% {
    transform: translateX(0);
  }

  100% {
    opacity: 0;
    transform: translateX(2000px);
  }
}

/* Mail slide out */
.animatedItem.right.ng-hide-add {
  -webkit-animation: 0.5s slideOutRight;
  -moz-animation: 0.5s slideOutRight;
  -o-animation: 0.5s slideOutRight;
  animation: 0.5s slideOutRight;
}
/* Reveal mail */
.animatedItem.right.ng-hide-remove {
  -webkit-animation: 0.5s slideInRight;
  -moz-animation: 0.5s slideInRight;
  -o-animation: 0.5s slideInRight;
  animation: 0.5s slideInRight;

  display: block !important;
}

.animatedItem.right.ng-hide-remove-active {
  width: 100%;
}
#article article.post img {
  width: 75%;
}
#maildemo {
  height: 500px;
  overflow: auto;
  position: relative;
}
#maildemo ul {
  list-style-type: none;
  width: 100%;
}
#maildemo ul li {
  position: relative;
  height: 11rem;
  margin: 0.5em 0;
  overflow: hidden;
}

#maildemo .actions,
#maildemo .mail {
  width: 100%;
  overflow: hidden;
  position: absolute;
}
#maildemo .mail {
  top: 0;
  border-bottom: 1px solid #e2e2e2;
  z-index: 10;
  background-color: #fff;
}
#maildemo .mail span {
  font-weight: 600;
}
#maildemo .actions {
  top: 40px;
  left: 0;
  z-index: 0;
  height: 100%;
}

#photowrapper {
  height: 450px;
  width: 100%;
  overflow: hidden;
   -webkit-transform: translate3d(0,0,0);
   transform: translate3d(0,0,0);
}
      
.polaroid {
  text-align: center;
  padding: 10px 10px 25px 10px;
  background: #fff;
  border: 1px solid #fff;
  -moz-box-shadow: 0px 2px 5px #333;
  -webkit-box-shadow: 0px 2px 5px #333;
  border: 1px solid #dfdfdf;
  border: 1px solid rgba(96,96,96,0.2);  
  font-family:"Arial";
  font-size:16px;
  color:#000;
  padding-top: 10px;
  padding-bottom:10px;
  text-shadow:#333;
}
.imgProps{   
  height: 240px;
  width: 230px;
  position:absolute;
}
.polaroid span {
  position: relative;
  top: 5px;
}
.polaroid .slider {
  -webkit-animation: 0.5s slideInRight;
  -moz-animation: 0.5s slideInRight;
  -o-animation: 0.5s slideInRight;
  animation: 0.5s slideInRight;
}
</style>

<script type="text/javascript">
  angular.module('mobileDemoApp', [
    'ngAnimate',
    'ngTouch',
    'angular-gestures'
  ])
  .controller('MailCtrl', function($scope) {
    var msg = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
    $scope.emails = [
      {from: "Ari", to: "Q", body: msg},
      {from: 'Sean', to: 'Anand', body: msg},
      {from: 'Q', to: 'Sean', body: msg}
    ]
  })
  .controller('PhotoCtrl', function($scope) {
    $scope.tapped = function($event) {
      var ele = $event.target;
      var x = Math.floor(Math.random() * 200) + 1,
          y = Math.floor(Math.random() * 100) + 1,
          z = Math.floor(Math.random() * 6) + 1,
          rot = Math.floor(Math.random()*360)+1;
      $(ele).css({
        'transform': 
          "translate3d("+x+"px,"+y+"px,"+z+"px)" +
          "rotate("+rot+"deg)"
      });
    }
  });
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Angular Animation - Under the Hood</title>
    <link href="http://www.ng-newsletter.com/posts/angular-animation.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/angular-animation.html"/>
    <updated>2013-10-07T00:00:00-07:00</updated>
    <id>urn:uuid:4a308da6-c992-5333-b17e-84d64692b68f</id>
    <summary>
In this article, we aim to show you how animation works inside of AngularJS rather than demonstrate the breadth of ngAnimate’s functionality. 


The latest version of Angular (1.2.0 and beyond) now includes support for animations in our already feature...</summary>
    <content type="html"><![CDATA[<blockquote>
<p>In this article, we aim to show you how animation works inside of AngularJS rather than demonstrate the breadth of <code>ngAnimate</code>&rsquo;s functionality. </p>
</blockquote>

<p>The latest version of Angular (1.2.0 and beyond) now includes support for animations in our already feature-packed framework. </p>

<p>With animation built into the framework, it&rsquo;s simple to integrate fluid animations into our applications in a simple, nonintrusive manner.</p>

<p>The Angular team created the <code>ngAnimate</code> module to give our Angular apps hooks into providing CSS and JavaScript. </p>

<p>There are several ways to make animations in an Angular app:</p>

<ul>
<li>Using CSS3 Transitions</li>
<li>Using CSS3 Animations</li>
<li>Using JavaScript animations</li>
</ul>

<h2>Installation</h2>

<p>Since 1.2.0.rc1, animations have been pulled out of the core of Angular into their own module. In order to include animations in our Angular app, we&rsquo;ll therefore need to install and reference that module in our app.</p>

<p>We can download it from <a href="http://code.angularjs.org/">code.angularjs.org</a> and save it in a place that we can reference from our HTML, like <code>js/vendor/angular-animate.js</code>. </p>

<p>We can also install it using <a href="#bower">Bower</a>, which will place it in our usual Bower directory. For more information about Bower, see the <a href="#bower">Bower chapter</a>.</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install --save angular-animate
</pre>
<p>We&rsquo;ll need to reference this library in our HTML <em>after</em> we reference Angular itself. </p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/vendor/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/vendor/angular-animate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Lastly, we&rsquo;ll need to reference the <code>ngAnimate</code> module as a dependency in our app module:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngAnimate'</span><span class="p">]);</span>
</pre>
<p>Now we are ready to take on animations with AngularJS.</p>

<h2>How it works</h2>

<p>The <code>$animate</code> service itself, by default, applies two CSS classes to the animated element for each animation event (see below). </p>

<p>The <code>$animate</code> service supports several built-in Angular directives that automatically support animation without the need for any extra configuration. It is also flexible enough to enable us to build our own animations for our directives.</p>

<p>All of the pre-existing directives that support animation do so through monitoring events provided on the directives. </p>

<p>For instance, when a new <code>ngView</code> <em>enters</em> and brings new content into the browser, this event is called the <em>enter</em> event for <code>ngView</code>. When <code>ng-hide</code> is ready to show an element, the <code>remove</code> event is fired.</p>

<p>The following is a list of directives and the events that they each fire at different states. We will use these events to define how our animations will work in each state.</p>

<table class="description_table"><thead>
<tr>
<th>Directive</th>
<th>Events</th>
</tr>
</thead><tbody>
<tr>
<td>ngRepeat</td>
<td>enter, leave, move</td>
</tr>
<tr>
<td>ngView</td>
<td>enter, leave</td>
</tr>
<tr>
<td>ngInclude</td>
<td>enter, leave</td>
</tr>
<tr>
<td>ngSwitch</td>
<td>enter, leave</td>
</tr>
<tr>
<td>ngIf</td>
<td>enter, leave</td>
</tr>
<tr>
<td>ngClass</td>
<td>add, remove</td>
</tr>
<tr>
<td>ngShow</td>
<td>add, remove</td>
</tr>
<tr>
<td>ngHide</td>
<td>add, remove</td>
</tr>
</tbody></table>

<h2>Using CSS3 Transitions</h2>

<p>Using CSS3 Transitions is by far the easiest way to include animations in our app, and it will work for all browsers except IE9 and earlier versions. </p>

<blockquote>
<p>Browsers that do not support CSS3 Transitions will gracefully fall back to the non-animated version of the app.</p>
</blockquote>

<p>To do <strong>any</strong> CSS animation, we&rsquo;ll need to make sure we include the classes we&rsquo;ll be working with to the DOM element we&rsquo;re interested in animating. </p>

<p>For instance, in the following demo we&rsquo;ll animate the following element:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;fadein&quot;</span><span class="nt">&gt;&lt;h2&gt;</span>Hello<span class="nt">&lt;/h2&gt;&lt;/div&gt;</span>
</pre>
<p>CSS3 Transitions are fully class-based, which means that as long as we have classes that define the animation in our HTML the animation will be animated in the browser.</p>

<p>In order for us to achieve animations with classes, we&rsquo;ll need to follow the Angular CSS naming conventions to define our CSS transitions.</p>

<p>CSS transitions are effects that let an element gradually change from one style to another style. To define an animation, we must specify the property we want to add an animation to as well as specify the duration of effect.</p>

<p>For instance, this code will add a transition effect on all of the properties on DOM elements with the <code>.fadein</code> class for a two-second duration. </p>
<pre class="highlight css"><span class="nc">.fadein</span> <span class="p">{</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="m">2s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">-webkit-transition</span><span class="p">:</span> <span class="m">2s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">-moz-transition</span><span class="p">:</span> <span class="m">2s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">-o-transition</span><span class="p">:</span> <span class="m">2s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>With this transition and timing set, we can define properties on different states of the DOM element.</p>
<pre class="highlight css"><span class="nc">.fadein</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>With <code>ngAnimate</code>, Angular starts our directive animations by adding two classes to each animation event: the initial <code>ng-[EVENT]</code> class and, shortly thereafter, the <code>ng-[EVENT]-active</code> class. </p>

<p>The <code>ng-[EVENT]</code> CSS class represents the initial state of the animation, while the <code>ng-[EVENT]-active</code> CSS class is there so we can define the final state of the animation.</p>

<p>To automatically allow the DOM elements from above to transition with Angular animation, we&rsquo;ll modify the initial <code>.fadein</code> example to include the initial state class:</p>
<pre class="highlight css"><span class="nc">.fadein.ng-enter</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.fadein.ng-enter.ng-enter-active</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>To actually <em>run</em> the animation, we&rsquo;ll need to include the CSS animation definition. In this definition, we need to include <strong>both</strong> the duration and the element attributes that we&rsquo;re going to modify:</p>
<pre class="highlight css"><span class="nc">.fadein.ng-enter</span> <span class="p">{</span>
  <span class="nl">transition</span><span class="p">:</span> <span class="m">1s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">-webkit-transition</span><span class="p">:</span> <span class="m">1s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">-moz-transition</span><span class="p">:</span> <span class="m">1s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
  <span class="nl">-o-transition</span><span class="p">:</span> <span class="m">1s</span> <span class="n">linear</span> <span class="n">all</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<blockquote>
<p>In this example, we set the element attributes we&rsquo;re going to modify as <code>all</code>. In doing so, we are telling CSS that we are going to change all of the properties in the new CSS class. If we want to change only a particular property, we can list it above, instead of using <code>all</code>.</p>
</blockquote>

<p>Using the <code>ng-if</code> directive, this modification looks like:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MyController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;showHello()&quot;</span><span class="nt">&gt;</span>Show hello<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-if=</span><span class="s">&quot;shouldShowHello&quot;</span> <span class="na">class=</span><span class="s">&quot;fadein&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Hello<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;reset()&quot;</span><span class="nt">&gt;</span>Reset<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h4>See it</h4>

<div ng-controller="Demo1Ctrl">
  <button ng-if="!shouldShowHello" class="fadein1" ng-click="showHello()">Show hello</button>
  <div ng-if="shouldShowHello" src="helloTpl.html" class="fadein1">
    <h2>Hello</h2>
    <button ng-click="reset()">Reset</button>
  </div>
</div>

<h2>Using CSS3 Animations</h2>

<p>CSS3 animations are more extensive and more complex than CSS3 transitions. They are supported by all major browsers except IE9 and earlier versions of IE. With CSS3 animations, we&rsquo;ll use the same initial class <code>ng-[EVENT]</code>, but we don&rsquo;t need to define animation states in the <code>ng-[EVENT]-active</code> state, because our CSS rules will handle the rest of the block.</p>

<p>We create the animation in the CSS3 <code>@keyframes</code> rule. Within the CSS element where we define the <code>@keyframes</code> rule, we&rsquo;ll define the CSS styles that we want to be manipulated. </p>

<p>When we want to animate the DOM element, we&rsquo;ll use the <code>animation:</code> property to bind the <code>@keyframe</code> CSS property, which applies the animation to the CSS element. </p>

<blockquote>
<p>We&rsquo;ll need to specify both the name of the animation as well as the duration when we do so. </p>

<p><strong>Remember to add the animation duration</strong>: If we forget to add the duration of the animation, the duration will default to 0, and the animation will not run.</p>
</blockquote>

<p>To create our <code>@keyframes</code> rule, we&rsquo;ll need to give our keyframe a name and set the time periods for where the properties should be throughout the animation.</p>
<pre class="highlight css"><span class="k">@keyframes</span> <span class="n">firstAnimation</span> <span class="p">{</span>
  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="c">/* For Chrome and Safari */</span>
<span class="k">@-webkit-keyframes</span> <span class="n">firstAnimation</span> <span class="p">{</span>
  <span class="c">/* from is equivalent to 0% */</span>
  <span class="nt">from</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">yellow</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c">/* from is equivalent to 100% */</span>
  <span class="nt">to</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
<blockquote>
<p>Using the keyword <code>from</code> is equivalent to setting the percentage to <code>0%</code>. Using the keyword <code>to</code> is equivalent to setting the percentage to <code>100%</code>.</p>
</blockquote>

<p>We are not limited to <code>0%</code> and <code>100%</code>; we can provide animations in steps, such as at <code>10%</code>, <code>15%</code>, etc.</p>

<p>To assign this <code>@keyframe</code> property to the classes we want to animate, we&rsquo;ll use the <code>animation</code> property, which will apply the animation to the elements targeted by that CSS selector.</p>
<pre class="highlight css"><span class="nc">.fadein</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">-webkit-animation</span><span class="p">:</span> <span class="m">2s</span> <span class="n">firstAnimation</span><span class="p">;</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="m">2s</span> <span class="n">firstAnimation</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>With <code>ngAnimate</code>, we&rsquo;ll bind the <code>firstAnimation</code> value to any elements that are targeted with the <code>.fadein</code> class. Angular will apply and remove the <code>.ng-enter</code> class for us automatically, so we can simply attach our event to the <code>.fadein.ng-enter</code> class:</p>
<pre class="highlight css"><span class="nc">.fadein.ng-enter</span> <span class="p">{</span>
  <span class="nl">-moz-animation</span><span class="p">:</span> <span class="m">2s</span> <span class="n">firstAnimation</span><span class="p">;</span>
  <span class="nl">-o-animation</span><span class="p">:</span> <span class="m">2s</span> <span class="n">firstAnimation</span><span class="p">;</span>
  <span class="nl">-webkit-animation</span><span class="p">:</span> <span class="m">2s</span> <span class="n">firstAnimation</span><span class="p">;</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="m">2s</span> <span class="n">firstAnimation</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>For the <code>ng-show</code> directive, we can use the <code>ng-add</code> event to show the animation in the DOM. </p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-init=</span><span class="s">&quot;show=false&quot;</span> 
    <span class="na">ng-controller=</span><span class="s">&quot;HomeCtrl&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;show=!show&quot;</span><span class="nt">&gt;</span>Show<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;show&quot;</span> <span class="na">class=</span><span class="s">&quot;animateMe&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span>Show me<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h4>See it</h4>

<div ng-init="show=false" 
    ng-controller="Demo1Ctrl">
  <div ng-hide="show" class="animateMe">
    <button ng-click="show=!show">Reveal</button>
  </div>
  <div ng-hide="!show" class="animateMe">
    <button ng-click="show=!show">Hide</button>
    <h2>I&rsquo;m shown</h2>
  </div>
</div>

<h2>Using JavaScript animations</h2>

<p>JavaScript animation is different than the previous two Angular animation methods in that we&rsquo;ll set properties on the DOM element directly using JavaScript. </p>

<p>JavaScript animation is supported in all major browsers that enable JavaScript, so it&rsquo;s a good choice if we want to offer animations on browsers that don&rsquo;t support CSS transitions and animations.</p>

<p>Instead of manipulating our CSS to animate elements, we&rsquo;ll update our JavaScript to handle running animations for us.</p>

<p>The <code>ngAnimate</code> module adds the <code>.animation</code> method to the module API; this method presents an interface on which we can build our animations. </p>

<p>The <code>animation()</code> method takes two parameters:</p>

<ul>
<li>classname (string)</li>
</ul>

<p>This classname will match the class of the element to animate. For our examples thus far, the animation should be named: <code>.fadein</code>.</p>

<ul>
<li>animateFun (function)</li>
</ul>

<p>The animate function is expected to return an object that includes functions for the different events that the directive fires (where it&rsquo;s used). </p>

<p>See the <a href="http://docs.angularjs.org/api/ngAnimate">$animate API</a> docs for detailed documentation on these functions.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ngAnimate'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">animation</span><span class="p">(</span><span class="s1">'.fadein'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">enter</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Run animation
</span>
      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cancelled</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Cancel animation
</span>      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>The $angular service will call these functions for the element specified. Inside these functions, we are free to do what we will with the element. The only requirement is that we call the callback function <code>done()</code> when we are done with the animation. </p>

<p>Inside these functions, we can return an <code>end</code> function that will be called when the animation is complete OR the animation has been canceled. </p>

<p>When the animation is triggered, <code>$animate</code> will look for the matching animation function for the event. If it finds a function that matches the event, it will execute it. </p>

<h2>Example time</h2>

<p>We&rsquo;re going to create our animation using the JavaScript API:</p>

<h4>See it</h4>

<div ng-controller="Demo1Ctrl">
  <div square-scroller>
  </div>
</div>

<p>This example is set up using this HTML:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;DemoCtrl&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">square-scroller</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>We&rsquo;re not declaring any classes, only setting up a directive. The directive (shortened so we can keep this section brief) sets up a template that includes the images and sets the animation class that we&rsquo;ll define. </p>

<p>Lastly, it stores the current offsetTop for the element in a data attribute (i.e., data-offsetTop=&ldquo;&rdquo; in the HTML):</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'squareScroller'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$animate</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">clicked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{},</span>
      <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div ng-init=&quot;runAnimation=false&quot;&gt;\
          &lt;div ng-hide=&quot;!runAnimation&quot; class=&quot;square-scroll&quot;&gt;\
            &lt;img src=&quot;/images/animation/one.png&quot; /&gt;\
            &lt;img src=&quot;/images/animation/two.png&quot; /&gt;\
            &lt;img src=&quot;/images/animation/three.png&quot; /&gt;\
          &lt;/div&gt;\
        &lt;/div&gt;'</span><span class="p">,</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">ele</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s2">&quot;img&quot;</span><span class="p">),</span> 
            <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="p">{</span>
              <span class="kd">var</span> <span class="nx">offsetTop</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">;</span>
              <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'data-offsetTop'</span><span class="p">,</span> <span class="nx">offsetTop</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
</pre>
<p>This directive doesn&rsquo;t do any of the animation on its own; rather, it only sets up the template. The <em>real</em> magic of animations happen with the <code>.square-scroll</code> animation.</p>

<p>Using the <code>.animation</code> API, we&rsquo;ll create our animation:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">animation</span><span class="p">(</span><span class="s1">'.square-scroll'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">removeClass</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">className</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">className</span> <span class="o">===</span> <span class="s1">'ng-hide'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// We're unhiding the element
</span>        <span class="c1">// i.e. showing the element
</span>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nx">done</span><span class="p">();</span> <span class="p">}</span>
    <span class="p">},</span>
    <span class="na">addClass</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ele</span><span class="p">,</span> <span class="nx">className</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">className</span> <span class="o">===</span> <span class="s1">'ng-hide'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// We're hiding the element
</span>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nx">done</span><span class="p">();</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>This function sets up the <code>.square-scroll</code> CSS to handle <em>two</em> animation events: the <code>addClass</code> and <code>removeClass</code> events. We&rsquo;re using these events because we&rsquo;re using the <code>ng-hide</code> directive to show or hide our elements, which effectively just adds the <code>ng-hide</code> class on the elements.</p>

<p>When the <code>ng-hide</code> directive is ready to show an element, it will fire the <code>removeClass</code> function (it&rsquo;s removing the <code>ng-hide</code> CSS class). When it&rsquo;s going to hide the element, it will add the <code>ng-hide</code> CSS class to the element.</p>

<p>Our <code>.animation</code> handles this animation above by checking for the <code>className</code> that is being added or removed and making sure we <em>only</em> add animations if we&rsquo;re showing or hiding the element.</p>

<p>The full source of the directive can be found <a href="http://d.pr/vzTG">here</a>.</p>

<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/1.10.3/TweenMax.min.js"></script>

<script src="/js/vendor/jquery.js"></script>

<script src="/js/vendor/skrollr.min.js"></script>

<style type="text/css">
  .fadein1.ng-enter {
    opacity: 0;
  }
  .fadein1.ng-enter.ng-enter-active {
    opacity: 1;
  }
  .fadein1.ng-leave.ng-leave-active {
    opacity: 0;
  }
  .fadein1.ng-enter,
  .fadein1.ng-leave {
    transition: 1s linear all;
    -webkit-transition: 1s linear all;
    -moz-transition: 1s linear all;
    -o-transition: 1s linear all;
  }

    @keyframes animateMe-add {
      from {opacity: 1;}
      to {opacity: 0;}
    }
    @-webkit-keyframes animateMe-add {
      from {opacity: 1;}
      to {opacity: 0;}
    }
    @keyframes animateMe-remove {
      from {opacity:0;}
      to {opacity:1;}
    }
    @-webkit-keyframes animateMe-remove {
      from {opacity:0;}
      to {opacity:1;}
    }

  .animateMe.ng-hide-add {
    -webkit-animation: 2s animateMe-add;
    -moz-animation: 2s animateMe-add;
    -o-animation: 2s animateMe-add;
    animation: 2s animateMe-add;
  }
  .animateMe.ng-hide-remove {
    -webkit-animation: 2s animateMe-remove;
    -moz-animation: 2s animateMe-remove;
    -o-animation: 2s animateMe-remove;
    animation: 2s animateMe-remove;
    display: block !important;
  }

  @-webkit-keyframes slideInDown {
    0% {
      opacity: 0;
      -webkit-transform: translateY(-2000px);
    }

    100% {
      -webkit-transform: translateY(0);
    }
  }

  @-moz-keyframes slideInDown {
    0% {
      opacity: 0;
      -moz-transform: translateY(-2000px);
    }

    100% {
      -moz-transform: translateY(0);
    }
  }

  @-o-keyframes slideInDown {
    0% {
      opacity: 0;
      -o-transform: translateY(-2000px);
    }

    100% {
      -o-transform: translateY(0);
    }
  }

  @keyframes slideInDown {
    0% {
      opacity: 0;
      transform: translateY(-2000px);
    }

    100% {
      transform: translateY(0);
    }
  }

  .slideInDown {
    -webkit-animation: 0.25s slideInDown;
    -moz-animation: 0.25s slideInDown;
    -o-animation: 0.25s slideInDown;
    animation: 0.25s slideInDown;
  }
</style>

<script type="text/javascript">
  angular.module('animationDemoApp', ['ngAnimate'])
  .controller('Demo1Ctrl', function($scope) {
    $scope.showHello = function() {
      $scope.shouldShowHello = true;
    }
    $scope.reset = function() {
      $scope.shouldShowHello = false;
    }
    $scope.run = function() {
    }
  })
  .directive('squareScroller', function($animate) {
    var clicked = false;
    return {
      scope: {},
      template: '<div ng-init="runAnimation=false">\
          <div ng-hide="runAnimation">\
          <button ng-click="runAnimation=!runAnimation">Run animation</button>\
          </div>\
          <div ng-hide="!runAnimation" class="square-scroll">\
          <button ng-click="runAnimation=!runAnimation">Stop animation</button>\
          <span>Try scrolling</span>\
            <img src="/images/animation/one.png" />\
            <img src="/images/animation/two.png" />\
            <img src="/images/animation/three.png" />\
          </div>\
        </div>',
      link: function(scope, ele, attrs, ctrl) {
        angular.forEach(ele.find("img"), 
            function(e, idx) {
              var offsetTop = $(e).offset().top;
              $(e).css('position', 'fixed');
              $(e).css('bottom', '10px');
              $(e).css('left', 10 + idx * 20 + 'px');
              $(e).css('width', '120px');
              $(e).css('z-index', '1000');

              $(e).attr('data-offsetTop', offsetTop);
              $(e).addClass('slideInDown');
        });
      }
    }
  })
  .animation('.square-scroll', function() {
    var sk;

    return {
      // Showing
      removeClass: function(ele, className, done) {
        if (className === 'ng-hide') {
          sk = skrollr.init({
            render: function(data) {
              angular.forEach(ele.find("img"), 
                function(e, i) {
                  var ot = $(e).attr('data-offsetTop');
                  var newX = 
                    Math.abs(data.curTop - ot) + 
                      (i * 80);
                  if (Math.floor(newX % 4) == 0) {
                    var newY = 
                      (Math.sin(newX) * 20) + 10;
                    $(e).css('bottom', newY + 'px');
                  }
              });
            }
          });
          done();
        } else {
          done();
        }
      },
      // Hiding the class
      addClass: function(ele, className, done) {
        if (className === 'ng-hide') {
          // Cleaning up
          sk.destroy();
          done();
        } else {
          done();
        }
      }
    }
  });
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Restangular on Angular</title>
    <link href="http://www.ng-newsletter.com/posts/restangular.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/restangular.html"/>
    <updated>2013-09-29T00:00:00-07:00</updated>
    <id>urn:uuid:7f3948ac-6869-5ffc-8695-b2302d93b184</id>
    <summary>Although Angular on its own is powerful enough to build standalone applications where we pack all important data inside the application, in doing so we would be missing out on one of the nicest features of the framework: its ability to talk with the...</summary>
    <content type="html"><![CDATA[<p>Although Angular on its own is powerful enough to build standalone applications where we pack all important data inside the application, in doing so we would be missing out on one of the nicest features of the framework: its ability to talk with the outside world.</p>

<p>In this section, we&rsquo;re going to talk specifically about an incredibly well-developed and well-thought-out library: <strong>Restangular</strong>. All of the code in this article is available at the end of the article.</p>

<h2>The what and the why</h2>

<p>Restangular is an Angular service specifically designed simply to fetch data from the rest of the world.</p>

<p>Why not use <code>$http</code> or <code>$resource</code>? Although <code>$http</code> and <code>$resource</code> are built into the framework, they carry limitations with them. Restangular takes a completely different approach to XHR and makes it a pleasant experience.</p>

<p>The complete list of benefits to using Restangular is available on the <a href="https://github.com/mgonto/restangular">README</a>, but we&rsquo;ll cover a few benefits here:</p>

<ul>
<li><strong>Promises</strong></li>
</ul>

<p>Using promises makes Restangular <em>feel</em> more Angular-esque as it uses and resolves on promises. This enables us to chain together responses just as though we&rsquo;re using the raw <code>$http</code> method.</p>

<ul>
<li><strong>Explicit</strong> </li>
</ul>

<p>Restangular has little to no magic included in the library. We don&rsquo;t have to guess how it works or dig up documentation on how to use it.</p>

<ul>
<li><strong>All HTTP methods</strong></li>
</ul>

<p>All <em>HTTP</em> methods are supported.</p>

<ul>
<li><strong>Forget URLs</strong></li>
</ul>

<p>While <code>$resource</code> requires us to specify the URLs we want to fetch, Restangular doesn&rsquo;t require us to <em>know</em> the URLs in advance, nor do we have to specify them all upfront, other than the base URL.</p>

<ul>
<li><strong>Nested resources</strong></li>
</ul>

<p>Want to use nested resources? No need to create another instance of the Restangular instance, it&rsquo;ll handle it for us.</p>

<ul>
<li><strong>One resource, not many</strong></li>
</ul>

<p>Unlike <code>$resource</code>, we only ever need to create one instance of the Restangular resource object. </p>

<p>And there is much, much more. </p>

<h2>Installation</h2>

<p>Installing Restangular is easy &ndash; we have options. We can download the files manually (from <a href="https://raw.github.com/jimaek/jsdelivr/master/files/restangular/latest/restangular.min.js">GitHub</a>) and include the file locally. If we download the file to our <code>js/vendor</code> directory, then we can include it in our HTML, like so:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;test/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;js/vendor/restangular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>We can include the JavaScript libraries hosted on <a href="http://www.jsdelivr.com/">jsDelivr</a> in our page:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://cdn.jsdelivr.net/restangular/latest/restangular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://cdn.jsdelivr.net/restangular/latest/restangular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Alternatively, we can use <code>npm</code> to install Restangular if we&rsquo;re using <code>npm</code> in our project:</p>
<pre class="highlight shell"><span class="gp">$ </span>npm install restangular
</pre>
<p>Or we can use Bower to install Restangular, if we&rsquo;ve set up Bower for our project.</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install restangular
</pre>
<p><strong>Note:</strong> Restangular depends on either lodash or underscore, so in order support restangular, we&rsquo;ll need to make sure we include one of the two.</p>

<p>We can either use <a href="http://www.jsdelivr.com/#!lodash">jsDelivr</a> to include <code>lodash</code>:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;//cdn.jsdelivr.net/lodash/2.1.0/lodash.compat.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Or download lodash <a href="http://lodash.com/">here</a> or use bower to install.</p>
<pre class="highlight javascript"><span class="nx">bower</span> <span class="nx">install</span> <span class="nx">lodash</span>
</pre>
<p>And include it as a script on the page:</p>
<pre class="highlight javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/js/vendor/lodash/dist/lodash.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/</span><span class="err">script&gt;</span>
</pre>
<p>Also, just like any other AngularJS library, we&rsquo;ll need to include the <code>restangular</code> resource as a dependency for our app module object:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'restangular'</span><span class="p">]);</span>
</pre>
<p>Once we&rsquo;ve done that, we&rsquo;ll be able to inject the <code>Restangular</code> service in our Angular objects:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'Restangular'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">Restangular</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}]);</span>
</pre>
<h2>Intro to the Restangular object</h2>

<p>To use Restangular, there are two ways we can create an object to fetch services. We can either set the base route to fetch objects from:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">Restangular</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">'users'</span><span class="p">);</span>
</pre>
<p>This will set all HTTP requests that come from the Restangular service to pull from <code>/users</code>. For instance, calling <code>getList()</code> on the above object will fetch from <code>/users</code>:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">allUsers</span> <span class="o">=</span> <span class="nx">User</span><span class="p">.</span><span class="nx">getList</span><span class="p">();</span> <span class="c1">// GET /users
</span></pre>
<p>It&rsquo;s also possible to fetch nested requests for a single object. Instead of passing only a route, we can pass a unique ID to pull from as well:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">oneUser</span> <span class="o">=</span> <span class="nx">Restangular</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">'users'</span><span class="p">,</span> <span class="s1">'abc123'</span><span class="p">);</span>
</pre>
<p>This will generate the request <code>/users/abc123</code> when calling <code>getList()</code> on it.</p>
<pre class="highlight javascript"><span class="nx">oneUser</span><span class="p">.</span><span class="nx">get</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// GET /users/abc123/inboxes
</span>  <span class="nx">user</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="s1">'inboxes'</span><span class="p">);</span> 
<span class="p">});</span>
</pre>
<p>As you can see from above, Restangular is smart enough to figure out how to construct URLs based upon the methods that we are calling on the Restangular source object. Sometimes, however, it is convenient to set the URL that we&rsquo;re fetching, especially if our back end doesn&rsquo;t support pure RESTful APIs.</p>

<p>To set the URL for a specific request, we can pass a separate argument using the <code>allUrl</code> method:</p>
<pre class="highlight javascript"><span class="c1">// All URLs on searches will use `http://google.com/` as
// the baseUrl
</span><span class="kd">var</span> <span class="nx">searches</span> <span class="o">=</span> 
  <span class="nx">Restangular</span><span class="p">.</span><span class="nx">allUrl</span><span class="p">(</span><span class="s1">'searches'</span><span class="p">,</span> <span class="s1">'http://google.com/'</span><span class="p">);</span>
<span class="c1">// Will send a request to GET http://google.com/
</span><span class="nx">searches</span><span class="p">.</span><span class="nx">getList</span><span class="p">();</span>
</pre>
<p>Additionally, we can set the base URL for one particular request, rather than manipulating the entire request using <code>oneUrl</code>:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">singleSearch</span> <span class="o">=</span> 
  <span class="nx">Restangular</span><span class="p">.</span><span class="nx">oneUrl</span><span class="p">(</span><span class="s1">'betaSearch'</span><span class="p">,</span> <span class="s1">'http://beta.google.com/1'</span><span class="p">);</span>

<span class="c1">// Trigger a request to GET http://google.com/1
</span><span class="nx">singleSearch</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
</pre>
<h2>Using Restangular</h2>

<p>With a good handle on the Restangular object, we can now get down to using it to make requests. </p>

<p>With the initial object that&rsquo;s returned from Restangular, we have a lot of methods that we can use to interact with our back-end API.</p>

<p>Let&rsquo;s say we&rsquo;ve created a Restangular object that represents public discussions:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">messages</span> <span class="o">=</span> <span class="nx">Restangular</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">);</span>
</pre>
<p>With this object, we can get a list of all of the messages with the <code>getList()</code> method. This <code>getList()</code> method returns a collection containing methods we can call to work with the specific collection.</p>
<pre class="highlight javascript"><span class="c1">// allMessages is a promise that will resolve into the
// list of all messages
</span><span class="kd">var</span> <span class="nx">allMessages</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">getList</span><span class="p">();</span>
</pre>
<h4>See it</h4>

<div ng-controller="MessageController" class="height220">
<ul>
  <li ng-repeat="msg in messages | orderBy: createdAt">
    {{ msg.body }}
  </li>
</ul>
<small>These messages are being fetched out of a mongo instance</small>
</div>

<p>We can also create messages using the Restangular object. To create an object, we&rsquo;ll use the <code>post()</code> method. </p>

<p>The post method requires a single object as a parameter and will send a (you guessed it) POST request to the <em>URL</em> we specified. We can also add queryParameters and headers to this request. </p>
<pre class="highlight javascript"><span class="c1">// POST to /messages
</span><span class="kd">var</span> <span class="nx">newMessage</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">body</span><span class="p">:</span> <span class="s2">&quot;Hello world&quot;</span>
<span class="p">};</span>
<span class="nx">messages</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">newMessage</span><span class="p">);</span>
<span class="c1">// OR we can call this on an element to create a nested
// resource for the element
</span><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">Restangular</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span> <span class="s1">'abc123'</span><span class="p">);</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'replies'</span><span class="p">,</span> <span class="nx">newMessage</span><span class="p">);</span>
</pre>
<p>Because Restangular returns promises, we can then call methods on the returned data on promises so that we can run a function after the promise has completed. For instance, after we update a collection, we can then refresh the collection on our scope:</p>
<pre class="highlight javascript"><span class="nx">messages</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">newMessage</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">newMsg</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">messages</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">getList</span><span class="p">();</span>
<span class="p">},</span> <span class="kd">function</span> <span class="nx">error</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// An error has occurred
</span><span class="p">});</span>
</pre>
<h4>Try it</h4>

<div ng-controller="MessageController" class="height220">
<form>
<input type="text" ng-model="newMessage.body" placeholder="New message body" ng-minlength='1' />
<input class="button" type="submit" ng-click="addMessage()" value="Add message"></input>
</form>
<ul>
  <li ng-repeat="msg in messages | orderBy: createdAt">
    {{ msg.body }}
  </li>
</ul>
<small>These messages are being fetched out of a mongo instance</small>
</div>

<p>We can also remove an object from the collection. Using the <code>remove()</code> method, we can send a DELETE HTTP request to our back end. To send a delete request, we can call the <code>remove()</code> method on an object inside the collection (an element).</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">messages</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="mi">123</span><span class="p">);</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="c1">// Send a DELETE to /messages
</span></pre>
<h4>Try it</h4>

<div ng-controller="MessageController" class="height220">
<ul>
  <li ng-repeat="msg in messages | orderBy: createdAt">
    <a ng-click="removeMessage(msg)">X</a>
    {{ msg.body }}
  </li>
</ul>
<small>These messages are being fetched out of a mongo instance</small>
</div>

<p>Updating and saving objects is something we&rsquo;ll do quite often. Traditionally, this operation is done with the HTTP method PUT. Restangular supports this out of the box through the method <code>put()</code>.</p>

<p>To update an object, we&rsquo;ll need to query the object, set our new attributes on the instance, and then call <code>put()</code> on the object to save the updated attributes in the back end.</p>

<blockquote>
<p>Note, that before modifying an object, it&rsquo;s good practice to copy it and then modify the copied object before we save it. Restangular has it&rsquo;s own version of copy such that it won&rsquo;t rebind <code>this</code> in the bundled functions. It&rsquo;s good practice to use <code>Restangular.copy()</code> when updating an object.</p>
</blockquote>

<h4>Try it</h4>

<div ng-controller="MessageController" class="height220">
<ul ng-hide="showEdit">
  <li ng-repeat="msg in messages | orderBy: createdAt">
    <a ng-click="showEditMessage(msg);">Edit</a>
    {{ msg.body }}
  </li>
</ul>
<div ng-show="showEdit">
  <form>
  <input ng-model="editMessage.body" name="Body"  ng-minlength='1' />
  <input type="submit" class="button" ng-click="saveEdit(); showEdit = false">Save</input>
  </form>
</div>

<p><small>These messages are being fetched out of a mongo instance</small>
</div></p>

<blockquote>
<p>Note that before modifying an object, it&rsquo;s good practice to copy it and then modify the copied object before we save it. Restangular has its own version of copy such that it won&rsquo;t rebind <code>this</code> in the bundled functions. It&rsquo;s good practice to use <code>Restangular.copy()</code> when updating an object.</p>
</blockquote>

<p>Now that we have experience working on instances of our collection, let&rsquo;s dig into nested components. Nested components are those that live underneath other components. For instance, for all of the books written by a certain author.</p>

<p>Restangular supports nested resources by default. In fact, we can query a particular instance from our collection for their nested resources.</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">author</span> <span class="o">=</span> <span class="nx">Restangular</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">'users'</span><span class="p">,</span> <span class="s1">'abc123'</span><span class="p">);</span>
<span class="c1">// Builds a GET to /authors/abc123/books
</span><span class="kd">var</span> <span class="nx">books</span> <span class="o">=</span> <span class="nx">author</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="s1">'books'</span><span class="p">);</span>
</pre>
<h4>Try it</h4>

<div ng-controller="MessageController" class="height220">
<a class="button" ng-click="getAuthorMessages()">Get all my messages</a> (based off a custom user id, generated for you)
<div ng-show="authorMessagesEmpty">
<form>
<h4>In order to fetch your articles, you need to add at least one. Try adding one now&hellip;</h4>
<input type="text" ng-model="newMessage.body" placeholder="New message body"  ng-minlength='1' />
<input class="button" type="submit" ng-click="addMessage()" value="Add message"></input>
</form>
</div>

<ul ng-show="!authorMessagesEmpty">
  <li ng-repeat="msg in authorMessages | orderBy: createdAt">
    {{ msg.body }}
  </li>
</ul>

<p><small>These messages are being fetched out of a mongo instance</small>
</div></p>

<h3>But what about my HTTP methods?</h3>

<p>Restangular supports, out of the box, <em>all</em> HTTP methods. It can support calling GET, PUT, POST, DELETE, HEAD, TRACE, OPTIONS, and PATCH.</p>
<pre class="highlight javascript"><span class="nx">author</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span> <span class="c1">// GET /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="s1">'books'</span><span class="p">);</span> <span class="c1">// GET /authors/abc123/books
</span><span class="nx">author</span><span class="p">.</span><span class="nx">put</span><span class="p">();</span> <span class="c1">// PUT /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">post</span><span class="p">();</span> <span class="c1">// POST /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span> <span class="c1">// DELETE /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">head</span><span class="p">();</span> <span class="c1">// HEAD /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">trace</span><span class="p">();</span> <span class="c1">// TRACE /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">options</span><span class="p">();</span> <span class="c1">// OPTIONS /authors/abc123
</span><span class="nx">author</span><span class="p">.</span><span class="nx">patch</span><span class="p">();</span> <span class="c1">// PATCH /author/abc123
</span></pre>
<p>Restangular also makes it possible to create custom HTTP methods for cases when our back-end server maps resources differently than we expect. </p>

<p>For instance, if we want to get the author&rsquo;s biography (not a RESTful resource), then we can set the URL through the <code>customMETHOD()</code> function (where METHOD is replaced by any of the following: GET, GETLIST, DELETE, POST, PUT, HEAD, OPTIONS, PATCH, TRACE).</p>
<pre class="highlight javascript"><span class="c1">// Maps to GET /users/abc123/biography
</span><span class="nx">author</span><span class="p">.</span><span class="nx">customGET</span><span class="p">(</span><span class="s2">&quot;biography&quot;</span><span class="p">);</span>
<span class="c1">// Or customPOST with a new bio object
// as {body: &quot;Ari's bio&quot;}
// The two empty fields in between are the 
// params field and any custom headers
</span><span class="nx">author</span><span class="p">.</span><span class="nx">customPOST</span><span class="p">({</span><span class="na">body</span><span class="p">:</span> <span class="s2">&quot;Ari's Bio&quot;</span><span class="p">},</span> <span class="c1">// post body
</span>  <span class="s2">&quot;biography&quot;</span><span class="p">,</span>  <span class="c1">// route
</span>  <span class="p">{},</span>           <span class="c1">// custom params
</span>  <span class="p">{});</span>          <span class="c1">// custom headers
</span></pre>
<h3>Custom query parameters and headers</h3>

<p>With all of these methods, we can send custom query parameters or custom headers. </p>

<p>To add custom query parameters, we&rsquo;ll add a JavaScript object as the second parameter to our method call. We can also add a second JavaScript object as a third parameter. Most all of the individual methods that we can call on an element take these two parameters as optional parameters.</p>

<p>With custom query parameters, a <code>post</code> method might look something like:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">queryParamObj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">role</span><span class="p">:</span> <span class="s1">'admin'</span> <span class="p">},</span>
    <span class="nx">headerObj</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">'x-user'</span><span class="err">:</span> <span class="s1">'admin'</span> <span class="p">};</span>

<span class="nx">messages</span><span class="p">.</span><span class="nx">getList</span><span class="p">(</span><span class="s1">'accounts'</span><span class="p">,</span> <span class="nx">queryParamObj</span><span class="p">,</span> <span class="nx">headerObj</span><span class="p">);</span>
</pre>
<p>Restangular is incredibly simple to use and gets out of the way so that we can focus on building our app, rather than wrestling with the API.</p>

<h2>Configuring Restangular</h2>

<p>Restangular is highly configurable and expects us to configure it for our apps. It does come with defaults for every single property, so we don&rsquo;t have to configure it if we don&rsquo;t need to do so.</p>

<p>There are a few different places where we can configure a Restangular service. We can configure it globally or using a custom service.</p>

<p>To configure Restangular for all Restangular usages, regardless of the location it&rsquo;s used in, we can inject the <code>RestangularProvider</code> in a <code>config()</code> function or inject <code>Restangular</code> in a <code>run()</code> function.</p>

<blockquote>
<p>A good rule of thumb to determine where we should configure our Restangular instances: If we need to use any other service in configuring Restangular, then we should configure it in the <code>run()</code> method, otherwise we&rsquo;ll keep it in the <code>config()</code> method.</p>
</blockquote>

<h4>Setting the baseUrl</h4>

<p>To set the <code>baseUrl</code> for all calls to our <code>backendAPI</code>, we can use the <code>setBaseUrl()</code> method. For instance, if our API is located at <code>/api/v1</code>, rather than at the root of our server. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setBaseUrl</span><span class="p">(</span><span class="s1">'/api/v1'</span><span class="p">);</span>
  <span class="p">});</span>
</pre>
<h4>Adding element transformations</h4>

<p>We can add any element transformations after an element has been loaded by Restangular. </p>

<p>Using these <code>elementTransformers</code>, we can add <em>custom</em> methods to our Restangular objects, such as when the object instance was fetched, for example.</p>

<p>This will get called as a callback that will enable us to update or modify the element we fetched after it&rsquo;s been loaded, but before we use it in our Angular objects.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Three parameters:
</span>    <span class="c1">// the route
</span>    <span class="c1">// if it's a collection - boolean (true/false)
</span>    <span class="c1">// and the transformer
</span>    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">addElementTransformer</span><span class="p">(</span><span class="s1">'authors'</span><span class="p">,</span>
      <span class="kc">false</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">fetchedAt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
        <span class="k">return</span> <span class="nx">element</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
</pre>
<h4>Setting responseInterceptors</h4>

<p>Restangular can set responseInterceptors. <code>responseInterceptors</code> are useful for when we want to translate the response we get back from the server. For instance, if our server comes back with the data tucked away in a nested object, we can use a <code>responseInterceptor</code> to dig it out.</p>

<p>This is called after every response we get back from the backend. It will get called with the following parameters:</p>

<ul>
<li>data - data retrieved from the server</li>
<li>operation - the HTTP method used</li>
<li>what - the model that&rsquo;s requested</li>
<li>url - the relative URL that&rsquo;s being requested</li>
<li>response - the full server response, including headers</li>
<li>deferred - the promise for the request</li>
</ul>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setResponseInterceptor</span><span class="p">(</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">operation</span><span class="p">,</span> <span class="nx">what</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">operation</span> <span class="o">==</span> <span class="s1">'getList'</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">data</span><span class="p">[</span><span class="nx">what</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
</pre>
<h4>Using requestInterceptors</h4>

<p>Restangular supports the other side of the operation as well: We can work with the data we are going to send to the server before we ever actually send any data back to the server in the first place. </p>

<p><code>requestInterceptors</code> are useful for times when we&rsquo;ll need to run manipulations on the object before sending it to the server. For instance, we can&rsquo;t call directly to mongo with an <code>_id</code> field, so we have to remove it before it gets sent to the backend if we&rsquo;re in a PUT operation.</p>

<p>To set a <code>requestInterceptor</code>, we can use the method <code>setRequestInterceptor()</code>. The <code>setRequestInterceptor()</code> method will be called with the following parameters:</p>

<ul>
<li>element - the element we&rsquo;re sending to the server</li>
<li>operation - the HTTP method used</li>
<li>what - the model that&rsquo;s being requested</li>
<li>url - the relative URL that&rsquo;s being requested</li>
</ul>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setRequestInterceptor</span><span class="p">(</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">operation</span><span class="p">,</span> <span class="nx">what</span><span class="p">)</span> <span class="p">{</span>        
        <span class="k">if</span> <span class="p">(</span><span class="nx">operation</span> <span class="o">===</span> <span class="s1">'put'</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">elem</span><span class="p">.</span><span class="nx">_id</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
          <span class="k">return</span> <span class="nx">elem</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">elem</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
</pre>
<h4>Custom fields</h4>

<p>Restangular also supports setting custom Restangular fields. This is important for times when we are connecting not to a back-end server, but to a back-end database, such as MongoDB where the <code>id</code> field doesn&rsquo;t map to an <code>id</code>. </p>

<p>For instance, when connecting to MongoDB, the <code>id</code> field actually maps to <code>_id.$oid</code>. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setRestangularFields</span><span class="p">({</span>
        <span class="na">id</span><span class="p">:</span> <span class="s1">'_id.$oid'</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="err">}</span><span class="p">);</span>
</pre>
<h4>Catching errors with errorInterceptors</h4>

<p>It&rsquo;s also possible to set error Interceptors, for those times when we want to catch an error from within Restangular. Using the <code>errorInterceptor</code> gives us the ability to halt the flow of the error down to our app.</p>

<p>If we return <code>false</code> from the <code>errorInterceptor</code>, then the flow of the promise will end and our app will never need to deal with handling errors. </p>

<p>This is a good time to handle dealing with authentication failures, for instance. If any request comes back with a <code>401</code>, we can use the <code>errorInterceptor</code> to catch it and handle redirecting the user to the login page.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setErrorInterceptor</span><span class="p">(</span>
        <span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">displayError</span><span class="p">();</span>
          <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// stop the promise chain
</span>      <span class="p">});</span>
    <span class="p">});</span>
  <span class="err">}</span><span class="p">);</span>
</pre>
<h2>Configuring Restangular to talk to MongoDB</h2>

<p>One of the nicer features of using Restangular is that we can connect our app to talk directly to a MongoDB database (in fact, all the examples on this page talk directly to a MongoDB database).</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'restangular'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">'apiKey'</span><span class="p">,</span> <span class="s1">'123412341234'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">RestangularProvider</span><span class="p">,</span> <span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setBaseUrl</span><span class="p">(</span>
    <span class="s1">'https://api.mongolab.com/api/1/databases/YOURDB/collections'</span><span class="p">);</span>
    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setDefaultRequestParams</span><span class="p">({</span> 
      <span class="na">apiKey</span><span class="p">:</span> <span class="nx">apiKey</span>
    <span class="p">})</span>
    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setRestangularFields</span><span class="p">({</span>
      <span class="na">id</span><span class="p">:</span> <span class="s1">'_id.$oid'</span>
    <span class="p">});</span>

    <span class="nx">RestangularProvider</span><span class="p">.</span><span class="nx">setRequestInterceptor</span><span class="p">(</span>
      <span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">operation</span><span class="p">,</span> <span class="nx">what</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">operation</span> <span class="o">===</span> <span class="s1">'put'</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">elem</span><span class="p">.</span><span class="nx">_id</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
          <span class="k">return</span> <span class="nx">elem</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">elem</span><span class="p">;</span>
  <span class="p">})</span>
<span class="p">});</span>
</pre>
<h4>Custom Restangular services</h4>

<p>Finally, we <em>highly</em> recommend using Restangular from inside a custom service object. This is particularly useful, as we can configure Restangular on a per-service level using a service as well as disconnecting the logic to talk to our back end from within our controllers/directives and enabling our services to handle talking to them directly.</p>

<p>This disconnection from inside Angular objects also helps with making testing a breeze as we can stub and mock back-end calls without worrying about actually making the calls to our back end during tests.</p>

<p>To create a service that wraps Restangular, we simply need to <em>inject</em> the <code>Restangular</code> service in our factory and call the methods like normal. Inside this factory, we can create custom configurations by using the <code>withConfig()</code> function.</p>

<p>For instance:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'restangular'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'MessageService'</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">'Restangular'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Restangular</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">restAngular</span> <span class="o">=</span> 
      <span class="nx">Restangular</span><span class="p">.</span><span class="nx">withConfig</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">Configurer</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">Configurer</span><span class="p">.</span><span class="nx">setBaseUrl</span><span class="p">(</span><span class="s1">'/api/v2/messages'</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="kd">var</span> <span class="nx">_messageService</span> <span class="o">=</span> <span class="nx">restAngular</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">getMessages</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_messageService</span><span class="p">.</span><span class="nx">getList</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<p>Restangular is <strong>really</strong>, <strong>really</strong>, <strong>really</strong> cool and reduces a lot of the complexity and <em>unknowns</em> from using the <code>$resource</code> service and let&rsquo;s us focus on the building the functionality of our web app.</p>

<p>All of the code for this article can be found at: <a href="http://d.pr/sb9f">http://d.pr/sb9f</a>.</p>

<p>There are many more configuration operations we can set on Restangular. We encourage you to check out the Restangular <a href="https://github.com/mgonto/restangular">documentation</a> or check out our upcoming <a href="http://ng-book.com">book</a> that covers an extensive review of Restangular.</p>

<script type="text/javascript">
  (function() {
    angular.module('restangularDemoApp', [
      'restangular',
      'ngCookies'
    ])
    .constant('apiKey', 'sKoiVlWRICg3e3QUtHQGUGL7ZtabgKUP')
    .config(function(RestangularProvider, apiKey) {
      RestangularProvider.setBaseUrl('https://api.mongolab.com/api/1/databases/ngnewsletter/collections');
        RestangularProvider.setDefaultRequestParams({ 
          apiKey: apiKey
        })
        RestangularProvider.setRestangularFields({
          id: '_id.$oid'
        });
        
        RestangularProvider.setRequestInterceptor(
          function(elem, operation, what) {
        
            if (operation === 'put') {
              elem._id = undefined;
              return elem;
            }
            return elem;
      })
    })
    .factory('Messages', [
      '$rootScope', '$cookieStore', 'Restangular',
      function($rootScope, $cookieStore, Restangular) {
        var messageService = 
          Restangular.all('message'),
            authorService =
          Restangular.all('authors');

        var service = {
          thisAuthor: function() {
            var author;
            if (!$cookieStore.get('thisAuthor')) {
              author = {
                id: guid()
              };
              $cookieStore.put('thisAuthor', author);
              authorService.post(author);
            } else {
              author = $cookieStore.get('thisAuthor');
            }
            return author;
          },
          addMessage: function(msg) {
            var newMsg = msg;
            newMsg.author = service.thisAuthor().id;
            newMsg.createdAt = new Date();
            $rootScope.$broadcast('messages:added');
            return messageService.post(newMsg);
          },
          getMessages: function() {
            return messageService.getList();
          },
          removeMessage: function(msg) {
            $rootScope.$broadcast('messages:removed');
            return msg.remove();
          },
          updateMessage: function(msg) {
            $rootScope.$broadcast('messages:updated');
            return msg.put();
          },
          getAuthorMessages: function() {
            var params = {
              author: service.thisAuthor().id
            };
            return messageService.getList({q: params});
          }
        };
        return service;
      }
      ])
    .controller('MessageController', [
      '$scope', '$timeout', 'Messages', 'Restangular',
      function($scope, $timeout,
          Messages, Restangular) {
        var thisAuthor = Messages.thisAuthor(),
            updateMessageTimeout = undefined;

        $scope.showEdit = false;
        $scope.editMessage = undefined;
        $scope.messages = Messages.getMessages();

        var updateMessages = function() {
          if (updateMessageTimeout) $timeout.cancel(updateMessageTimeout);

          updateMessageTimeout = $timeout(function() {

            $scope.$apply(function() {
              Messages.getMessages().then(function(d) {
                $scope.messages = d;
              });
            });
          }, 500);
        }

        $scope.$on('messages:added', updateMessages);
        $scope.$on('messages:removed', updateMessages);
        $scope.$on('messages:updated', updateMessages);

        $scope.showEditMessage = function(msg) {
          $scope.editMessage = Restangular.copy(msg);
          $scope.showEdit = true;
        }

        $scope.saveEdit = function() {
          Messages.updateMessage($scope.editMessage)
            .then(function(data) {
            $scope.editMessage = undefined;
            $scope.showEdit = false;
          });
        }

        $scope.addMessage = function() {
          Messages.addMessage($scope.newMessage);
          $scope.authorMessagesEmpty = false;
          $scope.newMessage = {};
        };

        $scope.removeMessage = function(msg) {
          Messages.removeMessage(msg);
        }

        $scope.authorMessagesEmpty = false;
        $scope.getAuthorMessages = function() {
          Messages.getAuthorMessages().then(function(d) {
            if (d.length === 0) {
              $scope.authorMessagesEmpty = true;
            } else {
              $scope.authorMessages = d;
            }
          });
        }
      }]);
  })();
</script>

<script type="text/javascript" src="/js/vendor/lodash/dist/lodash.min.js"></script>

<script type="text/javascript" src="/js/vendor/restangular/dist/restangular.js"></script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Breaking the Ice with AngularUI Utils</title>
    <link href="http://www.ng-newsletter.com/posts/angular-ui-utils.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/angular-ui-utils.html"/>
    <updated>2013-09-23T00:00:00-07:00</updated>
    <id>urn:uuid:89ab2def-d850-5687-9933-b7afb8fac474</id>
    <summary>The UI Utils library is a powerful utility package that makes a lot of custom extensions available to your project without needing to reinvent the wheel. 

We’ll cover a few notable features that the ui-utils library gives us, including:

input masking</summary>
    <content type="html"><![CDATA[<p>The UI Utils library is a powerful utility package that makes a lot of custom extensions available to your project without needing to reinvent the wheel. </p>

<p>We&rsquo;ll cover a few notable features that the <code>ui-utils</code> library gives us, including:</p>

<ul>
<li>input masking</li>
<li>custom event handling</li>
<li>custom formatting</li>
<li>jQuery passthrough directives</li>
<li>string inflector</li>
<li>fragment inclusion based on selectors</li>
<li>text highlighting</li>
<li>more&hellip;</li>
</ul>

<h3>Installation</h3>
<pre class="highlight shell"><span class="gp">$ </span>bower install --save angular-ui-utils
</pre>
<p>We&rsquo;ll need to ensure that we include the library in our HTML template. Each component of the <code>ui-utils</code> library is built as an individual module, so we&rsquo;ll need to include each one independently. </p>

<h3>Mask</h3>

<p>When we want to take a credit card or a phone number (or any other input that requires a specific format), we can present a clean UI that tells our users that they are giving us clean input. </p>

<p>We&rsquo;ll need to ensure we include the <code>mask.js</code> library in our HTML:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-utils/modules/mask/mask.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>And set the <code>ui-mask</code> as a dependency for our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.mask'</span><span class="p">])</span>
</pre>
<p>Now, we can specify input masks using the <code>ui-mask</code> directive. The <code>ui-mask</code> directive takes a single format string that follows the formatting rules:</p>

<ul>
<li><code>A</code> - any letter</li>
<li><code>9</code> - any number</li>
<li><code>*</code> - any alphanumeric character</li>
</ul>

<p>For instance, to format a credit card number in an input, we might set the <code>ui-mask</code> directive to the following:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">&quot;ccnum&quot;</span> <span class="na">ui-mask=</span><span class="s">&quot;9999 9999 9999 9999&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.cc&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Credit card number&quot;</span> <span class="nt">/&gt;</span>
</pre>
<blockquote>
<p>Note that, similar to how Angular input works, the input will not be valid until it matches the mask.</p>
</blockquote>

<h4>See it</h4>

<div ng-controller="MaskController" class="payment_form">
<form name="payment">
<div class="creditcard">
  <input name="ccnum" ui-mask="9999 9999 9999 9999" ng-model="user.cc" />
  <div class="placeholder" ng-class="user.cctype"></div>
</div>

<p></form></p>

<p>Try a few credit card numbers out, like:</p>

<ul>
<li><a ng-click="user.cc='5555555555554444'">Mastercard: 5555555555554444</a></li>
<li><a ng-click="user.cc='4111111111111111'">Visa: 4111111111111111</a></li>
<li><a ng-click="user.cc='6011111111111117'">Discover: 6011111111111117</a></li>
</ul>

<p>Or type yours in (don&rsquo;t worry, we&rsquo;re not saving it).</p>

<h5>Credit card: {{ user.cc }}</h5>

<h5>Credit card type: {{ user.cctype }}</h5>

<p></div></p>

<blockquote>
<p>Note that this input only supports credit cards whose input mask matches <code>9999-9999-9999-9999</code>. With a bit more work, we can support other card types.</p>
</blockquote>

<p>In the same sense, we can format an input field with characters or any alphanumeric character.</p>

<h3>ui-event</h3>

<p>Just like the other modules, we&rsquo;ll need to include the <code>event.js</code> library in our HTML:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-utils/modules/event/event.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>And we need to include the <code>ui.event</code> as a dependency for our app, as well:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.event'</span><span class="p">])</span>
</pre>
<p>When we want to handle events that are not natively supported by AngularJS (for instance, if we want the user to double click on an element or handle a blur event), we&rsquo;d have to write a wrapper around the native browser events. </p>

<p>This <code>ui-event</code> module is simply a wrapper around native events; therefore, we can use it to respond to any event that the browser fires on any element. </p>

<p>For instance, let&rsquo;s say we want to reveal an image after the user double clicks on another image. We simply set the <code>ui-event</code> directive to a key-value pair with the event name and the action to take when the element catches the event.</p>

<p>For instance, in our HTML, we can set a double click <code>dblclick</code> event to call a <code>showImage()</code> function on our controller:</p>
<pre class="highlight html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/images/ui/ginger.png&quot;</span> 
      <span class="na">ui-event=</span><span class="s">&quot;{dblclick:'showImage()'}&quot;</span> <span class="nt">/&gt;</span>
</pre>
<p>And in our controller, we can write our the method on the scope like normal:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'DemoController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">showImage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">shouldshowImage</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">shouldshowImage</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<h4>See it</h4>

<div ng-controller="EventController" class="doubleclickdemo">
<img ng-hide="shouldshowImage"
      src="/images/ui/ginger.png" 
      ui-event="{dblclick:'showImage()'}" 
      />
<img ng-show="shouldshowImage"
      src="/images/ui/ginger-exposed.png"
      ui-event="{dblclick:'showImage()'}"
    />
<h5>Double click the image</h5>
</div>

<p>Since the <code>ui-event</code> directive is simply a wrapper around native browser events, we can use it to mimic any browser event on any element.</p>

<p>For instance, if we want to capture a blur or focus event on an element, we can use the <code>ui-event</code> directive to capture these events for us.</p>

<p>Let&rsquo;s say we want to provide some helpful tips for filling out a form. We can set actions on the <code>focus</code> event and the <code>blur</code> event to show and reveal these help tips.</p>

<p>For instance, if we have a form that includes the input fields of name and email, we can attach functions to our <code>blur</code> and <code>focus</code> events to show <code>help</code> events.</p>
<pre class="highlight html"><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Your name&quot;</span> 
    <span class="na">ui-event=</span><span class="s">&quot;{focus: 'showNameHelp=true',
              blur: 'showNameHelp=false'}&quot;</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Your email&quot;</span> 
    <span class="na">ui-event=</span><span class="s">&quot;{focus: 'showEmailHelp=true',
              blur: 'showEmailHelp=false'}&quot;</span>
    <span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<p>With these events set on the input fields, we can show our help fields, depending on which field the user is focused on, in the Angular way (i.e., using <code>ng-show</code> and <code>ng-hide</code>).</p>

<h4>See it</h4>

<div ng-controller="EventController" class="doubleclickdemo" class="row">
<div class="large-8 small-8 columns">
  <form name="form">
    <input type="text" name="name" placeholder="Your name" 
      ui-event="{focus: 'form.showNameHelp=true',
                blur: 'form.showNameHelp=false'}"
      />
    <input type="email" name="email" placeholder="Your email" 
      ui-event="{focus: 'form.showEmailHelp=true',
                blur: 'form.showEmailHelp=false'}"
      />
  </form>
</div>

<div class="large-4 small-4 columns tips">
  <div ng-show="form.showNameHelp">
    Why do we need your name? So we can best serve you&hellip; other help here.
  </div>
  <div ng-show="form.showEmailHelp">
    Why do we need your email? We won&rsquo;t send you any spam,
    </div>
  </div>
</div>

<div class="clear"></div>

<h3>ui-format</h3>

<p>We&rsquo;ll need to ensure we include the <code>format.js</code> library in our HTML:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-utils/modules/format/format.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>And set <code>ui.format</code> as a dependency for our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.format'</span><span class="p">])</span>
</pre>
<p>The <code>format</code> library is a wrapper around different ways to work with string tokens. It enables us to work directly with variable tokens that we expect in our app.</p>

<p>Token replacement with the <code>format</code> library works with either an array or a key-value/JavaScript object. For instance:</p>
<pre class="highlight html">{{ &quot;Hello $0&quot; | format: 'Ari' }}
</pre>
<h4>See it</h4>

<div ng-controller="FormatController">
<div class="code_with_result"><pre ng-non-bindable>{{ "Hello $0" | format: 'Ari' }}</pre></div>
</div>

<p>Alternatively, we can bind the name to a variable on our scope and use the <code>format</code> library to present it in a clean format. Let&rsquo;s say we have a controller that looks like:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.format'</span><span class="p">])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'FormatController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">'Ari'</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<p>We can format the input against that bound variable on the <code>$scope</code>:</p>

<h4>See it</h4>

<div ng-controller="FormatController">
<div class="code_with_result"><pre ng-non-bindable>{{ "Hello $0" | format: name }}</pre></div>

<a ng-click="modifyName=!modifyName">Modify name</a>
  <div ng-show="modifyName">
    <input ng-model="name" placeholder="Or enter another name" name="name" />
  </div>
</div>

<p>Although this example isn&rsquo;t particularly interesting (and this functionality comes out of the box with Angular), it becomes interesting when we want to manipulate text on a key-value basis. </p>

<p>For instance, we can format a string based on the keys of an object we have. Let&rsquo;s say we have an object with a <code>name</code> and an <code>email</code> attribute:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'FormatController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="s1">'Ari'</span><span class="p">,</span>
    <span class="na">email</span><span class="p">:</span> <span class="s1">'ari@fullstack.io'</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<p>We can change our markup to include the keys (i.e., <code>name</code> and <code>email</code>) as <code>tokens</code> such that our app replaces them with input values:</p>
<pre class="highlight html">{{ &quot;Hello :name. Your email is :email&quot; | format: person }}
</pre>
<h4>See it</h4>

<div ng-controller="FormatController">
<div class="code_with_result"><pre ng-non-bindable>{{ "Hello :name. Your email is :email" | format: person }}</pre></div>
</div>

<p>The <code>format</code> module is particularly useful when working with translations or <code>i18n</code> support (for more on translations, check out our <a href="/posts/angular-translate.html">post</a> on i18n support).</p>

<div id="codemirror_link"></div>

<h3>CodeMirror</h3>

<p>The CodeMirror web IDE is pretty fantastic. The community is wildly active, and the support for building plugins inside the IDE is stellar. </p>

<p>The AngularUI library supports embedding CodeMirror instances in our page.</p>

<p>To install the <code>angular-ui-codemirror</code> library, we can use Bower:</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install angular-ui-codemirror
</pre>
<p>In our <code>index.html</code> file, we&rsquo;ll need to reference the <code>angular-ui-codemirror</code> library as a dependency, as well as the <code>codemirror</code> library and any modes that we want to install.</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/codemirror/lib/codemirror.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-codemirror/ui-codemirror.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Once we have completed that set up, we&rsquo;ll need to set the injection of <code>ui.codemirror</code> as a dependency for our application:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'codemirrorApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.codemirror'</span><span class="p">]);</span>
</pre>
<p>Now we can use the <code>ui-codemirror</code> directive on our <code>textarea</code> HTML object to create an editing environment:</p>
<pre class="highlight html"><span class="nt">&lt;textarea</span> <span class="na">ui-codemirror</span> <span class="na">ng-model=</span><span class="s">&quot;code&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</pre>
<h4>See it</h4>

<div class="editor" ng-controller="CodemirrorController">
<textarea ui-codemirror ng-model="code1"></textarea>
</div>

<p>Now, just like using plain CodeMirror, we can set options on our instance. We pass options in the <code>ui-codemirror</code> directive, like so:</p>
<pre class="highlight html"><span class="nt">&lt;textarea</span> <span class="na">ui-codemirror=</span><span class="s">&quot;editorOptions&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;code&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</pre>
<p>Now we can either pass <code>editorOptions</code> as an object that is on a controller (as we did above) or we can even pass those options as a string (that will be parsed):</p>
<pre class="highlight html"><span class="nt">&lt;textarea</span> <span class="na">ui-codemirror=</span><span class="s">&quot;{mode: 'javascript'}&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;code&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</pre>
<p>The CodeMirror plugin has many options that we can use to manipulate our CodeMirror instance, from helping us to handle code events to giving us direct access to the CodeMirror instance.</p>

<p>The <code>ui-codemirror</code> options can take any options that the CodeMirror instance requires. For instance, if we want to change the theme of the CodeMirror instance, we&rsquo;ll need to change options on that instance.</p>

<p>We can get access to it by creating an <code>onLoad</code> event handler that stores the instance of the CodeMirror. Then, we can update the actual CodeMirror instance and do all sorts of fun magic.</p>

<p>To get started, let&rsquo;s pass an <code>onLoad</code> event in our options:</p>
<pre class="highlight javascript"><span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;editor&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;CodemirrorController&quot;</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">textarea</span> <span class="nx">ui</span><span class="o">-</span><span class="nx">codemirror</span><span class="o">=</span><span class="s2">&quot;{
      lineNumbers: true,
      mode: 'javascript',
      onLoad: codemirrorLoaded
    }&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;code1&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/</span><span class="err">textarea&gt;</span>
<span class="o">&lt;</span><span class="sr">/</span><span class="err">div&gt;</span>
</pre>
<p>Now, in our <code>CodemirrorController</code>, we can add the function <code>codemirrorLoaded</code>, which simply stores the CodeMirror instance on our scope:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'CodemirrorController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">editor</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">codemirrorLoaded</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_editor</span><span class="p">){</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">editor</span> <span class="o">=</span> <span class="nx">_editor</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<p>With that set, we can pretty much do anything we want to the CodeMirror instance, as we now have access to it on the scope. </p>

<p>Let&rsquo;s provide an option for the user to change the theme of his CodeMirror instance. We&rsquo;ll provide a dropdown select menu that will display all of the CSS files we have available. When the user selects a new theme, we&rsquo;ll update the theme of the CodeMirror instance.</p>

<p>Inside of our <code>CodemirrorController</code> (ideally, inside of a <em>directive</em>), we can add the functionality to handle theming the instance:</p>
<pre class="highlight javascript"><span class="c1">// ...
</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'CodemirrorController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">editor</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">codemirrorLoaded</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_editor</span><span class="p">){</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">editor</span> <span class="o">=</span> <span class="nx">_editor</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="s1">'3024-night'</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">themes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'3024-day'</span><span class="p">,</span> 
    <span class="s1">'3024-night'</span><span class="p">,</span>
    <span class="s1">'eclipse'</span><span class="p">,</span>
    <span class="s1">'neat'</span><span class="p">,</span>
    <span class="s1">'monokai'</span><span class="p">,</span>
    <span class="s1">'elegant'</span>
  <span class="p">];</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'theme'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeTheme</span><span class="p">(</span><span class="nx">newVal</span><span class="p">);</span> <span class="p">}</span>
  <span class="p">})</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeTheme</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">theme</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">editor</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">editor</span><span class="p">.</span><span class="nx">setOption</span><span class="p">(</span><span class="s1">'theme'</span><span class="p">,</span> <span class="nx">theme</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<h4>See it</h4>

<div class="editor" ng-controller="CodemirrorController">
<textarea ui-codemirror="{
      lineNumbers: true,
      lineWrapping: true,
      mode: 'javascript',
      theme: theme,
      onChange: changed,
      onLoad: codemirrorLoaded
    }" ng-model="code1"></textarea>
<label for="select">Change the editor theme</label>
<select ng-model="theme" name="theme" ng-options="name for name in themes" placeholder="Change the editor theme"></select>
</div>

<p>You can see that this UI element is very powerful. A little more work, and we can create a CodePen or JS Bin.</p>

<p>You can find more <a href="https://github.com/angular-ui/ui-codemirror">here</a>.</p>

<h2>Google Maps</h2>

<p>People often ask us how they can best integrate <a href="http://maps.google.com">Google Maps</a> in Angular apps. </p>

<p>The AngularUI toolkit comes with a Google Maps directive that&rsquo;s pretty darn good.</p>

<h4>See it</h4>

<div ari-iframe>
  <section id="map" ng-controller="MapCtrl" >
    <div ui-map="myMap" ui-options="mapOptions" class="map-canvas"></div>
  </section>
  <script type="text/javascript" src="/js/vendor/angular-ui-utils/modules/event/event.js"></script>
<script type="text/javascript" src="/js/vendor/angular-ui-map/src/map.js"></script>
  <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&callback=onGoogleReady"></script>
  <script type="text/javascript">
    angular.module('appMap', ['ui.map'])
    .controller('MapCtrl', ['$scope', function ($scope) {
    $scope.mapOptions = {
      center: new google.maps.LatLng(37.7833, -122.4167),
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      zoomControl: false,
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    };
  }]);
    function onGoogleReady() {
      angular.bootstrap(document.getElementById("map"), ['appMap']);

    }
  </script>
  <style type="text/css">
  body { margin: 0; padding: 0; }
  .map-canvas { height: 100%; width: 100%; }
  </style>
</div>

<p>To install the <code>angular-ui-map</code> library, we can use Bower:</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install --save angular-ui-map
</pre>
<p>In our <code>index.html</code> file, we&rsquo;ll need to reference this <code>angular-ui-map</code> library, the <code>map</code> library, <b>and the events library</b> as dependencies; we include this last library because <code>map</code> relies on the UI Utils <code>event</code> library.</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-utils/modules/event/event.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-map/src/map.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Lastly, we&rsquo;ll need to load the Google Maps API JavaScript. </p>

<blockquote>
<p>For simplicity&rsquo;s sake, we won&rsquo;t walk through the best practices for loading Google Maps into our app. We&rsquo;ll cover this topic in our upcoming book <strong><a href="http://ng-book.com">ng-book: The Complete Book on AngularJS</a></strong></p>
</blockquote>

<p>To include this JavaScript as a library in our app, Google requires us to have a callback function that alerts our page that the Google Maps object is ready to go. To handle this function, we&rsquo;ll create a callback that the Google API will call on our page.</p>

<p>First, the inclusion:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;https://maps.googleapis.com/maps/api/js?v=3.exp&amp;sensor=false&amp;callback=onGoogleReady&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>With this callback set up, we&rsquo;ll need to set the injection of <code>ui.map</code> as a dependency for our application:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appMap'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.map'</span><span class="p">]);</span>
</pre>
<p>Now we have to <em>manually</em> bootstrap our Angular app, as we&rsquo;re dependent upon the Google Maps JavaScript library to load before we can run. Angular makes it easy. </p>

<p>Notice that when we included the Google Maps API JavaScript, we attached a <code>callback</code> with the name of a function (that we will define) called <code>onGoogleReady</code>. Google will call this function after the Maps API has loaded. Inside this function, we&rsquo;ll tell our Angular app to bootstrap:</p>
<pre class="highlight javascript"><span class="kd">function</span> <span class="nx">onGoogleReady</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">angular</span><span class="p">.</span><span class="nx">bootstrap</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;mapApp&quot;</span><span class="p">),</span> <span class="p">[</span><span class="s1">'appMap'</span><span class="p">]);</span>
<span class="p">}</span>
</pre>
<p>Now we can guarantee that the Google Maps API has loaded for us before our app even boots up.</p>

<p>Next, we can attach our app module to the HTML and place controller (where we will attach our map options) inside of it:</p>
<pre class="highlight html"><span class="nt">&lt;section</span> <span class="na">id=</span><span class="s">&quot;mapApp&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;MapController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ui-map=</span><span class="s">&quot;myMap&quot;</span> 
        <span class="na">ui-options=</span><span class="s">&quot;mapOptions&quot;</span> 
        <span class="na">class=</span><span class="s">&quot;map-canvas&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</pre>
<p>Our <code>section</code> element houses our <code>mapApp</code> and ties the <code>MapController</code> to the DOM element. Inside the <code>app</code> element, we also have a div that holds onto the <code>google.maps.Map</code> object through the <code>ui-map</code> directive and a <code>google.maps.MapOptions</code> object through the <code>ui-options</code> directive created by the Google Maps API.</p>

<p>We now have access to the raw Google Maps objects on the scope of our <code>MapController</code>. From here, we can do all sorts of fun stuff, setting the options we want to manipulate.</p>

<p>Check out the demo below and click <a href="https://gist.github.com/auser/6680563">here</a> for the full source.</p>

<h4>See it</h4>

<div ari-iframe>
  <section id="map" ng-controller="MapCtrl" >
    <input type="number" placeholder="zoom" ng-model="mapOptions.zoom" />
    <label for="select">Change the map type</label>
    <select ng-model="mapOptions.mapTypeId" name="typeId" ng-options="map for map in mapTypes" placeholder="Map type"></select>

    <div ui-map="myMap" ui-options="mapOptions" class="map-canvas"></div>
  </section>
  <script type="text/javascript" src="/js/vendor/angular-ui-utils/modules/event/event.js"></script>
<script type="text/javascript" src="/js/vendor/angular-ui-map/src/map.js"></script>
  <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&callback=onGoogleReady"></script>
  <script type="text/javascript">
    angular.module('appMap', ['ui.map'])
    .controller('MapCtrl', ['$scope', function ($scope) {
    $scope.mapOptions = {
      center: new google.maps.LatLng(37.7833, -122.4167),
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      disableDefaultUI: true,
      zoomControl: true,
      style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
    };
    $scope.mapTypes = [
      google.maps.MapTypeId.ROADMAP,
      google.maps.MapTypeId.SATELLITE,
      google.maps.MapTypeId.HYBRID,
      google.maps.MapTypeId.TERRAIN
    ]
    $scope.$watch('mapOptions.zoom', function(n) {
      if (n) {
        $scope.myMap.setOptions($scope.mapOptions);
      }
    });
    $scope.$watch('mapOptions.mapTypeId', function(n) {
      if (n) {
        $scope.myMap.setOptions($scope.mapOptions);
      }
    })
  }]);
    function onGoogleReady() {
      angular.bootstrap(document.getElementById("map"), ['appMap']);

    }
  </script>
  <style type="text/css">
  body { margin: 0; padding: 0; }
  .map-canvas { height: 175px; width: 100%; }
  </style>
</div>

<p>We&rsquo;ve covered a small portion of the <code>angular-ui</code> library today; we hope that you&rsquo;ll check out the <code>angular-ui</code> library for yourself for many more Angular options. There are plenty of libraries out there to help you build amazing projects.</p>

<p>Get in touch if you have any comments or concerns about this post or any of the others!</p>

<style type="text/css">
  .payment_form input {
    width: 300px;
    height: 28px;
    font-size: 130%;
    padding: 0 5px;
    border-radius: 3px;
  }
  .payment_form .creditcard {
    position: relative;
    width: 300px;
  }
  .payment_form .creditcard .placeholder {
    position: absolute;
    bottom: 4px;
    right: 6px;
    height: 20px;
    width: 32px;
    background-size: 32px 19px;
    background-repeat: no-repeat;
    -webkit-transition: 0.4s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    -moz-transition: 0.4s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    transition: 0.4s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    pointer-events: none;
  }
  .payment_form .placeholder.mastercard {
    background-image: url("/images/ui/mastercard-curved-32px.png");
  }
  .payment_form .placeholder.visa {
    background-image: url("/images/ui/visa-curved-32px.png");
  }
  .payment_form .placeholder.amex {
    background-image: url("/images/ui/american-express-curved-32px.png");
  }
  .payment_form .placeholder.discover {
    background-image: url("/images/ui/discover-curved-32px.png");
  }
  .doubleclickdemo {
    margin: 10px;
  }
  .doubleclickdemo img {
    width: 320px !important;
    height: 225px !important;
  }
  .tips div {
    border: 1px solid #bbc;
    border-radius: 5px;
    padding: 5px;
  }
  .editor .CodeMirror {
    height: 150px !important;
  }
</style>

<script type="text/javascript" src="/js/vendor/angular-ui-utils/modules/format/format.js"></script>

<script type="text/javascript" src="/js/vendor/angular-ui-utils/modules/mask/mask.js"></script>

<script type="text/javascript" src="/js/vendor/angular-ui-utils/modules/event/event.js"></script>

<script type="text/javascript" src="/js/vendor/angular-ui-router/release/angular-ui-router.min.js"></script>

<p><link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/lib/codemirror.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/3024-night.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/3024-day.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/eclipse.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/elegant.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/monokai.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/neat.css" />
<link rel="stylesheet" type="text/css" href="/js/vendor/codemirror/theme/solarized.css" /></p>

<script type="text/javascript" src="/js/vendor/codemirror/lib/codemirror.js"></script>

<script type="text/javascript" src="/js/vendor/angular-ui-codemirror/ui-codemirror.js"></script>

<script type="text/javascript">
  angular.module('uiAngularApp', [
    'ngNewsletter', 
    'ui.format',
    'ui.mask',
    'ui.event',
    'ariIframe',
    'ui.codemirror'
    ])
  .controller('FormatController', ['$scope', function($scope) {
    $scope.name = "Ari";
    $scope.person = {
      name: 'Ari',
      email: 'ari@fullstack.io'
    };
  }])
  .controller('MaskController', ['$scope', function($scope) {
    $scope.user = {};
    $scope.$watch('user.cc', function(v) {
      if (v) {
        var type = getCardType(v);
        if (type) {
          $scope.user.cctype = type;
        } else {
          $scope.user.cctype = undefined;
        }
      } else {
        $scope.user.cctype = undefined;
      }
    })
  }])
  .controller('EventController', ['$scope', function($scope) {
    $scope.showImage = function() {
      $scope.shouldshowImage = !$scope.shouldshowImage;
    }
    $scope.showNameHelp = function() {
      $scope.showNameHelp = !$scope.showNameHelp;
    }
  }])
  .controller('CodemirrorController', ['$scope', function($scope) {
    $scope.editor;
    $scope.code1 = 'function(name) {\n\talert("Hello " + name);\n}';
    $scope.theme = '3024-night';
    $scope.themes = [
      '3024-day', 
      '3024-night',
      'eclipse',
      'neat',
      'monokai',
      'elegant'
    ]; 

    $scope.$watch('theme', function(newVal) {
      if (newVal) {
        $scope.changeTheme(newVal);
      }
    })
    $scope.changeTheme = function(theme) {
      if ($scope.editor) {
        $scope.editor.setOption('theme', theme);
      }
    }
    $scope.codemirrorLoaded = function(_editor){
      $scope.editor = _editor;
    }
  }]);

  function getCardType(num) {
    /* Visa: length 16, prefix 4, dashes optional.
    Mastercard: length 16, prefix 51-55, dashes optional.
    Discover: length 16, prefix 6011, dashes optional.
    American Express: length 15, prefix 34 or 37.
    Diners: length 14, prefix 30, 36, or 38. */
    var types = {
        "visa": "^4([0-9]{12})?",
        "mastercard": "^5[1-5]([0-9]{14})?",
        "amex": "^3[47]([0-9]{13})?",
        "diners": "^3[068](\d{12})?",
        "discover": "^6(?:011|5[0-9]{2})([0-9]{12})?"
      }

    for (type in types) {
      var re = new RegExp(types[type]);
      if (re.test(num)) {
        return type;
      }
    }
    return '';
  }
</script>

<script type="text/javascript" src="/js/vendor/codemirror.js"></script>

<script type="text/javascript" src="/js/vendor/codemirror/mode/htmlmixed/htmlmixed.js"></script>

<script type="text/javascript" src="/js/vendor/codemirror/mode/javascript/javascript.js"></script>

<script type="text/javascript" src="/js/vendor/codemirror/mode/xml/xml.js"></script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Diving deep into the AngularUI Router</title>
    <link href="http://www.ng-newsletter.com/posts/angular-ui-router.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/angular-ui-router.html"/>
    <updated>2013-09-15T00:00:00-07:00</updated>
    <id>urn:uuid:18983529-ccda-5116-9e40-186ab4fb86e1</id>
    <summary>AngularJS is packed with out-of-the-box features that we can use to build an expressive AngularJS app without relying on separate libraries; however, the very active AngularJS community has also built some great libraries that we can take advantage...</summary>
    <content type="html"><![CDATA[<p>AngularJS is packed with out-of-the-box features that we can use to build an expressive AngularJS app without relying on separate libraries; however, the <strong>very active</strong> AngularJS community has also built some great libraries that we can take advantage of to maximize the power of our apps.</p>

<p>This post is the first post in our mini-series where we&rsquo;re covering professional components of the <a href="http://angular-ui.github.io/">AngularUI</a> library. In this post, we&rsquo;ll walk through the <code>ui-router</code>.</p>

<p>The AngularUI library has been broken out into several modules so that, rather than including the entire suite, we can pick and choose the components that we&rsquo;re interested in using.</p>

<p><strong>Quick links:</strong> we&rsquo;ve included two major demos in this article that we are constantly asked about in our classes.</p>

<ul>
<li><a href="#namedviews">Multiple named views</a></li>
<li><a href="#wizard">Wizard form</a></li>
</ul>

<h2>UI-Router</h2>

<p>The <code>ui-router</code> library is one of the most useful that the AngularUI library gives us. It&rsquo;s a routing framework that allows us to organize our interface by a state machine, rather than a simple URL route. </p>

<p>This library provides for a lot of extra control in our views. We can created nested views, use multiple views on the same page, have multiple views that control a single view, and more. For finer grain control and more complex applications, the <code>ui-router</code> is a great library to harness.</p>

<h3>Installation</h3>

<p>To install the <code>ui-router</code> library, we can either download the <a href="http://angular-ui.github.io/ui-router/release/angular-ui-router.js">release</a> or use Bower:</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install angular-ui-router --save
</pre>
<p>We need to link the library to our view:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;app/bower_components/angular-ui-router/release/angular-ui-router.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>And we need to inject the <code>ui.router</code> as a dependency in our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'ui.router'</span><span class="p">])</span>
</pre>
<p>Now, unlike the built-in <code>ngRoute</code> service, the <code>ui-router</code> can nest views, as it works based off states, not just a URL.</p>

<p>Instead of using the <code>ng-view</code> directive as we do with the <code>ngRoute</code> service, we&rsquo;ll use the <code>ui-view</code> directive with <code>ngRoute</code>. </p>

<p>When dealing with routes and states inside of <code>ui-router</code>, we&rsquo;re mainly concerned with which state the application is in as well as at which route the web app currently stands.</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;DemoController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Just like <code>ngRoute</code>, the templates we define at any given state will be placed inside of the <code>&lt;div ui-view&gt;&lt;/div&gt;</code> element. Each of these templates can include their own <code>ui-view</code> as well, which is how we can have <em>nested</em> views inside our routes.</p>

<p>To define a route, we use the <code>.config</code> method, just like normal, but instead of setting our routes on <code>$routeProvider</code>, we set our <em>states</em> on the <code>$stateProvider</code>. </p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">,</span> <span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$stateProvider</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'start'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/start'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/start.html'</span>
    <span class="p">})</span>
<span class="p">});</span>
</pre>
<p>This step assigns the <em>state</em> named <code>start</code> to the state configuration object. The state configuration object, or the <code>stateConfig</code>, has similar options to the route config object, which is how we can configure our states.</p>

<h4>template, templateUrl, templateProvider</h4>

<p>We can set up templates on each of our views using one of the three following options:</p>

<ul>
<li><code>template</code> - A string of HTML content or a function that returns HTML</li>
<li><code>templateUrl</code> - A string URL path to a template or a function that returns a URL path string</li>
<li><code>templateProvider</code> - A function that returns an HTML content string</li>
</ul>

<p>For instance:</p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'home'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h1&gt;Hello {{ name }}&lt;/h1&gt;'</span>
<span class="p">});</span>
</pre>
<h4>Controller</h4>

<p>Just like in <code>ngRoute</code>, we can either associate an already registered controller with a URL (via a string) or we can create a controller function that operates as the controller for the state.</p>

<p>If there is no template defined (in one of the previous options), then the controller will <strong>not</strong> be created.</p>

<h4>Resolve</h4>

<p>Using the <code>resolve</code> functionality, we can resolve a list of dependencies that we can inject into our controller. In <code>ngRoute</code>, the <code>resolve</code> option allows us to resolve promises before the route is actually rendered. Inside <code>angular-route</code>, we have a bit more freedom as to how we can use this option.</p>

<p>The <code>resolve</code> option takes an object where the keys are the names of the dependency to inject into the controller and the values are the <code>factories</code> that are to be resolved.</p>

<p>If a string is passed, then <code>angular-route</code> will try to match an existing registered service. If a function is passed, then the function is injected, and the return value of the function is the dependency. If the function returns a promise, it is resolved <em>before</em> the controller is instantitated and the value (just like <code>ngRoute</code>) is injected into the controller.</p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'home'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// This will return immediately as the 
</span>    <span class="c1">// result is not a promise
</span>    <span class="nl">person</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Ari&quot;</span><span class="p">,</span>
        <span class="na">email</span><span class="p">:</span> <span class="s2">&quot;ari@fullstack.io&quot;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="c1">// This function returns a promise, therefore
</span>    <span class="c1">// it will be resolved before the controller
</span>    <span class="c1">// is instantiated
</span>    <span class="nl">currentDetails</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">$http</span><span class="p">({</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="s1">'/current_details'</span>
      <span class="p">});</span>
    <span class="p">},</span>
    <span class="c1">// We can use the resulting promise in another
</span>    <span class="c1">// resolution
</span>    <span class="nl">facebookId</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">currentDetails</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$http</span><span class="p">({</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'GET'</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="s1">'http://facebook.com/api/current_user'</span><span class="p">,</span>
        <span class="na">params</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">email</span><span class="p">:</span> <span class="nx">currentDetails</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">emails</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="p">}</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">},</span>
  <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">person</span><span class="p">,</span> 
                <span class="nx">currentDetails</span><span class="p">,</span> <span class="nx">facebookId</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="nx">person</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">})</span>
</pre>
<h4>URL</h4>

<p>The <code>url</code> option will assign a URL that the application is at to a specific state inside our app. That way, we can get the same features of deep linking while navigating around the app by state, rather than simply by URL.</p>

<p>This option is similar to the <code>ngRoute</code> URL, but can be considered a major upgrade, as we&rsquo;ll see in a moment.</p>

<p>We can specify the basic route like so:</p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'inbox'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/inbox'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h1&gt;Welcome to your inbox&lt;/h1&gt;'</span>
  <span class="p">});</span>
</pre>
<p>When the user navigates to <code>/inbox</code>, then the app will transition into the <code>inbox</code> state and fill the main <code>ui-view</code> directive with the contents of the template (<code>&lt;h1&gt;Welcome to your inbox&lt;/h1&gt;</code>). </p>

<p>The URL can take several different options, which makes it incredibly powerful. We can set the basic parameters in the URL like we do in <code>ngRoute</code>:</p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'inbox'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/inbox/:inboxId'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h1&gt;Welcome to your inbox&lt;/h1&gt;'</span><span class="p">,</span>
    <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">inboxId</span> <span class="o">=</span> <span class="nx">$stateParams</span><span class="p">.</span><span class="nx">inboxId</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>
</pre>
<p>Now we&rsquo;ll capture the <code>:inboxId</code> as the second component in the URL. For instance, if the app transitions to <code>/inbox/1</code>, then <code>$stateParams.inboxId</code> becomes 1 (as <code>$stateParams</code> will be <code>{inboxId: 1}</code>).</p>

<p>We can also use a different syntax:</p>
<pre class="highlight javascript"><span class="nx">url</span><span class="err">:</span> <span class="s1">'/inbox/{inboxId}'</span>
</pre>
<p>The path must match the URL exactly. Unlike <code>ngRoute</code>, if the user navigates to <code>/inbox/</code>, the above path <em>will</em> work; however, if she navigates to <code>/inbox</code>, the above state will <em>not</em> be activated.</p>

<p>The path also enables us to use regex inside of parameters so that we can set a rule to match against our route. For instance:</p>
<pre class="highlight javascript"><span class="c1">// Match only inbox ids that contain
// 6 hexidecimal digits
</span><span class="nx">url</span><span class="err">:</span> <span class="s1">'/inbox/{inboxId:[0-9a-fA-F]{6}}'</span><span class="p">,</span>
<span class="c1">// Or
// match every url at the end of `/inbox`
// to `inboxId` (a catch-all)
</span><span class="nx">url</span><span class="err">:</span> <span class="s1">'/inbox/{inboxId:.*}'</span>
</pre>
<blockquote>
<p>Note, we cannot use capture groups inside the route: The route resolver is not able to resolve the route.</p>
</blockquote>

<p>We can even specify query parameters in our route:</p>
<pre class="highlight javascript"><span class="c1">// will match a route such as
// /inbox?sort=ascending
</span><span class="nx">url</span><span class="err">:</span> <span class="s1">'/inbox?sort'</span>
</pre>
<h4>Nested routing</h4>

<p>We can use the <code>url</code> parameter to append routes in order to provide for nested routes. Using it in this way enables us to support having multiple <code>ui-views</code> inside our page and our templates. For instance, we can nest individual routes inside of our <code>/inbox</code> route above. </p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'inbox'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/inbox/:inboxId'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div&gt;&lt;h1&gt;Welcome to your inbox&lt;/h1&gt;\
            &lt;a ui-sref=&quot;inbox.priority&quot;&gt;Show priority&lt;/a&gt;\
            &lt;div ui-view&gt;&lt;/div&gt;\
            &lt;/div&gt;'</span><span class="p">,</span>
    <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">inboxId</span> <span class="o">=</span> <span class="nx">$stateParams</span><span class="p">.</span><span class="nx">inboxId</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'inbox.priority'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/priority'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h2&gt;Your priority inbox&lt;/h2&gt;'</span>
  <span class="p">});</span>
</pre>
<p>Our first route will match as we expect from above. We now also have a second route, a child route that matches under the <code>inbox</code> route: Our syntax (<code>.</code>) indicates that it is a child.</p>

<p><code>/inbox/1</code> matches the first state, and <code>/inbox/1/priority</code> matches the second state. With this syntax, we can support a nested URL inside of the parent route. The <code>ui-view</code> inside of the parent view will resolve to the <code>priority</code> inbox.</p>

<h4>Params</h4>

<p>The <code>params</code> option is an array of parameter names or regexes. This option <strong>cannot</strong> be combined with the <code>url</code> option. When the state becomes active, the app will populate the <code>$stateParams</code> service with these parameters.</p>

<h4>Views</h4>

<p>We can set multiple <em>named</em> views inside of a state. This feature is a particularly powerful one in <code>ui-router</code>: Inside of a single view, we can define multiple views that we can reference inside of a single template.</p>

<blockquote>
<p>If we set the <code>views</code> parameter, then the state&rsquo;s <code>templateUrl</code>, <code>template</code>, and <code>templateProvider</code> will be ignored. If we want to include a parent template in our routes, we&rsquo;ll need to create an abstract template the contains a template.</p>
</blockquote>

<p>Let&rsquo;s say we have a view that looks like:</p>
<pre class="highlight html"><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;filters&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;mailbox&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ui-view=</span><span class="s">&quot;priority&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>We can now create <em>named</em> views that fill each of these individual templates. Each of the subviews can contain their own templates, controllers, and resolve data.</p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'inbox'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">views</span><span class="p">:</span> <span class="p">{</span>
      <span class="s1">'filters'</span><span class="err">:</span> <span class="p">{</span>
        <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h4&gt;Filter inbox&lt;/h4&gt;'</span><span class="p">,</span>
        <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{}</span>
      <span class="p">},</span>
      <span class="s1">'mailbox'</span><span class="err">:</span> <span class="p">{</span>
        <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/mailbox.html'</span>
      <span class="p">},</span>
      <span class="s1">'priority'</span><span class="err">:</span> <span class="p">{</span>
        <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h4&gt;Priority inbox&lt;/h4&gt;'</span><span class="p">,</span>
        <span class="na">resolve</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">facebook</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">FB</span><span class="p">.</span><span class="nx">messages</span><span class="p">();</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">});</span>
</pre>
<p>In this example, we have two named views embedded inside an abstract view.</p>

<div id="namedviews"></div>

<h4>See it</h4>

<div ari-iframe>
  <div id="app" ng-app="panesApp">
    <div ng-controller="NestedViewsController">
      <h2>Multiple named views</h2>
      <div ui-view></div>
    </div>
  </div>
  <script type="text/javascript" src="/js/vendor/angular-ui-router/release/angular-ui-router.min.js"></script>
  <script type="text/javascript" src="/js/posts/d3.js"></script>
  <script type="text/javascript">
    angular.module('panesApp', [
      'd3',
      'ui.router',
      'panesApp.controllers'
      ])
    .config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
      $urlRouterProvider.otherwise('/');

      $stateProvider
        .state('parent', {
          abstract: true,
          template: '<div class="row">\
            <div class="large-4 small-4 columns" ui-view="data"></div>\
            <div class="large-8 small-8 columns" ui-view="d3"></div>\
            </div>\
            <style type="text/css"> .chart rect {stroke:white;}</style>'
        })
        .state('parent.home', {
          url: '/',
          views: {
            data: {
              template: '<table>\
                <thead>\
                  <tr><th colspan="2">Girls to boys percent</th></tr>\
                </thead>\
                <tbody>\
                  <tr ng-repeat="obj in data">\
                    <td ng-bind="data[$index].name"></td>\
                    <td><input ng-model="data[$index].percent" type="number" min="1" placeholder="Percent" /></td>\
                  </tr>\
                </tbody></table>'
            },
            d3: {
              template: '<div id="d3"></div>',
              controller: function($scope, d3Service) {
                d3Service.d3().then(function(d3) {

                  var width = 400,
                      height = 150,
                      color = d3.scale.category20();

                  var chart = d3.select(
                      document.getElementById("d3")
                      ).append("svg")
                      .attr("class", "chart")
                      .attr("width", width)
                      .attr("height", height)
                      .append("g")
                      .attr("transform", "translate(10,15)");

                    $scope.$watch('data', function(newData) {
                      var data = [];
                      angular.forEach(newData, function(d) {
                        data.push(d.percent);
                      });
                      $scope.render(data);
                    }, true);

                  $scope.render = function(data) {
                    chart.selectAll('*').remove();

                    var x = d3.scale.linear()
                        .domain([0, d3.max(data)])
                        .range(["0px", width + "px"]);
                    var y = d3.scale.ordinal()
                        .domain(data)
                        .rangeBands([0, 120]);

                  chart.selectAll("line")
                      .data(x.ticks(10))
                    .enter().append("line")
                      .attr("x1", x)
                      .attr("x2", x)
                      .attr("y1", 0)
                      .attr("y2", 120)
                      .style("stroke", "#ccc");

                  chart.selectAll(".rule")
                      .data(x.ticks(10))
                    .enter().append("text")
                      .attr("class", "rule")
                      .attr("x", x)
                      .attr("y", 0)
                      .attr("dy", -3)
                      .attr("text-anchor", "middle")
                      .text(String);

                  chart.selectAll("rect")
                      .data(data)
                    .enter().append("rect")
                      .attr("y", y)
                      .attr("width", x)
                      .attr("height", y.rangeBand())
                      .attr('fill', function(d) {
                        return color(d);
                      });

                  chart.selectAll(".bar")
                      .data(data)
                    .enter().append("text")
                      .attr("class", "bar")
                      .attr("x", x)
                      .attr("y", function(d) { return y(d) + y.rangeBand() / 2; })
                      .attr("dx", -12)
                      .attr("dy", ".35em")
                      .attr("text-anchor", "end")
                      .text(String);

                  chart.append("line")
                      .attr("y1", 0)
                      .attr("y2", 120)
                      .style("stroke", "#000");

                  };
                  $scope.render();
                });
              }
            }
          }
        });
    }]);
    angular.module('panesApp.controllers', [])
    .controller('NestedViewsController', ['$scope', '$state', function($scope, $state) {
      $scope.data = [
        {name: "Chrome", percent:20},
        {name: "Firefox", percent:30},
        {name: "Safari", percent:60}
      ];
      $scope.signup = function() {
      }
    }]);
  </script>
</div>

<p><a href="https://gist.github.com/auser/6590929" target="_blank">Full source</a></p>

<h4>Abstract</h4>

<p>We can never directly activate an abstract template, but we can set up descendants to activate.</p>

<p>Abstract templates can provide a template wrapper around multiple named views, or they can pass <code>$scope</code> objects to descendant children. We can use them to pass around resolved dependencies or custom data or simply to nest several routes under the same &lsquo;url&rsquo; (e.g., have all routes under the <code>/admin</code> URL).</p>

<p>Setting up an abstract template is just like setting up a regular state, except that we&rsquo;ll set the <code>abstract</code> property:</p>
<pre class="highlight javascript"><span class="nx">$stateProvider</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'admin'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">abstract</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/admin'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div ui-view&gt;&lt;/div&gt;'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'admin.index'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/index'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h3&gt;Admin index&lt;/h3&gt;'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'admin.users'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">url</span><span class="p">:</span> <span class="s1">'/users'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;ul&gt;...&lt;/ul&gt;'</span>
  <span class="p">});</span>
</pre>
<h4>onEnter, onExit</h4>

<p>Our app calls these callbacks when we transition into or out of a view. For both options, we can set a function we want called; these functions have access to the resolved data. </p>

<p>These callbacks give us the ability to trigger an action on a new view or before we head out to another state. It&rsquo;s a good way to launch an &ldquo;Are you sure?&rdquo; modal view or request the user log in before they head into this state.</p>

<h4>Data</h4>

<p>We can attach arbitrary data to our state configObject. This data is similar in the <code>resolve</code> property, except that this data will <strong>not</strong> be injected into the controller, nor will <code>promises</code> be resolved. </p>

<p>Attaching data in this way is particularly useful when passing data to child states from a parent state.</p>

<h3>Events!</h3>

<p>Like the <code>ngRoute</code> service, the <code>angular-route</code> service fires events at different times during the state lifecycle. We can also attach actions to these events inside of our application by listening on the <code>$scope</code>. </p>

<p>All of the following events fire on the <code>$rootScope</code>, so we can listen to these events on any of our <code>$scope</code> objects:</p>

<h4>State change events</h4>

<p>We can listen to the events as follows:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">'$stateChangeStart'</span><span class="p">,</span> 
<span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">,</span> <span class="nx">toState</span><span class="p">,</span> <span class="nx">toParams</span><span class="p">,</span> <span class="nx">fromState</span><span class="p">,</span> <span class="nx">fromParams</span><span class="p">),</span> <span class="p">{</span>
  <span class="c1">// We can prevent this state from completing
</span>  <span class="nx">evt</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
<span class="p">});</span>
</pre>
<p>The events that fire are as follows:</p>

<h5><code>$stateChangeStart</code></h5>

<p>This event fires when the transition from one state to another <strong>begins</strong>.</p>

<h5><code>$stateChangeSuccess</code></h5>

<p>This event fires when the transition from one state to another <strong>is complete</strong>.</p>

<h5><code>$stateChangeError</code></h5>

<p>This event fires when an error occurs during the transition. Such errors are usually due to either a template that cannot be resolved or a resolve promise that fails to resolve.</p>

<h4>View load events</h4>

<p>The <code>ui-router</code> also provides events at the view loading stage:</p>

<h5>$viewContentLoading</h5>

<p>This event fires when the view begins loading and occurs before the DOM is rendered. </p>

<p>We can listen to this event like so:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">'$viewContentLoading'</span><span class="p">,</span> 
<span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">viewConfig</span><span class="p">){</span> 
    <span class="c1">// Access to all the view config properties.
</span>    <span class="c1">// and one special property 'targetView'
</span>    <span class="c1">// viewConfig.targetView 
</span><span class="p">});</span>
</pre>
<h5>$viewContentLoaded</h5>

<p>This event fires after the view has been loaded and after the DOM is rendered.</p>

<h3>$stateParams</h3>

<p>Above, we used the <code>$stateParams</code> to pick out the different <code>params</code> options from the <code>url</code> parameters. This service is how we&rsquo;ll hand data different components of our <code>url</code>. </p>

<p>For instance, if we have a URL in our <code>inbox</code> state that looks like:</p>
<pre class="highlight javascript"><span class="nx">url</span><span class="err">:</span> <span class="s1">'/inbox/:inboxId/messages/{sorted}?from&amp;to'</span>
</pre>
<p>and our user finds their way to this route:</p>
<pre class="highlight javascript"><span class="o">/</span><span class="nx">inbox</span><span class="o">/</span><span class="mi">123</span><span class="o">/</span><span class="nx">messages</span><span class="o">/</span><span class="nx">ascending</span><span class="p">?</span><span class="nx">from</span><span class="o">=</span><span class="mi">10</span><span class="o">&amp;</span><span class="nx">to</span><span class="o">=</span><span class="mi">20</span>
</pre>
<p>then our <code>$stateParams</code> object will result in:</p>
<pre class="highlight javascript"><span class="p">{</span><span class="na">inboxId</span><span class="p">:</span> <span class="s1">'123'</span><span class="p">,</span> <span class="na">sorted</span><span class="p">:</span> <span class="s1">'ascending'</span><span class="p">,</span> <span class="na">from</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="na">to</span><span class="p">:</span> <span class="mi">20</span><span class="p">}</span>
</pre>
<h3>$urlRouterProvider</h3>

<p>Just like <code>ngRoute</code>, we have access to a route provider that we can use to build rules around what happens when a particular URL is activated. </p>

<p>The states that we create activate themselves at different URLs, so the <code>$urlRouterProvider</code> is not necessary for managing activating and loading states. It does come in handy when we want to manage events that happen outside of the scope of our states, such as with redirection or authentication.</p>

<blockquote>
<p>We can use the <code>$urlRouterProvider</code> in our module&rsquo;s config function.</p>
</blockquote>

<h5><code>when()</code></h5>

<p>The <code>when</code> function takes two parameters: the incoming path that we want to match and the path that we want to redirect to (or a function that is invoked when we match the path).</p>

<p>To set up redirection, we&rsquo;ll set the <code>when</code> method to take a string. For instance, if we want to redirect an empty route to our <code>/inbox</code> route:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">''</span><span class="p">,</span> <span class="s1">'/inbox'</span><span class="p">);</span>
<span class="p">});</span>
</pre>
<p>If we pass a function, then it will be <code>invoked</code> when we match the path. The handler can return one of three values:</p>

<ul>
<li><strong>falsy</strong> - This response tells the <code>$urlRouter</code> that the rule didn&rsquo;t match and it should try finding a different state that does match, which can be useful if we want to ensure a user has valid access to a URL.</li>
<li><strong>a string</strong> - The <code>$urlRouter</code> will treat a string value as a redirect URL.</li>
<li><strong>truthy or undefined</strong> - This response lets the <code>$urlRouter</code> know that we&rsquo;ve handled the URL.</li>
</ul>

<h5><code>otherwise()</code></h5>

<p>Just like the <code>otherwise()</code> method in <code>ngRoute</code>, the <code>otherwise()</code> method here redirects a user if no other routes are matched. This method is a good way to create a <em>default</em> URL, for instance.</p>

<p>The <code>otherwise()</code> method takes a single parameter: either a string or a function.</p>

<p>If we pass in a string, then any invalid or unmatched routes will be redirected to the string as a specified URL.</p>

<p>If we pass in a function, it will be invoked if no other route is matched, and we&rsquo;ll be responsible for handling the return.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span><span class="p">(</span><span class="s1">'/'</span><span class="p">);</span>
  <span class="c1">// or
</span>  <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">otherwise</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">$injector</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">'/'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</pre>
<h5><code>rule()</code></h5>

<p>If we want to bypass any of the URL matching or want to do some route manipulation before other routes, we can use the <code>rule()</code> function. </p>

<p>We must return a valid path as a string when using the <code>rule()</code> function: </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$urlRouterProvider</span><span class="p">){</span>
  <span class="nx">$urlRouterProvider</span><span class="p">.</span><span class="nx">rule</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">$injector</span><span class="p">,</span> <span class="nx">$location</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s1">'/index'</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">})</span>
</pre>
<h3>Create a sign-up wizard</h3>

<p>Why does it matter if we use a new, more powerful router than the built-in <code>ngRoute</code> provider? </p>

<p>A useful case for using the <code>ui-router</code> is when we want to create a sign-up wizard to walk our users through the process of signing up for our service.</p>

<p>Using the <code>ui-router</code>, we&rsquo;ll create a quick signup service with a single controller that can handle the signup.</p>

<p>First, we&rsquo;ll create a view for the app:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;WizardSignupController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>Signup wizard<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ui-view</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Inside of this view, we&rsquo;ll house our signup views. Next, in our signup wizard we&rsquo;ll need three stages:</p>

<ul>
<li><strong>start</strong> - At this stage, we&rsquo;ll take the user&rsquo;s name and introduce him to our signup wizard.</li>
<li><strong>email</strong> - Here, we&rsquo;ll take the user&rsquo;s email in the second step.</li>
<li><strong>finish</strong> - At this point, the user will have completed our signup process and we&rsquo;ll simply show them a complete page. </li>
</ul>

<blockquote>
<p>In a <em>real</em> app, the <strong>finish</strong> stage would likely send the registration data back to a server and handle real registration. Here, we have no back end, so we&rsquo;ll just show the view.</p>
</blockquote>

<p>Our signup process will depend on a <code>wizardapp.controllers</code> module that houses our <code>WizardSignupController</code>.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'wizardApp'</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">'ui.router'</span><span class="p">,</span>
  <span class="s1">'wizardapp.controllers'</span>
  <span class="p">]);</span>
</pre>
<p>Our <code>WizardSignupController</code> simply houses the <code>$scope.user</code> object that we&rsquo;ll carry with us through the signup process, as well as the signup action.  </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'wizardapp.controllers'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'WizardSignupController'</span><span class="p">,</span> 
  <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$state'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$state</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}]);</span>
</pre>
<p>Now, the wizard process logic houses the majority of the work. Let&rsquo;s set up this logic in the <code>config()</code> function of our app:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'wizardApp'</span><span class="p">,</span> <span class="p">[</span>
  <span class="s1">'ui.router'</span><span class="p">,</span> <span class="s1">'wizardapp.controllers'</span>
  <span class="p">])</span>
<span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">'$stateProvider'</span><span class="p">,</span> <span class="s1">'$urlRouterProvider'</span><span class="p">,</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">,</span> <span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$stateProvider</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'start'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/step_1'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_1.html'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'email'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/step_2'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_2.html'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'finish'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/finish'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_3.html'</span>
    <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>With these options set up, we have our basic flow all done. Now, if the user navigates to the route <code>/step_1</code>, they are brought to the beginning of the flow. Although it might make sense that our entire flow takes place at the root URL (i.e., <code>/step_1</code>), we might want to house that flow in a sublocation (<code>/wizard/step_1</code>, for instance).</p>

<p>To do so, we&rsquo;ll set up an <code>abstract</code> state that houses the rest of our steps:</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">'$stateProvider'</span><span class="p">,</span> <span class="s1">'$urlRouterProvider'</span><span class="p">,</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">,</span> <span class="nx">$urlRouterProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$stateProvider</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'wizard'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">abstract</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/wizard'</span><span class="p">,</span>
      <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div&gt;&lt;div ui-view&gt;&lt;/div&gt;&lt;/div&gt;'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'wizard.start'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/step_1'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_1.html'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'wizard.email'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/step_2'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_2.html'</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'wizard.finish'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'/finish'</span><span class="p">,</span>
      <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_3.html'</span>
    <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>Now, instead of having our routes at a top level, we can nest them safely inside our <code>/wizard</code> URL.</p>

<p>To navigate between our different states, we&rsquo;ll use the ui-router directive <code>ui-sref</code> on our links. This directive simply translates the <code>href</code> on the link to the next state.</p>

<p>For instance, our <code>step_1.html</code> looks like:</p>
<pre class="highlight html"><span class="c">&lt;!-- step_1.html --&gt;</span>
<span class="nt">&lt;h3&gt;</span>Step 1<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;form</span> <span class="na">ng-submit=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Your name&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;Next&quot;</span> <span class="na">ui-sref=</span><span class="s">&quot;wizard.email&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<p>We also want to attach an action that happens at the end of the signup process that calls our <code>signup</code> function on our parent controller <code>WizardSignupController</code>. We&rsquo;ll set a controller on the final step of the wizard process that simply calls the function on the <code>$scope</code>. Because our entire wizard is encapsulated in our <code>WizardSignupController</code>, we&rsquo;ll be able to use the nested scope property of scopes like normal.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">'wizard.finish'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">url</span><span class="p">:</span> <span class="s1">'/finish'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'partials/wizard/step_3.html'</span><span class="p">,</span>
  <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">signup</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<div id="wizard"></div>

<h4>See it</h4>

<div ari-iframe>
  <div ng-app="wizardApp">
    <div ng-controller="WizardSignupController">
      <h2>Signup wizard</h2>
      <div ui-view></div>
    </div>
  </div>
  <script type="text/javascript" src="/js/vendor/angular-ui-router/release/angular-ui-router.min.js"></script>
  <script type="text/javascript">
    angular.module('wizardApp', [
      'ui.router',
      'wizardapp.controllers'
      ])
    .config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
      $urlRouterProvider.otherwise('/wizard/start');

      $stateProvider
        .state('wizard', {
          abstract: true,
          url: '/wizard',
          template: '<div>\
            <div ui-view></div>\
            </div>'
        })
        .state('wizard.start', {
          url: '/start',
          template: '<h3>Step 1</h3>\
            <form ng-submit="">\
            <input type="text" ng-model="user.name" placeholder="Your name" />\
            <input type="submit" class="button" value="Next" ui-sref="wizard.email"/>\
            </form>\
          '
        })
        .state('wizard.email', {
          url: '/email',
          template: '<h3>Step 2</h3>\
            <form ng-submit="">\
            <input type="email" ng-model="user.email" placeholder="Your email" />\
            <input type="submit" class="button" value="Next" ui-sref="wizard.finish"/>\
            </form>\
          '
        })
        .state('wizard.finish', {
          url: '/complete',
          template: '<h3>Congrats! You signed up!</h3>\
            <h5>Your name: {{ user.name }}</h5>\
            <h5>Your email: {{ user.email }}</h5>\
            <a class="button" ui-sref="wizard.start">Start over</a> \
          ',
          controller: function($scope) {
            $scope.signup();
          }
        })
    }]);
    angular.module('wizardapp.controllers', [])
    .controller('WizardSignupController', ['$scope', '$state', function($scope, $state) {
      $scope.user = {};
      $scope.signup = function() {
      }
    }]);
  </script>
  <style type="text/css">
    body {
      padding: 0 15px;
    }
  </style>
</div>

<p><a href="https://gist.github.com/auser/6590977" target="_blank">Full source</a></p>

<p>In this post, we covered the <code>ui-router</code> in-depth and almost the entirety of the features. We find the library incredibly useful and we hope you do too.</p>

<p>Feel free to ping us with any questions, comments, or just to say hey and stay tuned for news about our upcoming AngularJS book. It covers this topic and much much more. Sign up on the mailing list below to receive a free sample chapter of the book.</p>

<script type="text/javascript" src="/js/vendor/angular-ui-router/release/angular-ui-router.min.js"></script>

<script type="text/javascript" src="/js/posts/d3.js"></script>

<script type="text/javascript">
  angular.module('uiAngularApp', [
    'ngNewsletter', 
    'ariIframe',
    ]);
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">D3 on AngularJS</title>
    <link href="http://www.ng-newsletter.com/posts/d3-on-angular.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/d3-on-angular.html"/>
    <updated>2013-09-09T00:00:00-07:00</updated>
    <id>urn:uuid:44fb7a27-1c1e-581a-8c62-c09d8423a952</id>
    <summary>D3, the javascript library for manipulating document-based data is insanely expressive and helps bring data to life through HTML, SVG, and CSS. It has a large, growing community and there are tons of examples for what can be done with it. 

D3 stands...</summary>
    <content type="html"><![CDATA[<p>D3, the javascript library for manipulating document-based data is insanely expressive and helps bring data to life through HTML, SVG, and CSS. It has a large, growing community and there are tons of <a href="https://github.com/mbostock/d3/wiki/Gallery">examples</a> for what can be done with it. </p>

<p><a href="http://d3js.org/">D3</a> stands for Data-Driven Documents, and is described by the authors as follows:</p>

<blockquote>
<p>&ldquo;D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG and CSS. D3’s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.&rdquo;</p>
</blockquote>

<p>Combining the power of D3 and Angular can be challenging and confusing. We constantly get asked how to integrate the two in our classes. In this post, we aim to clear the confusion and bring you the best documentation on how to integrate AngularJS and D3.</p>

<h2>Examples of using D3 with angular</h2>

<div class="large-12 columns" ng-controller="MainCtrl">
  <div d3-bars data="data" class="large-6 small-6 columns"></div>
  <div d3-arc class="large-6 small-6 columns"></div>
</div>

<p>The <em>Angular</em> way of integrating D3 into AngularJS is by using a directive. If you&rsquo;re not familiar with directives, they are Angular&rsquo;s way of extending the functionality of HTML. They are, at their core <em>functions</em> that are executed on a DOM element that give the element functionality. All tags in AngularJS are directives. For more information, see our post about how to <a href="http://www.ng-newsletter.com/posts/directives.html">Build custom directives with AngularJS</a>.</p>

<h2>We&rsquo;ve released a book called D3 on AngularJS</h2>

<p>We&rsquo;ve released a book called <a href="https://leanpub.com/d3angularjs">D3 on AngularJS</a>. It&rsquo;s available now on leanpub. Check it out!</p>

<h2>Using d3 with dependency injection</h2>

<p>This step is <em>somewhat</em> optional. If you want do not want to use dependency injection you can add d3.js to your index.html file as normal and skip this section, but we <strong>highly</strong> recommend you don&rsquo;t.</p>

<p>By using dependecy injection, we can keep our global namespace clean and can <em>inject</em> our dependencies like normal. </p>

<p>All the work that we&rsquo;ll do with our <em>d3</em> library, we&rsquo;ll do on a new module with the name <code>d3</code>. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'d3'</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="p">[</span><span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">d3</span><span class="p">;</span>
    <span class="c1">// insert d3 code here
</span>    <span class="k">return</span> <span class="nx">d3</span><span class="p">;</span>
  <span class="p">}];</span>
</pre>
<p>With this factory, we can add our custom code to our <code>d3</code> element. With this in place, we can <em>inject</em> our <code>d3</code> service into our code by adding it as a dependency to our <code>app</code> module, like normal.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'app'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3'</span><span class="p">]);</span>
</pre>
<p>We&rsquo;ll <em>inject</em> our <code>d3Service</code> into our directive to use it. For instance:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.directives'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3'</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'barChart'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="c1">// directive code
</span>    <span class="p">}</span>
  <span class="p">}]);</span>
</pre>
<p>In order to actually use our <code>d3</code> library, we&rsquo;ll need to include it on the page. We can either do this by copy-and-pasting the d3 code in our factory (as it shows above), or you can inject it on the page in the factory. </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'d3'</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$document'</span><span class="p">,</span> <span class="s1">'$q'</span><span class="p">,</span> <span class="s1">'$rootScope'</span><span class="p">,</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">$document</span><span class="p">,</span> <span class="nx">$q</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
      <span class="kd">function</span> <span class="nx">onScriptLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Load client in the browser
</span>        <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">d</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">d3</span><span class="p">);</span> <span class="p">});</span>
      <span class="p">}</span>
      <span class="c1">// Create a script tag with d3 as the source
</span>      <span class="c1">// and call our onScriptLoad callback when it
</span>      <span class="c1">// has been loaded
</span>      <span class="kd">var</span> <span class="nx">scriptTag</span> <span class="o">=</span> <span class="nx">$document</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'script'</span><span class="p">);</span>
      <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">'text/javascript'</span><span class="p">;</span> 
      <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'http://d3js.org/d3.v3.min.js'</span><span class="p">;</span>
      <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s1">'complete'</span><span class="p">)</span> <span class="nx">onScriptLoad</span><span class="p">();</span>
      <span class="p">}</span>
      <span class="nx">scriptTag</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">onScriptLoad</span><span class="p">;</span>

      <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">$document</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">'body'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
      <span class="nx">s</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">scriptTag</span><span class="p">);</span>

      <span class="k">return</span> <span class="p">{</span>
        <span class="na">d3</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span> <span class="p">}</span>
      <span class="p">};</span>
<span class="p">}]);</span>
</pre>
<p>If you choose to use this method, when we use the <code>d3Service</code>, we&rsquo;ll need to wait on the resolution of the promise to return by using the <code>.then</code> method on the <code>d3Service</code>. For example:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.directives'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3'</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'barChart'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d3Service</span><span class="p">.</span><span class="nx">d3</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d3</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// d3 is the raw d3 object
</span>        <span class="p">});</span>
      <span class="p">}}</span>
  <span class="p">}]);</span>
</pre>
<h2>Creating our first basic d3 directive</h2>

<p>In this section we will learn how to create a basic d3 directive that will automatically size to the width of parent element.  In addition, we&rsquo;ll set watchers to redraw the d3 when the parent element size changes.</p>

<p>This is advantageous when you want to make an your d3 responsive based on different layouts such as mobile or tablet. Additionally the d3 will re-render on a window re-size so it will never be out of scale with your design.</p>

<blockquote>
<p>Note: we won&rsquo;t be diving too much into details about our d3 source (there are <a href="http://alignedleft.com/tutorials/d3">many</a> <a href="http://christopheviau.com/d3_tutorial/">great</a> <a href="http://mbostock.github.io/d3/tutorial/circle.html">tutorials</a> on <a href="http://www.janwillemtulp.com/category/d3/">d3</a> available on the web), we&rsquo;ll look at a few of the particulars for working with AngularJS in our code.</p>
</blockquote>

<p>In order to set this up we need to divide our d3 code into two sections. </p>

<ul>
<li>Static code, the code that does <strong>not</strong> change on render, such as the parent d3 element, watcher functions, and other helper functions</li>
<li>Dynamic code, the code that will update during a render, such as height, width, data, and scales.</li>
</ul>

<p>We&rsquo;ll create a simple bar chart with hardcoded data that we&rsquo;ll later pull out as a dynamic source. </p>

<p>Assuming we are injecting our <code>d3</code> service, as we did above, we&rsquo;ll create the skeleton of our directive:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appApp.directives'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'d3Bars'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
    <span class="p">};</span>
  <span class="p">}]);</span>
</pre>
<p>Now, it&rsquo;s debatable where we want to add our d3 code, in either the <code>link</code> property or the <code>compile</code> property. If you&rsquo;re not familiar with the difference, check out <a href="http://www.ng-newsletter.com/posts/directives.html">our in-depth directive post</a>. For simplicity, we&rsquo;ll use the <code>link</code> function to house our d3 code. </p>

<p>In this example, we&rsquo;re restricting our directive to either be an element (E) or an attribute (A). </p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appApp.directives'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'d3Bars'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{},</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d3Service</span><span class="p">.</span><span class="nx">d3</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d3</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// our d3 code will go here
</span>        <span class="p">});</span>
      <span class="p">}};</span>
  <span class="p">}]);</span>
</pre>
<p>At this point, we have access to our <code>d3</code> object and can start to build our svg. Appending the svg to the element where the directives is called is fairly trivial. We&rsquo;ll select the raw element and append the <code>svg</code> element to it. </p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">);</span>
</pre>
<p>In order to make this responsive, we&rsquo;ll need to set the style of the the element to have a width of 100%. This will force the svg to be contained in the entire containing element.</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;svg&quot;</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="s1">'100%'</span><span class="p">);</span>
</pre>
<p>Next, we&rsquo;ll set up two watchers. The first watcher will check if the div has been resized using the <code>window.onresize</code> event. When this browser event is fired, we want to apply the change to the angular <code>$scope</code>. We&rsquo;ll also need to check the size of the parent element to see if the d3 svg element needs to be re-rendered.</p>

<p>We can find the width of the parent element with a bit of DOM-dancing with the following: <code>d3.select(ele[0]).node().offsetWidth</code> (thanks to <a href="http://www.ng-newsletter.com/posts/d3-on-angular.html#comment-1038971606">Adam Pearce</a>) for pointing this out). As of now, we our directive looks like this:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appApp.directives'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'d3Bars'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{},</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">d3Service</span><span class="p">.</span><span class="nx">d3</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d3</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">ele</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'svg'</span><span class="p">)</span>
            <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="s1">'100%'</span><span class="p">);</span>

          <span class="c1">// Browser onresize event
</span>          <span class="nb">window</span><span class="p">.</span><span class="nx">onresize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">();</span>
          <span class="p">};</span>

          <span class="c1">// hard-code data
</span>          <span class="nx">scope</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Greg&quot;</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">98</span><span class="p">},</span>
            <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Ari&quot;</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">96</span><span class="p">},</span>
            <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Q'</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">75</span><span class="p">},</span>
            <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Loser&quot;</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">48</span><span class="p">}</span>
          <span class="p">];</span>

          <span class="c1">// Watch for resize event
</span>          <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$window</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">innerWidth</span><span class="p">;</span>
          <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">scope</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
          <span class="p">});</span>

          <span class="nx">scope</span><span class="p">.</span><span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// our custom d3 code
</span>          <span class="p">}</span>
        <span class="p">});</span>
      <span class="p">}};</span>
  <span class="p">}]);</span>
</pre>
<p>Now we can define our d3 just as we would without angular. We can use the directive to customize the properties of our svg element. We&rsquo;ll allow the user of our directive to define a margin, a bar-height, and bar-padding. </p>
<pre class="highlight javascript"><span class="c1">// ...
</span>  <span class="nx">link</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">d3Service</span><span class="p">.</span><span class="nx">d3</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d3</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">margin</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">margin</span><span class="p">)</span> <span class="o">||</span> <span class="mi">20</span><span class="p">,</span>
          <span class="nx">barHeight</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">barHeight</span><span class="p">)</span> <span class="o">||</span> <span class="mi">20</span><span class="p">,</span>
          <span class="nx">barPadding</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">barPadding</span><span class="p">)</span> <span class="o">||</span> <span class="mi">5</span><span class="p">;</span>
      <span class="c1">// ...
</span></pre>
<p>Before we render our new data, we&rsquo;ll need to make sure that we remove all of our svg elements from the svg first. If we don&rsquo;t do this, we&rsquo;ll have remnants of previously rendered svg elements dirtying up our <code>d3</code> svg.</p>

<p>Picking up from our directive source, we&rsquo;ll modify our <code>render</code> function:</p>
<pre class="highlight javascript">  <span class="c1">// ...
</span>  <span class="nx">scope</span><span class="p">.</span><span class="nx">render</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// remove all previous items before render
</span>    <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">'*'</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>

    <span class="c1">// If we don't pass any data, return out of the element
</span>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="c1">// setup variables
</span>    <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">ele</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">node</span><span class="p">().</span><span class="nx">offsetWidth</span> <span class="o">-</span> <span class="nx">margin</span><span class="p">,</span>
        <span class="c1">// calculate the height
</span>        <span class="nx">height</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="p">(</span><span class="nx">barHeight</span> <span class="o">+</span> <span class="nx">barPadding</span><span class="p">),</span>
        <span class="c1">// Use the category20() scale function for multicolor support
</span>        <span class="nx">color</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">category20</span><span class="p">(),</span>
        <span class="c1">// our xScale
</span>        <span class="nx">xScale</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span>
          <span class="p">})])</span>
          <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">width</span><span class="p">]);</span>

    <span class="c1">// set the height based on the calculations above
</span>    <span class="nx">svg</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'height'</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>

    <span class="c1">//create the rectangles for the bar chart
</span>    <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">'rect'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">enter</span><span class="p">()</span>
        <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'rect'</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'height'</span><span class="p">,</span> <span class="nx">barHeight</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="mi">140</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'x'</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">margin</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'y'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">i</span> <span class="o">*</span> <span class="p">(</span><span class="nx">barHeight</span> <span class="o">+</span> <span class="nx">barPadding</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'fill'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">color</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
          <span class="p">.</span><span class="nx">duration</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">xScale</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
          <span class="p">});</span>
    <span class="c1">// ...
</span></pre>
<p>Our directive is complete! Now we just need to add it to the html. </p>

<p><a href="https://gist.github.com/auser/6506865#file-d3-example1-js" target="_blank">Show full source</a></p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">d3-bars</span> <span class="na">bar-height=</span><span class="s">&quot;20&quot;</span> <span class="na">bar-padding=</span><span class="s">&quot;5&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<h2>See it</h2>

<div class="row">
  <div class="columns large-12" ng-controller="MainCtrl2">
    <h3>Resize the page to see the re-rendering</h3>
    <div d3-bars bar-height="20" bar-padding="3" data="data"></div>
  </div>
</div>

<h2>Data binding to the svg</h2>

<p>Directives can be written to take advantage of Angular&rsquo;s html functionality. We can pass data from the current scope through an html attribute into the d3 directive, rather than hardcoding it in the directive. This allows us to reuse the directive across multiple controllers.</p>

<p>In this example we will move the dummy data from the directive to the controller.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.controllers'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s2">&quot;Resize the page to see the re-rendering&quot;</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Greg&quot;</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">98</span><span class="p">},</span>
      <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Ari&quot;</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">96</span><span class="p">},</span>
      <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Q'</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">75</span><span class="p">},</span>
      <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Loser&quot;</span><span class="p">,</span> <span class="na">score</span><span class="p">:</span> <span class="mi">48</span><span class="p">}</span>
    <span class="p">];</span>
  <span class="p">}]);</span>
</pre>
<p>Now, we can then add the data attribute as the data from our controller into the html directive element:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MainCtrl&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;d3</span><span class="na">-bars</span> <span class="na">data=</span><span class="s">&quot;d3Data&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/d3-bars&gt;
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Now, we&rsquo;ll need to modify our directive source to support this bi-directional databinding that we get for free with AngularJS. Obviously we&rsquo;ll need to remove the hardcoding of data in the directive, but we&rsquo;ll also need to create our isolate scope object.</p>

<p>Why an <code>isolate</code> scope object? If we use our d3 objective in several places on the same page, every single one will be working with the same data because they&rsquo;ll all be sharing the same data binding. We can get around this by creating the <code>isolate</code> scope in the directive.</p>

<p>To create this isolate scope, we&rsquo;ll only need to add the <code>scope:</code> object property to our directive:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appApp.directives'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'d3Bars'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">data</span><span class="p">:</span> <span class="s1">'='</span> <span class="c1">// bi-directional data-binding
</span>      <span class="p">},</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...
</span></pre>
<p>This will allow the svg to be rendered based on data in the controller. </p>

<p>What if we expect this data to change? We&rsquo;ll need it to also re-render it on the data being changed. This is where our second watcher comes into play. </p>

<p>We&rsquo;ll set up a watcher to monitor the &lsquo;bound&rsquo; data. We will need to watch the data for objectEquality instead of the default (reference) so that the d3 will re-render when a property in the d3Data object changes, so we&rsquo;ll set the second parameter as <code>true</code>:</p>
<pre class="highlight javascript"><span class="c1">// watch for data changes and re-render
</span><span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'data'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVals</span><span class="p">,</span> <span class="nx">oldVals</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">newVals</span><span class="p">);</span>
<span class="p">},</span> <span class="kc">true</span><span class="p">);</span>
</pre>
<h2>See it</h2>

<div class="row">
  <div class="columns large-12" ng-controller="MainCtrl3">
    <h3>Resize the page to see the re-rendering</h3>
    <div d3-bars bar-height="20" bar-padding="3" data="data"></div>

    <table>
      <thead>
        <tr><th colspan="4">Try editing the values of the data attribute</th></tr>
      </thead>
      <tbody>
        <tr ng-repeat="obj in data">
          <td>Name:</td><td><input ng-model="data[$index].name" type="text" placeholder="Name" /></td>
          <td>Score</td><td><input ng-model="data[$index].score" type="number" min="1" placeholder="Score" />
          </td>
        </tr>
      </tbody>
    </table>
    <small>What happens if one of the scores is an order of magnitude higher than the rest? What if one is zero? Try it</small>
</div>

<p>Try removing the <code>true</code> from the watch function above and see what happens. Why does this happen? To learn more read about the <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#$watch">objectEquality</a> parameter of the <code>$watch</code> function.</p>

<h2>Handling click events</h2>

<p>Now that we have our <code>data</code> being watched and drawn based on screen width and it&rsquo;s set using scope variables, let&rsquo;s add some interaction handling. Let&rsquo;s say that we want to trigger an action, such as showing a detailed view of the data in a separate panel when an item is clicked on. We can handle this user action by adding an <code>on-click</code> function to our directive.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appApp.directives'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'d3Bars'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">data</span><span class="p">:</span> <span class="s1">'='</span><span class="p">,</span>
        <span class="na">onClick</span><span class="p">:</span> <span class="s1">'&amp;'</span>  <span class="c1">// parent execution binding
</span>      <span class="p">},</span>
      <span class="c1">// ...
</span></pre>
<p>With this binding in place, we can call up to our parent and execute a function in that context using the method: <code>scope.onClick()</code> in an <code>onClick</code> handler. The only tricky part of this set up is passing the local variables up to the parent scope.</p>

<p>In order to pass data through to the scope function <strong>an object with a matching parameter key must be used.</strong> </p>

<p>For instance, when we set an onClick handler when we call the directive:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">d3-bars</span> <span class="na">on-click=</span><span class="s">&quot;showDetailPanel(item)&quot;</span> <span class="na">data=</span><span class="s">&quot;data&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<p>We must call the <code>onClick</code> handler with an object that has the key of <code>item</code> in our directive:</p>
<pre class="highlight javascript">  <span class="nx">scope</span><span class="p">.</span><span class="nx">onClick</span><span class="p">({</span><span class="na">item</span><span class="p">:</span> <span class="p">[</span><span class="nx">stuff</span> <span class="nx">to</span> <span class="nx">pass</span> <span class="nx">here</span><span class="p">]})</span> <span class="c1">// notice item
</span>                                              <span class="c1">// matches the call in
</span>                                              <span class="c1">// the on-click handler 
</span>                                              <span class="c1">// above
</span></pre>
<p>Now, let&rsquo;s create the function on the controller scope that we&rsquo;ll call into.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl4'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">onClick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">showDetailPanel</span><span class="p">)</span>
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">showDetailPanel</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">detailItem</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">};</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
  <span class="c1">// ...
</span></pre>
<blockquote>
<p>Notice that we need to use <code>$scope.$apply()</code> here. This is because the onClick event happens outside the current angular context.</p>
</blockquote>

<p>Then, we&rsquo;ll need to set the <code>on-click</code> attribute in the HTML where we call the directive:</p>
<pre class="highlight html"><span class="nt">&lt;d3</span><span class="na">-bars</span> <span class="na">data=</span><span class="s">&quot;d3Data&quot;</span> <span class="na">label=</span><span class="s">&quot;d3Label&quot;</span> <span class="na">on-click=</span><span class="s">&quot;d3OnClick(item)&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/d3-bars&gt;
</pre>
<p>Now, all we need to do is create the onClick handler in our d3 code:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'appApp.directives'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'d3Bars'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d3Service</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
      <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">data</span><span class="p">:</span> <span class="s1">'='</span><span class="p">,</span>
        <span class="na">onClick</span><span class="p">:</span> <span class="s1">'&amp;'</span>  <span class="c1">// parent execution binding
</span>      <span class="p">},</span>
      <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// ...
</span>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'fill'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">color</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">score</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">onClick</span><span class="p">({</span><span class="na">item</span><span class="p">:</span> <span class="nx">d</span><span class="p">});</span>
        <span class="p">})</span>
        <span class="c1">// ...
</span></pre>
<h2>See it</h2>

<div class="row" ng-controller="MainCtrl4">
  <div class="columns large-12">
    <div d3-bars on-click="onClick(item)" data="data"></div>
  </div>
  <div class="columns large-12 small-12" ng-show="showDetailPanel">
    <h3>Details</h3>
    <h4>Item: {{ detailItem.name }}</h4>
    <a ng-click="showDetailPanel=false">Hide</a>
  </div>
</div>

<h2>Dynamic data over XHR</h2>

<p>How about fetching data over XHR? Both AngularJS and D3 can support fetching data across the wire. By using the AngularJS method of fetching data, we get the power of the auto-resolving promises. That is to say, we don&rsquo;t need to modify our workflow at all, other than setting our data in our controller to be fetched over XHR.</p>
<pre class="highlight javascript"><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MainCtrl5'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$http'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$http</span><span class="p">({</span>
      <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="s1">'http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&amp;callback=JSON_CALLBACK&amp;num=10&amp;q='</span> <span class="o">+</span>
        <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s1">'http://sports.espn.go.com/espn/rss/espnu/news'</span><span class="p">)</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">entries</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">responseData</span><span class="p">.</span><span class="nx">feed</span><span class="p">.</span><span class="nx">entries</span><span class="p">,</span>
          <span class="nx">wordFreq</span> <span class="o">=</span> <span class="p">{},</span>
          <span class="nx">data</span> <span class="o">=</span> <span class="p">[];</span>

      <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">article</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">article</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">' '</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">word</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">wordFreq</span><span class="p">[</span><span class="nx">word</span><span class="p">])</span> <span class="p">{</span> 
              <span class="nx">wordFreq</span><span class="p">[</span><span class="nx">word</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="na">score</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">link</span><span class="p">:</span> <span class="nx">article</span><span class="p">.</span><span class="nx">link</span><span class="p">};</span> 
            <span class="p">}</span>
            <span class="nx">wordFreq</span><span class="p">[</span><span class="nx">word</span><span class="p">].</span><span class="nx">score</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">});</span>
      <span class="p">});</span>
      <span class="k">for</span> <span class="p">(</span><span class="nx">key</span> <span class="k">in</span> <span class="nx">wordFreq</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
          <span class="na">name</span><span class="p">:</span> <span class="nx">key</span><span class="p">,</span> 
          <span class="na">score</span><span class="p">:</span> <span class="nx">wordFreq</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">score</span><span class="p">,</span>
          <span class="na">link</span><span class="p">:</span> <span class="nx">wordFreq</span><span class="p">[</span><span class="nx">key</span><span class="p">].</span><span class="nx">link</span>
        <span class="p">});</span>
      <span class="p">}</span>
      <span class="nx">data</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">score</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">score</span><span class="p">;</span> <span class="p">})</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}])</span>
</pre>
<h2>See it</h2>

<div class="row" ng-controller="MainCtrl5">
  <div class="columns large-12">
    <h3>Word frequency counts in the latest ESPN headlines</h3>
    <div d3-bars on-click="onClick(item)" data="data"></div>
  </div>
  <div class="columns large-12 small-12" ng-show="showDetailPanel">
    <h3>Details</h3>
    <h4>Item: {{ detailItem.name }} appeared {{ detailItem.score}} times in the latest ESPN articles</h4>
    <a ng-click="showDetailPanel=false">Hide</a>
  </div>
</div>

<h2>Extending your own d3 directives</h2>

<p>Lastly, if we&rsquo;re going to use <code>d3</code> for any longer period of time, it&rsquo;s inevitable that we&rsquo;ll want to provide easier methods of creating extensions on our d3 object.</p>

<p>We can extend our own <code>d3</code> service by applying commonly used functions on to it using the <code>decorator</code> pattern. AngularJS makes this easy to do using the <code>$provide</code> service.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'d3'</span><span class="p">)</span>
<span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">'$provide'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>

  <span class="kd">var</span> <span class="nx">customDecorator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$delegate</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">d3Service</span> <span class="o">=</span> <span class="nx">$delegate</span><span class="p">;</span>
    <span class="nx">d3Service</span><span class="p">.</span><span class="nx">d3</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d3</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// build our custom functions on the d3
</span>      <span class="c1">// object here
</span>    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">d3Service</span><span class="p">;</span> <span class="c1">// important to return the service
</span>  <span class="p">};</span>

  <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">'d3Service'</span><span class="p">,</span> <span class="nx">customDecorator</span><span class="p">);</span>
<span class="p">}])</span>
</pre>
<h2>Moar!</h2>

<p>There are way more interesting ways to integrate d3 and Angular together. We have created a repo that follows this along with this tutorial. The repo is available at: <a href="http://github.com/EpiphanyMachine/d3AngularIntegration">github.com/EpiphanyMachine/d3AngularIntegration</a></p>

<h2>About this post</h2>

<p><img class="profile" src="https://farm8.staticflickr.com/7306/9681841116_96c25447bc_q.jpg" /></p>

<p>This is a guest post authored by the brilliant <a href="http://blog.ideahaven.co">Gregory Hilkert</a> and edited by the team at <a href="http://ng-newsletter.com">ng-newsletter.com</a>. </p>

<p>Gregory Hilkert is a fullstack software engineer with experience in JavaScript and CoffeeScript whose most recent projects have focused specifically on Angular among other technologies. </p>

<p>His github profile is <a href="https://github.com/EpiphanyMachine">github.com/EpiphanyMachine</a> and his writing can be found at <a href="http://blog.ideahaven.co">blog.ideahaven.co</a>.</p>

<script type="text/javascript" src="/js/posts/d3.js"></script>

<style type="text/css">
  .tick text {
    fill: #999;
  }
  .axis path, .axis line {
    fill: none;
    stroke: #b6b6b6;
    shape-rendering: crispEdges;
  }
  .axis {
    font-size: 10px;
  }
</style>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Easy global i18n angularJS language translations for your Angular app</title>
    <link href="http://www.ng-newsletter.com/posts/angular-translate.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/angular-translate.html"/>
    <updated>2013-09-03T00:00:00-07:00</updated>
    <id>urn:uuid:aca1bc3d-1865-57f2-ad06-65a9990f7c9d</id>
    <summary>As worldwide access to the web increases, we as developers are constantly pressed to make our apps internationally and locally accessible. When a user visits our apps, he or she should be able to switch languages on the fly at runtime.

Given that...</summary>
    <content type="html"><![CDATA[<p>As worldwide access to the web increases, we as developers are constantly pressed to make our apps internationally and locally accessible. When a user visits our apps, he or she should be able to switch languages on the fly at runtime.</p>

<p>Given that we are building AngularJS client-side apps, we don&rsquo;t particularly want the user to have to refresh the page or visit an entirely different URL. Of course, AngularJS could easily accommodate your international audience natively, perhaps by generating different templates for different languages and serving those within the app.</p>

<p>This process can become cumbersome, and what happens when you want to change the layout of the app? Every single template needs to be rebuilt and redeployed. This process should just be <em>easy</em>.</p>

<p>Instead of creating new templates, we&rsquo;ll use <strong>angular-translate</strong>, an AngularJS module that brings i18n (internationalization) to your Angular app. <strong>angularjs-translate</strong> requires us to create a JSON file that represents translation data per language. It lazy-loads the language-specific translation data from the server only when necessary.</p>

<p>The library <code>angular-translate</code> comes with built-in directives and filters that make the process of internationalizing apps simple. Let&rsquo;s get started.</p>

<h2>Installation</h2>

<p>To use <strong>angular-translate</strong>, we need to load the angular-translate library. We can install it in several different ways, but we prefer using Bower. </p>

<p>Bower is a front-end package manager. It handles not only JavaScript libraries, but also HTML, CSS, and image packages. A package is simply encapsulated, third-party code that is typically publicly accessible in a repository. </p>

<ul>
<li>Using Bower</li>
</ul>

<p>We install angular-translate using the normal Bower process:</p>
<pre class="highlight shell"><span class="gp">$ </span>bower install angular-translate
</pre>
<blockquote>
<p>Alternatively, we can download the minified version of angular-translate from github.</p>
</blockquote>

<p>Once we&rsquo;ve installed the latest stable version of angular-translate, we can simply embed it in our HTML document. Just make sure it&rsquo;s embedded after Angular itself, as it depends on the core <code>angular</code> library.</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;path/to/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;path/to/angular-translate.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>Last but not least, our app has to declare angular-translate as a load dependency:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'pascalprecht.translate'</span><span class="p">]);</span>
</pre>
<p>Great, we&rsquo;re now ready to use angular-translate&rsquo;s components to translate our app!</p>

<h2>See it</h2>

<div ng-controller="DemoController">
<div class="row box">
  <h3>Current language: {{ currentLanguage }}</h3>
    <ul class="inline-list">
      <li>Change language: </li>
      <li ng-repeat="(lang, name) in availableLanguages">
        <a ng-click="setLang(lang)">{{ name }}</a>
      </li>
    </ul>

    <h2 translate="MESSAGE">Message</h2>
</div>

<p></div></p>

<h2>Teaching your app a new language</h2>

<p>Now our app depends upon angular-translate as installed, and our app declares it as a dependency, so we can use it to translate our app&rsquo;s contents. </p>

<p>First, we need to provide translation material for our app to actually <em>speak</em> a new language. This step actually entails configuring the <code>$translate</code> service through our fresh <code>$translateProvider</code> service. </p>

<p>Training our app to use a new language is simple. Using the <code>config</code> function on our app, we provide the different language translations for our app, i.e. English, German, Hebrew, etc.. First, we inject our <code>$translateProvider</code> in the config function, like so:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'angularTranslateApp'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'pascalprecht.translate'</span><span class="p">])</span>
  <span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">'$translateProvider'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$translateProvider</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Our translations will go in here
</span><span class="p">}]);</span>
</pre>
<p>To add a language, we have to make $translateProvider aware of a <strong>translation table</strong>, which is a JSON object containing our messages (keys) that are to be translated into (values). Using a <strong>translation table</strong> enables us to write our translations as simple JSON for loading remotely or setting at compile-time, such as:</p>
<pre class="highlight javascript"><span class="p">{</span>
  <span class="s1">'MESSAGE'</span><span class="err">:</span> <span class="s1">'Hello world'</span><span class="p">,</span>
<span class="p">}</span>
</pre>
<p>In a translation table, the key represents a translation id, whereas the value 
represents the concrete translation for a certain language. Now add a translation 
table to your app. <code>$translateProvider</code> provides a method called <code>translations()</code>,
which takes care of that.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">[</span><span class="s1">'$translateProvider'</span><span class="p">,</span> <span class="p">(</span><span class="nx">$translateProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">translations</span><span class="p">({</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hello there, This is my awesome app!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'And it has i18n support!'</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>With this translation table in place, our app is set to use angular-translate. Since we&rsquo;re adding the translation table at configuration time, angular-translate&rsquo;s components are able to access it as soon as they are instantiated.</p>

<p>Let&rsquo;s switch over to our app template. Adding translations in the view layer is as simple as binding our <em>key</em> to the view. Using the <code>translate</code> filter, we don&rsquo;t even have to engage our controller or services or worry about the view layer: We&rsquo;re able to decouple the translate logic from any controller or service and make our view replaceable without touching business logic code.</p>

<p>Basically, the <code>translate</code> filter works like so:</p>
<pre class="highlight html"><span class="nt">&lt;h2&gt;</span>{{ 'TRANSLATION_ID' | translate }}<span class="nt">&lt;/h2&gt;</span>
</pre>
<p>To update our example app, we make use of the <code>translate</code> filter:</p>
<pre class="highlight html"><span class="nt">&lt;h2&gt;</span>{{ 'HEADLINE' | translate }}<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;p&gt;</span>{{ 'INTRO_TEXT' | translate }}<span class="nt">&lt;/p&gt;</span>
</pre>
<p>Great! We&rsquo;re now able to translate our content within the view layer without polluting your controllers logic with translation logic; however, we could achieve the same result without using angular-translate at all, since our app only knows about one language.</p>

<p>Let&rsquo;s see angular-translate&rsquo;s real power and learn how to teach our app more than one language.</p>

<h2>Multi-language support</h2>

<p>You&rsquo;ve already learned how to add a translation table to your app using <code>$translateProvider.translations()</code>. </p>

<p>The <code>$translateProvider</code> knows one language, as we set it with the <code>$translateProvider.translations()</code> method. Now, we can add an additional language in the same way by providing a second <strong>translation table</strong>.</p>

<p>When we set our first translation table, we can provide it a key (a language key) that specifies the language we&rsquo;re translating. We can simply add another translation key with another language key.</p>

<p>Let&rsquo;s update our app to include a second language:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">[</span><span class="s1">'$translateProvider'</span><span class="p">,</span> <span class="p">(</span><span class="nx">$translateProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'en_US'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hello there, This is my awesome app!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'And it has i18n support!'</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>To add a second translation table for another language, let&rsquo;s say German, just 
do the same with a different language key:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">[</span><span class="s1">'$translateProvider'</span><span class="p">,</span> <span class="p">(</span><span class="nx">$translateProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'en'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hello there, This is my awesome app!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'And it has i18n support!'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'de'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hey, das ist meine großartige App!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'Und sie untersützt mehrere Sprachen!'</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>Now our app knows about two different languages. We can add as many languages as needed, there&rsquo;s no limit; however, since there are now two languages available, how does our app know which language should to use? <code>angular-translate</code> doesn&rsquo;t prefer any language until you tell it to do so.</p>

<p>To set a <em>preferred</em> language, we can use the method <code>$translateProvider.preferredLanguage()</code>. This method tells angular-translate which of the registered languages is the one that our app should use, by default. It expects an argument with the value of the language key, which points to a certain translation table.</p>

<p>Now, let&rsquo;s tell our app that it should use English as its default language:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">[</span><span class="s1">'$translateProvider'</span><span class="p">,</span> <span class="p">(</span><span class="nx">$translateProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'en'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hello there, This is my awesome app!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'And it has i18n support!'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'de'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hey, das ist meine großartige App!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'Und sie untersützt mehrere Sprachen!'</span>
  <span class="p">});</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">preferredLanguage</span><span class="p">(</span><span class="s1">'en'</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<h2>Switching the language at runtime</h2>

<p>To switch to a new language at runtime, we have to use angular-translate&rsquo;s <code>$translate</code> service. It has a method uses() that either returns the language key of the currently used language, or, when passing a language key as argument, tells angular-translate to use the corresponding language.</p>

<p>To get a feeling for how this capability works in a real app, add two new translation id&rsquo;s that represent translations for buttons you&rsquo;ll add later in your HTML template:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span> <span class="p">[</span><span class="s1">'$translateProvider'</span><span class="p">,</span> <span class="p">(</span><span class="nx">$translateProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'en'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hello there, This is my awesome app!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'And it has i18n support!'</span><span class="p">,</span>
    <span class="na">BUTTON_TEXT_EN</span><span class="p">:</span> <span class="s1">'english'</span><span class="p">,</span>
    <span class="na">BUTTON_TEXT_DE</span><span class="p">:</span> <span class="s1">'german'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">translations</span><span class="p">(</span><span class="s1">'de'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">HEADLINE</span><span class="p">:</span> <span class="s1">'Hey, das ist meine großartige App!'</span><span class="p">,</span>
    <span class="na">INTRO_TEXT</span><span class="p">:</span> <span class="s1">'Und sie untersützt mehrere Sprachen!'</span>
    <span class="na">BUTTON_TEXT_EN</span><span class="p">:</span> <span class="s1">'englisch'</span><span class="p">,</span>
    <span class="na">BUTTON_TEXT_DE</span><span class="p">:</span> <span class="s1">'deutsch'</span>
  <span class="p">});</span>
  <span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">preferredLanguage</span><span class="p">(</span><span class="s1">'en'</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<p>Next, implement a function on a controller that uses the <code>$translate</code> service and its <code>uses()</code> method to change the language at runtime. To do that, we&rsquo;ll inject the <code>$translate</code> service in our app&rsquo;s controller and add a function on its <code>$scope</code>:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'TranslateCtrl'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$translate'</span><span class="p">,</span> <span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$translate</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">changeLanguage</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">langKey</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$translate</span><span class="p">.</span><span class="nx">uses</span><span class="p">(</span><span class="nx">langKey</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">}]);</span>
</pre>
<p>Now, let&rsquo;s reflect this change in the HTML template by adding a button for each language. We&rsquo;ll also have to set up an <code>ng-click</code> directive on each button, which calls the function that changes the language at runtime:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;Ctrl&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;changeLanguage('de')&quot;</span> <span class="na">translate=</span><span class="s">&quot;BUTTON_TEXT_DE&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;changeLanguage('en')&quot;</span> <span class="na">translate=</span><span class="s">&quot;BUTTON_TEXT_EN&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Et voilà! We now have an app with multi-language support!</p>

<h2>Loading languages</h2>

<p>What fun would it be if we were going to set the languages statically? We can dynamically load languages thanks to Angular&rsquo;s <code>$http</code> service, through the <code>$translateProvider</code>&rsquo;s <code>registerLoader</code> function. </p>

<p>First, we need to install the loader-url extension by setting the <code>loader-url</code> service, which expects that there is a back-end server to send back JSON by handling the <code>lang</code> parameter. If you do have a back end that handles the route with the <code>lang</code> parameter, install the <code>loader-url</code> service with Bower like so:</p>
<pre class="highlight shell">bower install angular-translate-loader-url
</pre>
<p>If you prefer to have a service that loads static files, we can use the <code>static-files</code> loader that loads JSON files from a path with language files. Since this router is simpler, we&rsquo;ll go ahead and install this service through Bower:</p>
<pre class="highlight shell">bower install angular-translate-loader-static-files
</pre>
<p>Now, let&rsquo;s make sure this file is loaded in our view through a script tag:</p>
<pre class="highlight html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/angular-translate-loader-url.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</pre>
<p>To configure our service to use the <code>static-files</code> loader, we need to tell our <code>$translateProvider</code> to use the loader with a configuration object. The configuration object takes two parameters:</p>

<ul>
<li><strong>prefix</strong> - which specifies the file prefix (including file paths)</li>
<li><strong>suffix</strong> - which specifies the file suffix (usually the extension)</li>
</ul>

<p>The file loader attempts to fetch files at the following URL path: <code>[prefix]/[langKey]/[suffix]</code>. For instance, if we set our config object as:</p>
<pre class="highlight javascript"><span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">useStaticFilesLoader</span><span class="p">({</span>
  <span class="na">prefix</span><span class="p">:</span> <span class="s1">'/languages/'</span><span class="p">,</span>
  <span class="na">suffix</span><span class="p">:</span> <span class="s1">'.json'</span>
<span class="p">});</span>
</pre>
<p>The <code>angular-translate</code> attempts to load the <code>en_US</code> language from <code>/languages/en_US.json</code>. Using the <code>StaticFilesLoader</code> like so gives us the side benefit of <strong>lazy-loading</strong>. <code>$translate</code> will only pull down the language files it needs at runtime. </p>

<p>Of course, using asynchronous loading will cause a flash of untranslated content as the app loads. We can circumvent this side effect by setting a default language that is packaged with the app.</p>

<p>One last cool feature: We can use local storage to store our language files. <code>angular-translate</code> provides the ability to use local storage; this capability can be enabled with one function:</p>
<pre class="highlight javascript"><span class="nx">$translateProvider</span><span class="p">.</span><span class="nx">useLocalStorage</span><span class="p">();</span>
</pre>
<h2>Conclusion</h2>

<p>We&rsquo;ve covered how to use <code>angular-translate</code> to bring i18n support to your Angular app using <code>$translateProvider.translations()</code> and the <code>translate</code> filter. We&rsquo;ve also shown how to change the language at runtime using <code>$translate</code> service and its <code>uses()</code> method. </p>

<p>Try out <code>angular-translate</code>; it comes with a lot of really nice built-in features, such as handling pluralization, using custom loaders, and setting translations through a service. The docs are fantastic; we suggest you check them out <a href="http://pascalprecht.github.io/angular-translate">here</a>.</p>

<p>There are a lot of examples with which you can play directly on the site! There&rsquo;s also an <a href="http://pascalprecht.github.io/angular-translate/#/api">API Reference</a> that shows all available components and the interfaces you can use to build awesome apps with internationalization support!</p>

<script type="text/javascript" src="/js/vendor/angular-translate-loader-static-files.min.js"></script>

<script type="text/javascript" src="/js/posts/angularTranslate.js"></script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Next steps (Part 7 of the AngularJS - from beginner to expert in 7 steps series)</title>
    <link href="http://www.ng-newsletter.com/posts/beginner2expert-config.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/beginner2expert-config.html"/>
    <updated>2013-08-04T00:00:00-07:00</updated>
    <id>urn:uuid:e76f31de-cd36-5ca7-973b-34a4950465cb</id>
    <summary>
This is the seventh and final post of the AngularJS - from beginner to expert in 7
steps series.

We started our first several entries demonstrating the core components of our application and how to set up an AngularJS app. In parts 4 and 5, we covered...
</summary>
    <content type="html"><![CDATA[<blockquote>
<p>This is the seventh and final post of the <a href="/posts/beginner2expert-how_to_start.html">AngularJS - from beginner to expert in 7
steps</a> series.</p>

<p>We started our <a href="/posts/beginner2expert-how_to_start.html">first</a> <a href="/posts/beginner2expert-scopes.html">several</a> <a href="/posts/beginner2expert-data-binding.html">entries</a> demonstrating the core components of our application and how to set up an AngularJS app. In <a href="/posts/beginner2expert-directives.html">parts 4 and 5</a>, we covered the internals of <em>directives</em> in AngularJS, and in last week&rsquo;s post we discussed the power of services.</p>

<p>In this section, we&rsquo;re covering several key topics we didn&rsquo;t have a chance to introduce earlier in the series. We also offer a list of great resources and the latest tools, and we&rsquo;re proud to announce the impending release of our next book. </p>

<p>Throughout this tutorial series, we are building an NPR audio player that will show us the current stories on the show <em>Morning Edition</em> and play them in our browser. To see the fully finished demo, head over <a href="/code/beginner_series">here</a>.</p>
</blockquote>

<h3>7. Routing</h3>

<p>In a single-page app, navigating from one page view to another is crucial. As our app grows increasingly complex, we need a way to manage the different screens a user will visit throughout the app.</p>

<p>We can already support different page views by including template code in line in the main HTML, but doing that has drawbacks, among which is the fact that such in-line code will grow to be unmanageable. </p>

<p>Rather than including multiple templates in the view (which we could do with the <code>ng-include</code> directive), we can break out the view into a <code>layout</code> and <code>template</code> views and only show a particular view based upon the URL the user is currently accessing. </p>

<p>We&rsquo;ll break these &ldquo;partials&rdquo; into views to be composed inside of a layout template. AngularJS allows us to do that by declaring routes on the <code>$routeProvider</code>, a provider of the <code>$route</code> service.</p>

<p>Using the <code>$routeProvider</code>, we can take advantage of the browser&rsquo;s history API and enable users to bookmark and share specific pages, as it uses the current URL location in the browser.</p>

<p>To set up routing in our app, we need to do two things: First, we need to specify where in our layout template we want to place the content of the new page. For instance, if we want to have a header and a footer on every single page, we can set up our layout template like:</p>
<pre class="highlight html"><span class="nt">&lt;header&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Header<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/header&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-view</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;footer&gt;</span>
  <span class="nt">&lt;h5&gt;</span>Footer<span class="nt">&lt;/h5&gt;</span>
<span class="nt">&lt;/footer&gt;</span>
</pre>
<p>The <code>ng-view</code> directive will inform our <code>$routeProvider</code> where to place the rendered template.</p>

<p>Secondly, we need to <em>configure</em> our routes. To configure our routes, we&rsquo;ll configure the <code>$routeProvider</code> in our app. </p>

<p>There are two main methods that the <code>$routeProvider</code> provides for us to handle routing: <code>when</code> and <code>otherwise</code>. The <code>when</code> method takes two parameters, the first of which is a string to match against the <code>$location.path()</code>. Trailing or double slashes will still work.</p>

<p>The second parameter of the <code>when</code> method is a configuration object. This configuration object can take different keys. We briefly touch upon a few here: </p>

<h4>controller</h4>
<pre class="highlight javascript"><span class="nx">controller</span><span class="err">:</span> <span class="s1">'MyController'</span>
<span class="c1">// or
</span><span class="nx">controller</span><span class="err">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...
</span><span class="p">}</span>
</pre>
<p>If the controller property is set in the configuration object, the controller will be instantiated when the route loads up. This property can either be a string that matches to a registered controller on the module or it can be a function that is the controller function for the route.</p>

<h4>template</h4>
<pre class="highlight javascript"><span class="nx">template</span><span class="err">:</span> <span class="s1">'&lt;div&gt;&lt;h2&gt;Route&lt;/h2&gt;&lt;/div&gt;'</span>
</pre>
<p>If we pass a template property into the configuration object, then template we indicate will be rendered in the place of the <code>ng-view</code> DOM element. </p>

<h4>templateUrl</h4>
<pre class="highlight javascript"><span class="nx">templateUrl</span><span class="err">:</span> <span class="s1">'views/template_name.html'</span>
</pre>
<p>If the templateUrl property is set in the configuration object, then AngularJS will attempt to fetch the view over XHR. If it finds the template and can load it, Angular will render the template&rsquo;s contents in the <code>ng-view</code> DOM element.</p>

<p>It&rsquo;s worth noting that the <code>templateUrl</code> property goes through the same process that all of the rest of AngularJS XHR requests go through; thus, this request utilizes the <code>$templateCache</code>. Even if your user navigates away from this page and then comes back, there will not be a subsequent request as the template will have been cached.</p>

<h4>Making some routes</h4>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[]).</span>
<span class="nx">config</span><span class="p">([</span><span class="s1">'$routeProvider'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">'/'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">controller</span><span class="p">:</span> <span class="s1">'HomeController'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;h2&gt;We are home&lt;/h2&gt;'</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">otherwise</span><span class="p">({</span><span class="na">redirectTo</span><span class="p">:</span> <span class="s1">'/'</span><span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>The <code>$routeProvider</code> can also handle passing parameters in the URL (for instance, like <code>/people/42</code>, where <code>42</code> is the <code>:id</code> of the person we&rsquo;re looking up). Simply by prepending a string with a colon <code>:</code>, the <code>$routeProvider</code> will attempt to match the URL and place the string name as a key in the <code>$routeParams</code> service.</p>
<pre class="highlight javascript"><span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">'/person/:id'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">controller</span><span class="p">:</span> <span class="s1">'PeopleController'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div&gt;Person show page: {{ name }}&lt;/div&gt;'</span>
<span class="p">})</span>
</pre>
<p>Inside the <code>PeopleController</code>, we can retrieve the <code>:id</code> of the person indicated in the route:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PeopleController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$routeParams</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// We now have access to the $routeParams
</span>  <span class="c1">// At the route /person/42, our $routeParams will look like:
</span>  <span class="c1">// { id: 42 }
</span><span class="p">});</span>
</pre>
<h4>See it</h4>

<div ari-iframe>
  <style type="text/css">
    ul.inline-list { display: inline; }
    ul.inline-list li {margin-right: 30px; float: left;}
    .content { margin: 10px 0; padding: auto 10px;}
  </style>
  <div ng-app="demoApp">
      <ul class="inline-list">
        <li><a href="#/">Go to home route</a></li>
        <li><a href="#/person/42">Go to person route (id: 42)</a></li>
      </ul>
      <div class="clear">&nbsp;</div>
      <div class="content">
        <div ng-view></div>
      </div>
  </div>
  <script type="text/javascript">
  angular.module('demoApp.controllers', [])
    .controller('FrameController', ['$scope', '$location', '$routeParams', 
      function($scope, $location, $routeParams) {
        $scope.routeParams = $routeParams;
    }])
    .controller('HomeController', ['$scope', '$location', '$routeParams', 
      function($scope, $location, $routeParams) {
      $scope.routeParams = $routeParams;
    }])
    .controller('PeopleController', ['$scope', '$routeParams', '$location',
      function($scope, $routeParams, $location) {
        $scope.routeParams = $routeParams;
        $scope.name = "Ari";
    }]);
    angular.module('demoApp', ['ngRoute', 'demoApp.controllers'])
    .config(['$routeProvider', function($routeProvider) {
      $routeProvider.when('/', {
        controller: 'HomeController',
        template: "<h2>We are home</h2><hr /><h4>This is view at /</h4><h4>Route params: {{ routeParams }}</h4>"
      })
      .when('/person/:id', {
        controller: 'PeopleController',
        template: '<div>Person show page: {{ name }}</div><hr /><h4>This is view at /person/42</h4><h4>Route params: {{ routeParams }}</h4>'
      })
      .otherwise({redirectTo: '/'});
    }]);
  </script>
</div>

<h2>Filters</h2>

<p>In AngularJS, a filter provides a way to format data to display to the user. Angular gives us several built-in filters as well as an easy way to create our own.</p>

<p>Filters are invoked in the HTML with the <code>|</code> (pipe) character in the template binding characters <span ng-non-bindable><code>{{ }}</code></span>. For instance, let&rsquo;s say we want to capitalize our string. We can either change all the characters in a string to be capitalized, or we can use a filter. </p>
<pre class="highlight html">{{ name | uppercase }}
</pre>
<h4>See it</h4>

<div ng-controller="LastController">
  <input type="text" ng-model="name" placeholder="Set name to uppercase" />
  {{ name | uppercase }}
</div>

<p>We can also use filters from within JavaScript by using the <code>$filter</code> service. For instance, to use the <code>uppercase</code> JavaScript filter:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'DemoController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$filter'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$filter</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">$scope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">$filter</span><span class="p">(</span><span class="s1">'lowercase'</span><span class="p">)(</span><span class="s1">'Ari'</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<p>To pass an argument to a filter, we pass it with a colon after the filter name (for multiple arguments, we can simply append a colon after each argument). For example, the number filter will allow us to limit the number of decimal places a number can show. To pass the argument <code>2</code>, we&rsquo;ll append <code>:2</code> to the number filter:</p>
<pre class="highlight html">{{ 123.456789 | number:2 }}
</pre>
<h4>See it</h4>

<p>{{ 123.456789 | number:2 }}</p>

<p>We can use multiple filters at the same time by using two or more pipes. We&rsquo;ll see such an example in a minute when we build a custom filter. Before we get to that, however, let&rsquo;s look at the built-in filters that come out-of-the-box with AngularJS. </p>

<h3>currency</h3>

<p>The currency filter formats a number as currency. In other words, 123 as currency will look like: {{ 123 | currency }}.</p>

<p>Currency has the option of a currency symbol or identifier to display the currency. The default currency option is that of the current locale; however, you can pass in a currency to display.</p>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<div class="code_with_result"><pre ng-non-bindable>{{ 123 | currency }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ 456 | currency:'USD $' }}</pre></div>
</div>

<h3>date</h3>

<p>The date filter allows us to format a date based upon a requested format style. The date formatter provides us several built-in options. If no date format is passed, then it defaults to showing <code>mediumDate</code> (as you can see below).</p>

<p>Here are the built-in localizable formats:</p>

<div ng-controller="LastController" class="table">
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'medium' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'short' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'fullDate' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'longDate' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'mediumDate' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'shortDate' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'mediumTime' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'shortTime' }}</pre></div>
</div>

<p>The date formatter also enables you to customize your date format to your own liking. The format options allow you to format the date with the different components of a date. These format options can be combined and chained together to create one single date format, as well:</p>

<div ng-controller="LastController" class="table blue">
<span class="note">4 digit year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'yyyy' }}</pre></div>
<span class="note">2 digit padded year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'yy' }}</pre></div>
<span class="note">1 digit year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'y' }}</pre></div>
<span class="note">month in year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'MMMM' }}</pre></div>
<span class="note">month in year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'MMM' }}</pre></div>
<span class="note">padded month in year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'MM' }}</pre></div>
<span class="note">month in year</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'M' }}</pre></div>
<span class="note">padded day in month</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'dd' }}</pre></div>
<span class="note">day in month</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'d' }}</pre></div>
<span class="note">day in week</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'EEEE' }}</pre></div>
<span class="note">day in week</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'EEE' }}</pre></div>
<span class="note">padded hour in day</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'HH' }}</pre></div>
<span class="note">hour in day</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'H' }}</pre></div>
<span class="note">padded hour in am/pm</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'hh' }}</pre></div>
<span class="note">hour in am/pm</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'h' }}</pre></div>
<span class="note">padded minute in hour</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'mm' }}</pre></div>
<span class="note">minute in hour</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'m' }}</pre></div>
<span class="note">padded second in minute</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'ss' }}</pre></div>
<span class="note">second in minute</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'s' }}</pre></div>
<span class="note">Padded millisecond in second</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'.sss' }}</pre></div>
<span class="note">am/pm character</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'a' }}</pre></div>
<span class="note">4 digit representation of timezone offset</span>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'Z' }}</pre></div>
<h4>And some examples of custom date formatting</h4>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'MMM d, y' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'EEEE, d, M' }}</pre></div>
<div class="code_with_result"><pre ng-non-bindable>{{ today | date:'hh:mm:ss.sss' }}</pre></div>
</div>

<h3>filter</h3>

<p>The <code>filter</code> filter selects a subset of items from an array of items and returns a new array. This filter is generally used as a way to <em>filter</em> out items for display. For instance, when using client-side searching, we can filter out items from an array immediately. </p>

<p>The filter method takes a string, object, or function that it will run to select or reject array elements. </p>

<table>
<thead><tr><th colspan="2">If the first parameter passed in is a:</th></tr></thead>
<tbody>
<tr><td>String</td><td>It will accept elements that match against the string. If you want all that do NOT match the string, simply prepend the string with a `!`.</td></tr>
<tr><td>Object</td><td>It will compare objects that have a property name and that match like the simple substring match if only a string is passed in. If you want to match against all properties, you can use a `$` as the key.</td></tr>
<tr><td>Function</td><td>It will run the function over each element of the array, and the resulting elements will be in the new array.</td></tr>
</tbody></table>

<p>You can also pass a second parameter into the filter method that will be used to determine if the expected value and the actual value should be considered a match. </p>

<table>
<thead><tr><th colspan="2">If the second parameter passed in is:</th></tr></thead>
<tbody>
<tr><td>true</td><td>It will run a strict comparison match against the two (is the same as `angular.equals(expected, actual)`.</td></tr>
<tr><td>false</td><td>It will look for a case-insensitive substring match.</td></tr>
<tr><td>Function</td><td>It will run the function and accept an element if the result of the function is truthy.</td></tr>
</tbody></table>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<span class="note">All words that have an &lsquo;e&rsquo; in them</span>
<div class="code_with_result"><pre ng-non-bindable>{{ ['Ari', 'Lerner', 'Likes', 'To', 'Eat', 'Pizza'] | filter:'e' }}</pre></div>
<span class="note">All people that like pizza</span>
<div class="code_with_result"><pre ng-non-bindable>{{ [{'name': 'Ari', 'City': 'San Francisco', 'favorite food': 'Pizza'}, {'name': 'Nate', 'City': 'San Francisco', 'favorite food': 'indian food'}] | filter:{'favorite food': 'Pizza'} }}</pre></div>
<span class="note">Filter with a function that returns true if the first letter is capitalized</span>
<div class="code_with_result"><pre ng-non-bindable>{{ ['Ari', 'likes', 'to', 'travel'] | filter:isCapitalized }}</pre></div>
</div>

<p>The <code>isCapitalized</code> function looks like:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">isCapitalized</span> <span class="o">=</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">toUpperCase</span><span class="p">();</span> <span class="p">}</span>
</pre>
<h3>json</h3>

<p>The <code>json</code> filter will take a JSON, or JavaScript object, and turn it into a string. This transformation is very useful for debugging purposes, mainly:</p>

<h4>See it</h4>

<div class="table">
<span class="note">Json representation of the javascript object</span>
<div class="code_with_result"><pre ng-non-bindable>{{ {'name': 'Ari', 'City': 'San Francisco'} | json }}</pre></div>
</div>

<h3>limitTo</h3>

<p>The <code>limitTo</code> filter creates a new array or string that contains only the specified number of elements, either taken from the beginning or end, depending on whether the value is positive or negative.</p>

<blockquote>
<p>If the limit exceeds the value of the string, then the entire array or string will be returned.</p>
</blockquote>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<span class="note">Take the first 4 letters of the string</span>
<div class="code_with_result"><pre ng-non-bindable>{{ "San Francisco is often cloudy" | limitTo:4 }}</pre></div>
<span class="note">Take the last 6 characters of the string</span>
<div class="code_with_result"><pre ng-non-bindable>{{ "San Francisco is often cloudy" | limitTo:-6 }}</pre></div>
<span class="note">Only return the first result of the array</span>
<div class="code_with_result"><pre ng-non-bindable>{{ ['a', 'b', 'c', 'd', 'e', 'f'] | limitTo:1 }}</pre></div>
</div>

<h3>lowercase</h3>

<p>The <code>lowercase</code> filter simply lowercases the entire string.</p>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<span class="note">Lowercase string</span>
<div class="code_with_result"><pre ng-non-bindable>{{ "San Francisco is often cloudy" | lowercase }}</pre></div>
</div>

<h3>number</h3>

<p>The <code>number</code> filter formats a number as text. It can take a second parameter (optional) that will format the number to the specified number of decimal places (rounded).</p>

<blockquote>
<p>If a non-numeric character is given, it will return an empty string.</p>
</blockquote>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<span class="note">Simple number formatting</span>
<div class="code_with_result"><pre ng-non-bindable>{{ 1234567890 | number }}</pre></div>
<span class="note">Format a number with only 1 decimal place</span>
<div class="code_with_result"><pre ng-non-bindable>{{ 1.234567 | number:1 }}</pre></div>
</div>

<h3>orderBy</h3>

<p>The <code>orderBy</code> filter orders the specific array using an expression. </p>

<p>The <code>orderBy</code> function can take two parameters: The first one is required, while the second is optional. </p>

<p>The first parameter is the predicate used to determine the order of the sorted array. </p>

<table>
<thead><tr><th colspan="2">If the first parameter passed in is a(n):</th></tr></thead>
<tbody>
<tr><td>function</td><td>It will use this function as the `getter` function of the object.</td></tr>
<tr><td>string</td><td>It will parse the string and use it as the key by which to order the elements of the array. You can pass in either `+` or `-` to force sort in ascending or descending order.</td></tr>
<tr><td>array</td><td>It will use these elements as predicates in the sort expression. It will use the first predicate for every element that is not strictly equal to the result of the expression.</td></tr>
</tbody></table>

<p>The second parameter controls the sort order of the array (either reversed or not).</p>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<span class="note">Sorted people by name</span>
<div class="code_with_result"><pre ng-non-bindable>{{ [{'name': 'Ari', 'status': 'awake'}, {'name': 'Nate', 'status': 'awake'}, {'name': 'Q', 'status': 'sleeping'}] | orderBy: '+name' }}</pre></div>
<span class="note">Reverse sorted people by status</span>
<div class="code_with_result"><pre ng-non-bindable>{{ [{'name': 'Ari', 'status': 'awake'}, {'name': 'Nate', 'status': 'awake'}, {'name': 'Q', 'status': 'sleeping'}] | orderBy:'status':true }}</pre></div>
</div>

<h3>uppercase</h3>

<p>The <code>uppercase</code> filter simply uppercases the entire string:</p>

<h4>See it</h4>

<div ng-controller="LastController" class="table">
<span class="note">Uppercase string</span>
<div class="code_with_result"><pre ng-non-bindable>{{ "San Francisco is often cloudy" | uppercase }}</pre></div>
</div>

<h3>Making our own filter</h3>

<p>As we saw above, it&rsquo;s really easy to create our own custom filter. To create a filter, we put it under its own module. Let&rsquo;s create one together: a filter that capitalizes the first character of a string.</p>

<p>First, we need to create it in a module that we&rsquo;ll require in our app (this step is good practice):</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.filters'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">'capitalize'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{}</span>  
<span class="p">});</span>
</pre>
<p>Filters are just functions to which we pass input. In the function above, we simply take the <code>input</code> as the string on which we are calling the filter. We can do some error-checking inside the function:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.filters'</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">'capitalize'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// input will be ginger in the usage below
</span>    <span class="k">if</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> 
      <span class="k">return</span> <span class="nx">input</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">input</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>  
<span class="p">});</span>
</pre>
<h2>See it</h2>

<div ng-controller="LastController" class="table">
  <div class="code_with_result"><pre ng-non-bindable>{{ 'ginger loves dog bones' | lowercase | capitalize }}</pre></div>
</div>

<h2>Topics we didn&rsquo;t get a chance to cover</h2>

<p>In this 7-part series, we&rsquo;ve included a lot of material to get you to the point of using AngularJS comfortably. Unfortunately, we didn&rsquo;t get to cover a lot of what AngularJS has to offer. We present this list of other topics as places to investigate further:</p>

<ul>
<li>Promises</li>
<li>Building custom directives</li>
<li><code>$resource</code> service</li>
<li>Unit testing</li>
<li>End-to-end testing</li>
<li>Midway testing</li>
<li>i18n and I10n language translation/localization</li>
<li>Authentication and customizing XHR requests</li>
<li>Using the <code>$provide</code> service to build customizable services</li>
<li>Forms and validations</li>
<li>IE compatibility</li>
</ul>

<h2>Want more? Look out for our book</h2>

<p>Lastly, if you&rsquo;ve enjoyed our series and articles, we are industriously working on a book series that covers these topics and much, much more. For more information on the first book in the series, head over to <a href="http://ng-book.com">ng-book.com</a>.</p>

<div data-ng-book></div>

<h2>Other resources</h2>

<div class="row">
<div class="large-6 small-12 columns">

For more information on AngularJS and other <b>great</b> resources for learning AngularJS more in depth:
<ul>
<li><a href="http://egghead.io">egghead.io</a></li>
<li><a href="https://plus.google.com/communities/115368820700870330756">Google+ community</a></li>
<li><a href="http://weblogs.asp.net/dwahlin/">Dan Wahlin&rsquo;s blog</a></li>
<li><a href="http://joelhooks.com/">joel hook&rsquo;s blog</a></li>
<li><a href="http://deansofer.com/blog">Dean Sofer&rsquo;s blog</a></li>
<li><a href="http://www.yearofmoo.com">yearofmoo.com</a></li>
</ul>
</div>

<div class="large-6 small-12 columns">

Here are a few interesting Angular projects to get you moving:

<ul>
<li><a href="https://github.com/angular-app/angular-app">angular-app</a></li>
<li><a href="https://github.com/joshdmiller/ng-boilerplate">ng-boilerplace</a></li>
<li><a href="https://github.com/testdouble/lineman"> The very awesome lineman project</a></li>
<li><a href="http://angular-ui.github.io/">angular-ui</a></li>
<li><a href="http://angular-ui.github.io/bootstrap/">angular-bootstrap</a></li>
</ul>

</div>

<div in-this-series prev="/posts/beginner2expert-services.html" description="The AngularJS - from beginner to expert in 7 steps series"></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Services (Part 6 of AngularJS from beginner to expert in 7 steps series)</title>
    <link href="http://www.ng-newsletter.com/posts/beginner2expert-services.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/beginner2expert-services.html"/>
    <updated>2013-08-02T00:00:00-07:00</updated>
    <id>urn:uuid:049049db-9f25-5985-a589-48922f01bda1</id>
    <summary>
This is the sixth post of the AngularJS - from beginner to expert in 7
steps series.

We started our first several entries demonstrating the core components of the application and how to set up an AngularJS app. In the previous post, we covered the...
</summary>
    <content type="html"><![CDATA[<blockquote>
<p>This is the sixth post of the <a href="/posts/beginner2expert-how_to_start.html">AngularJS - from beginner to expert in 7
steps</a> series.</p>

<p>We started our <a href="/posts/beginner2expert-how_to_start.html">first</a> <a href="/posts/beginner2expert-scopes.html">several</a> <a href="/posts/beginner2expert-data-binding.html">entries</a> demonstrating the core components of the application and how to set up an AngularJS app. In the <a href="/posts/beginner2expert-directives.html">previous post</a>, we covered the internals of <em>directives</em> in AngularJS. </p>

<p>In this section, we&rsquo;ll tackle <em>services</em>, clean up our code, and finalize our <a href="/code/beginner_series">audio player</a>.</p>

<p>Throughout this tutorial series, we are building an NPR audio player that will show us the current stories on the show <em>Morning Edition</em> and play them in our browser. To see the fully finished demo, head over <a href="/code/beginner_series">here</a>.</p>
</blockquote>

<p>Up until now, we&rsquo;ve only concerned ourselves with how the view is tied to <code>$scope</code> and how the controller manages the data. For memory and performance purposes, controllers are instantiated only when they are needed and discarded when they are not. That means that every time we switch a route or reload a view (we&rsquo;ll cover routing in the next post), the current controller gets tossed out.</p>

<p><em>Services</em> provide a method for us to keep data around for the lifetime of the app and communicate across controllers in a consistent manner. </p>

<h3>6. Services</h3>

<p>Services are singletons, which are objects that are instantiated only once per app (by the <code>$injector</code>). They provide an interface to keep together methods that relate to a specific function.</p>

<p>The <code>$http</code> service, for instance, is an example of an AngularJS service, as we saw in the last article. It provides low-level access to the browser&rsquo;s <code>XMLHttpRequest</code> object. Rather than needing to dirty the application with low-level calls to the <code>XMLHttpRequest</code> object, we can simply interact with the <code>$http</code> API. </p>

<p>Angular comes with several built-in services with which we&rsquo;ll interact consistently. It will also be useful to make our <em>own</em> services for any decently complex application. </p>

<p>AngularJS makes it very easy to create our own services, simply by registering the service. Once a service is registered, the Angular compiler can reference it and load it as a dependency for runtime use.</p>

<p>Here is the simplest, most common way to create a service, by using the angular.module API <code>factory</code>:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.services'</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'githubService'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">serviceInstance</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="c1">// Our first service
</span>    <span class="k">return</span> <span class="nx">serviceInstance</span><span class="p">;</span>
  <span class="p">});</span>
</pre>
<blockquote>
<p>We can also create a service using the built-in <code>$provide</code> service. </p>
</blockquote>

<p>This service doesn&rsquo;t do anything interesting, but it shows us how to define one. Creating a service simply returns a function that returns an object. This object is created with the creation of the application instance (remember, it&rsquo;s a singleton object). </p>

<p>We can set our application to handle specific needs within this singleton object across the entire application. In the above example, we started creating a GitHub service. Let&rsquo;s make it a bit more useful and call the GitHub API:</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.services'</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'githubService'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">doRequest</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">$http</span><span class="p">({</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.github.com/users/'</span> <span class="o">+</span> <span class="nx">username</span> <span class="o">+</span> <span class="s1">'/'</span> <span class="o">+</span> <span class="nx">path</span> <span class="o">+</span> <span class="s1">'?callback=JSON_CALLBACK'</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">events</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">doRequest</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="s1">'events'</span><span class="p">);</span> <span class="p">},</span>
    <span class="p">};</span>
  <span class="p">}]);</span>
</pre>
<p>This snippet creates a GitHub service that has a single method, <code>events</code> that fetches the latest GitHub events for a given GitHub user. To use this service in our controller, we&rsquo;ll set up the controller to load (or <em>inject</em>) <code>githubService</code> as a dependency at runtime. To <em>inject</em> the service in the controller, we pass the name as an argument in the controller function in the array (using <code>[]</code> bracket notation):</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ServiceController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'githubService'</span><span class="p">,</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">githubService</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}]);</span>
</pre>
<blockquote>
<p>Note that this method of <em>dependency injection</em> is safe for minification. We&rsquo;ll cover this in-depth in the last and final part of the series.</p>
</blockquote>

<p>With our new <code>githubService</code> injected into our <code>ServiceController</code>, we can now use it just like any other service (like the <code>$http</code> service that we saw in the previous post).</p>

<p>Let&rsquo;s set up our example flow to call the GitHub API for a GitHub username that we define in our view. Just as we saw in the <a href="/posts/beginner2expert-data-binding">data binding</a> section, we&rsquo;ll <em>bind</em> the username property to the view:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ServiceController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>Type in a GitHub username<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;username&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter a GitHub username, like auser&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;pre</span> <span class="na">ng-show=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>{{ events }}<span class="nt">&lt;/pre&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Now we can <em>watch</em> for the <code>$scope.username</code> property to react to how we&rsquo;ve changed the view, based on our bi-directional data binding.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ServiceController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'githubService'</span><span class="p">,</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">githubService</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Watch for changes on the username property.
</span>    <span class="c1">// If there is a change, run the function
</span>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'username'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newUsername</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// uses the $http service to call the GitHub API
</span>            <span class="c1">// and returns the resulting promise
</span>      <span class="nx">githubService</span><span class="p">.</span><span class="nx">events</span><span class="p">(</span><span class="nx">newUsername</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">)</span> <span class="p">{</span>
                    <span class="c1">// the success function wraps the response in data
</span>                    <span class="c1">// so we need to call data.data to fetch the raw data
</span>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
        <span class="p">})</span>
    <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<blockquote>
<p>Since we are returning the <code>$http</code> promise (as we did in the previous article), we can call the <code>.success</code> method on the return as though we are calling <code>$http</code> directly.</p>
</blockquote>

<h4>Try it</h4>

<div ng-controller="ServicesDemoController">
  <label for="username">Type in a GitHub username</label>
  <input type="text" ng-model="username" placeholder="Enter a GitHub username, like auser" />
  <pre ng-show="username" class="syntax-highlight json slide-animation height150">{{ events | limitTo:1 | json }}</pre>
</div>

<p>In this example, you&rsquo;ll notice that there is a delay before the input field changes. If we don&rsquo;t include this delay, we&rsquo;ll end up calling the GitHub API for every key that is entered into the input, which is obviously not what we want. To introduce this delay, we&rsquo;re using the built-in <code>$timeout</code> service.</p>

<p>To use the <code>$timeout</code> service, we inject it into our controller just like we injected the <code>githubService</code> into the controller:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ServiceController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$timeout'</span><span class="p">,</span> <span class="s1">'githubService'</span><span class="p">,</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">githubService</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}]);</span>
</pre>
<blockquote>
<p>It&rsquo;s conventional to inject any Angular services before our own custom services.</p>
</blockquote>

<p>Now we can use the <code>$timeout</code> service as we would expect. The <code>$timeout</code> service, in this case, cancels any network requests that would otherwise be running and gives us a <em>350</em> millisecond delay between changes in the input field. In other words, if there is a delay of 350 milliseconds between keyboard strokes, we&rsquo;ll assume the user is done typing and we can start the GitHub request:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ServiceController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$timeout'</span><span class="p">,</span> <span class="s1">'githubService'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$timeout</span><span class="p">,</span> <span class="nx">githubService</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// The same example as above, plus the $timeout service
</span>    <span class="kd">var</span> <span class="nx">timeout</span><span class="p">;</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'username'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">timeout</span><span class="p">)</span> <span class="nx">$timeout</span><span class="p">.</span><span class="nx">cancel</span><span class="p">(</span><span class="nx">timeout</span><span class="p">);</span>
        <span class="nx">timeout</span> <span class="o">=</span> <span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
          <span class="nx">githubService</span><span class="p">.</span><span class="nx">events</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">$scope</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
          <span class="p">});</span>
        <span class="p">},</span> <span class="mi">350</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}]);</span>
</pre>
<p>Since we began this app, we&rsquo;ve only looked at how services can bundle similar functionality together. Services are <em>also</em> the canonical way to share data across several controllers. For instance, if our application has a settings page where we set the user&rsquo;s GitHub username, we&rsquo;ll want to share the username to the other controllers in our application.</p>

<blockquote>
<p>The final article in this series will cover routing and how to introduce multiple pages into our app.</p>
</blockquote>

<p>To share the username across controllers, we need to add a method to our service that stores the username. Remember, the service will stick around for the lifetime of the app, so we can store the username safely inside of it.</p>
<pre class="highlight javascript"><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp.services'</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'githubService'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">githubUsername</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">doRequest</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">$http</span><span class="p">({</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="s1">'https://api.github.com/users/'</span> <span class="o">+</span> <span class="nx">githubUsername</span> <span class="o">+</span> <span class="s1">'/'</span> <span class="o">+</span> <span class="nx">path</span> <span class="o">+</span> <span class="s1">'?callback=JSON_CALLBACK'</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">events</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">doRequest</span><span class="p">(</span><span class="s1">'events'</span><span class="p">);</span> <span class="p">},</span>
      <span class="na">setUsername</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newUsername</span><span class="p">)</span> <span class="p">{</span> <span class="nx">githubUsername</span> <span class="o">=</span> <span class="nx">newUsername</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">};</span>
  <span class="p">}]);</span>
</pre>
<p>Now, we have a <code>setUsername</code> method in our service that enables us to set the username for the current GitHub user. In any controller in our application, we can now call <code>events()</code> without concerning ourselves with whether or not we have the right username on our scope object.</p>

<h3>Services in our app</h3>

<p>In our app, we have three elements for which we&rsquo;ll make services: the audio element, a player element, and the nprService. </p>

<p>The simplest service we&rsquo;ll abstract is the <code>audio</code> service. In Angular, it&rsquo;s considered a bad idea to try to manipulate the DOM from within a controller. Doing so results in dirty controller code and potential unexpected behavior. </p>

<p>In our app, the <code>PlayerController</code> has an instance of the an audio element that we created on the DOM:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$http'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">audio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'audio'</span><span class="p">);</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span> <span class="o">=</span> <span class="nx">audio</span><span class="p">;</span>
  <span class="c1">// ...
</span></pre>
<p>Instead of setting up the audio element in the controller, we can create a singleton service to manage the audio element, like so:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'audio'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$document'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$document</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">audio</span> <span class="o">=</span> <span class="nx">$document</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'audio'</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">audio</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<blockquote>
<p>Notice that we&rsquo;re using another built-in service, the <code>$document</code> service. This service gives us a reference to the <code>window.document</code> element (which is the root JavaScript object on all html pages). </p>
</blockquote>

<p>Now, in our <code>PlayerController</code>, we can reference this audio element instead of recreating the audio element in the controller itself.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$http'</span><span class="p">,</span> <span class="s1">'audio'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">audio</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span> <span class="o">=</span> <span class="nx">audio</span><span class="p">;</span>
</pre>
<p>Although it looks like we&rsquo;re not gaining much functionality or code clarity, we will once we remove the requirement to tie the audio element to the <code>PlayerController</code>. </p>

<blockquote>
<p>Note that we can now share this <code>audio</code> service with other applications, as it doesn&rsquo;t have any application-specific functionality tied to it.</p>
</blockquote>

<p>To see what we&rsquo;ve done, we&rsquo;ll build our next service, the <code>player</code> service. In our current iteration, we&rsquo;ve attached the <code>play()</code> and <code>stop()</code> methods to the <code>PlayerController</code>. These methods relate only to the functionality of playing audio and don&rsquo;t particularly need to be tied to the <code>PlayerController</code>. In summary, the <code>PlayerController</code> calls the <code>player</code> services API to play the audio element rather than needing to know how to interact with the raw audio element itself. </p>

<p>Let&rsquo;s start building our <code>player</code> service by defining it. Our <code>player</code> service will use the <code>audio</code> service we just created, so we&rsquo;ll need to inject that into our <code>player</code> service:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'player'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'audio'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">audio</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<p>Now, we can take the <code>play()</code> method that we originally defined in the <code>PlayerController</code> and move it into this service. We&rsquo;ll also add a stop method and store the state of the player:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'player'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'audio'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">audio</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">playing</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">current</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="na">ready</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>

    <span class="na">play</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// If we are playing, stop the current playback
</span>      <span class="k">if</span> <span class="p">(</span><span class="nx">player</span><span class="p">.</span><span class="nx">playing</span><span class="p">)</span> <span class="nx">player</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">program</span><span class="p">.</span><span class="nx">audio</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">format</span><span class="p">.</span><span class="nx">mp4</span><span class="p">.</span><span class="nx">$text</span><span class="p">;</span> <span class="c1">// from the npr API
</span>      <span class="nx">player</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="nx">program</span><span class="p">;</span> <span class="c1">// Store the current program
</span>      <span class="nx">audio</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
      <span class="nx">audio</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span> <span class="c1">// Start playback of the url
</span>      <span class="nx">player</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">},</span>

    <span class="na">stop</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">player</span><span class="p">.</span><span class="nx">playing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">audio</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span> <span class="c1">// stop playback
</span>        <span class="c1">// Clear the state of the player
</span>        <span class="nx">player</span><span class="p">.</span><span class="nx">ready</span> <span class="o">=</span> <span class="nx">player</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> 
        <span class="nx">player</span><span class="p">.</span><span class="nx">current</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<p>We now have a fully functioning player on which we can call both <code>play()</code> and <code>stop()</code>. Instead of using the <code>PlayerController</code> to manage the <code>player</code>-specific functionality, we have handed over control to the <code>player</code> <em>service</em> in our <code>PlayerController</code>:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'player'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">player</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">player</span> <span class="o">=</span> <span class="nx">player</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<h2>Try it</h2>

<div ng-controller="DemoPlayerController1">
<button ng-show="!player.playing" ng-click="player.play(program)">Play</button>
<button ng-show="player.playing" ng-click="player.stop()">Stop</button>
<ul>
  <li>Player playing: {{ player.playing }}</li>
  <li>Player duration: {{ player.currentDuration() }} seconds</li>
  <li>Player progress: {{ player.progress }} seconds {{ player.progress_percent | number:1 }}%</li>
</ul>
</div>

<p><small>In order to keep the code simple, we&rsquo;ve opted to use the pure HTML5 audio tag. If audio does not play for you, try opening this page in a more modern browser. In production, you&rsquo;d likely want to use a shim to support more browsers, such as <a href="http://zohararad.github.io/audio5js/">Audio5js</a>.</small></p>

<p>Notice that by using the <code>player</code> service, we don&rsquo;t need to even reference our <code>audio</code> service because the <code>player</code> service will manage the audio for us.</p>

<p>Note: When the audio is done playing, we have no way of resetting the player&rsquo;s state. The player itself will constantly think it&rsquo;s still playing. </p>

<p>To fix this, we can use the <code>$rootScope</code> service (another built-in Angular service) to catch the <code>ended</code> event on the audio element. We&rsquo;ll inject the <code>$rootScope</code> service and create an event listener on the audio element:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'player'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'audio'</span><span class="p">,</span> <span class="s1">'$rootScope'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">audio</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">playing</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">ready</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="c1">// ...
</span>  <span class="p">};</span>
  <span class="nx">audio</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'ended'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="nx">player</span><span class="p">.</span><span class="nx">stop</span><span class="p">());</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<blockquote>
<p>We need to use the <code>$rootScope</code> service in this case because we need to capture an event. Notice that we&rsquo;re calling <code>$rootScope.$apply()</code>. That&rsquo;s because the ended event will be fired outside the scope of the Angular event loop. We&rsquo;ll discuss the event loop in an advanced article in the near future.</p>
</blockquote>

<p>Lastly, we can get more detailed information about our currently playing audio program as we are managing the current audio program in addition to the audio element. </p>

<p>For instance, we can create a method that fetches the currentTime and the currentDuration of the audio element, which we&rsquo;ll use when we want to show a player view that provide the percentage of progress of the current audio program. </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'player'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'audio'</span><span class="p">,</span> <span class="s1">'$rootScope'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">audio</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">playing</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="c1">// ...
</span>    <span class="na">currentTime</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">audio</span><span class="p">.</span><span class="nx">currentTime</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="na">currentDuration</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">audio</span><span class="p">.</span><span class="nx">duration</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
<span class="err">}</span><span class="p">]);</span>
</pre>
<p>We use the audio element to update the progress through the <code>timeupdate</code> event, which the audio element throws by default:</p>
<pre class="highlight javascript"><span class="nx">audio</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'timeupdate'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">player</span><span class="p">.</span><span class="nx">progress</span> <span class="o">=</span> <span class="nx">player</span><span class="p">.</span><span class="nx">currentTime</span><span class="p">();</span>
      <span class="nx">player</span><span class="p">.</span><span class="nx">progress_percent</span> <span class="o">=</span> <span class="nx">player</span><span class="p">.</span><span class="nx">progress</span> <span class="o">/</span> <span class="nx">player</span><span class="p">.</span><span class="nx">currentDuration</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">});</span>
</pre>
<p>Lastly, we need a way to tell if the audio is ready to go in our view. To do that, let&rsquo;s add a handler for the <code>canplay</code> event:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'player'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'audio'</span><span class="p">,</span> <span class="s1">'$rootScope'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">audio</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">player</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">playing</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="na">ready</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="c1">// ...
</span>  <span class="p">}</span>
  <span class="nx">audio</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'canplay'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">player</span><span class="p">.</span><span class="nx">ready</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">});</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<p>Now that we have a player service, we need to manipulate our <code>nprLink</code> directive to call &lsquo;play&rsquo; on the player instead of on the <code>$scope</code>. (Note that this change is optional, and we could alternatively create <code>play()</code> and <code>stop()</code> methods on the <code>PlayerController</code>).</p>

<p>On the directive itself, we need to reference the player on the local scope. The full source of this directive now looks like:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'nprLink'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="p">[</span><span class="s1">'^ngModel'</span><span class="p">],</span>
    <span class="na">replace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngModel</span><span class="p">:</span> <span class="s1">'='</span><span class="p">,</span>
      <span class="na">player</span><span class="p">:</span> <span class="s1">'='</span>
    <span class="p">},</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'/code/views/nprListItem'</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">duration</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">ngModel</span><span class="p">.</span><span class="nx">audio</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">duration</span><span class="p">.</span><span class="nx">$text</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Now, in order to work with our existing template, we&rsquo;ll need to update how we call the <code>npr-link</code> in our <code>index.html</code>. We&rsquo;ll need to include the player in the view. </p>
<pre class="highlight html"><span class="nt">&lt;npr</span><span class="na">-link</span> <span class="na">ng-model=</span><span class="s">&quot;program&quot;</span> <span class="na">player=</span><span class="s">&quot;player&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/npr-link&gt;
</pre>
<p>In our view, instead of calling <code>play(ngModel)</code>, we&rsquo;ll want to call <code>player.play(ngModel)</code>. We can update our template (shortened for brevity) to:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nprLink row&quot;</span> <span class="na">player=</span><span class="s">&quot;player&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;player.play(ngModel)&quot;</span><span class="nt">&gt;</span>
</pre>
<p><a ng-click="showFullListTemplate = !showFullListTemplate">Show full template</a>
<div ng-show="showFullListTemplate"></p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nprLink row&quot;</span> <span class="na">player=</span><span class="s">&quot;player&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;player.play(ngModel)&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;name large-8 columns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;large-2 small-2 playButton columns&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;ngModel.play(ngModel)&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;triangle&quot;</span><span class="nt">&gt;&lt;/div&gt;&lt;/button&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-10 small-10 columns&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;large-12&quot;</span><span class="nt">&gt;</span>{{ ngModel.title.$text }}<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-1 columns&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-2 columns push-8&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ ngModel.link[0].$text }}&quot;</span><span class="nt">&gt;</span>Link<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p></div></p>

<p>Logically, we can also add a playerView to our overall view as we can now encapsulate the player data and status.</p>

<p>Check out the <a href="https://github.com/auser/ng-newsletter-beginner-series/blob/part6/js/beginner.js#L89-L121">playerView directive</a> and the <a href="https://github.com/auser/ng-newsletter-beginner-series/blob/part6/views/playerView.html">template</a>.</p>

<p>Let&rsquo;s build our last service, the <code>nprService</code>. The <code>nprService</code> will be similar to the <code>githubService</code> we built in the beginning of this article. We&rsquo;ll use the <code>$http</code> service to fetch the latest programs from NPR.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">'nprService'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">doRequest</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">$http</span><span class="p">({</span>
        <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
        <span class="na">url</span><span class="p">:</span> <span class="nx">nprUrl</span> <span class="o">+</span> <span class="s1">'&amp;apiKey='</span> <span class="o">+</span> <span class="nx">apiKey</span> <span class="o">+</span> <span class="s1">'&amp;callback=JSON_CALLBACK'</span>
      <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">programs</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">doRequest</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">);</span> <span class="p">}</span>
    <span class="p">};</span>
  <span class="p">}]);</span>
</pre>
<p>In the <code>PlayerController</code>, instead of calling <code>$http</code> directive, now we can call the method <code>programs()</code> on our <code>nprService</code>. We&rsquo;ll inject the new <code>nprService</code>, similar to how we injected the <code>player</code> service in the <code>PlayerController</code>.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'nprService'</span><span class="p">,</span> <span class="s1">'player'</span><span class="p">,</span> 
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">nprService</span><span class="p">,</span> <span class="nx">player</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">player</span> <span class="o">=</span> <span class="nx">player</span><span class="p">;</span>
  <span class="nx">nprService</span><span class="p">.</span><span class="nx">programs</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">programs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">story</span><span class="p">;</span>
    <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<blockquote>
<p>Ideally, we&rsquo;d use <em>promises</em> to simplify the API, but we&rsquo;ve kept it simple for the purposes of demonstration. We&rsquo;ll briefly cover promises in the next post.</p>
</blockquote>

<p>When the <code>PlayerController</code> is instantiated, our <code>nprService</code> fetches the latest programs, and we&rsquo;ve successfully encapsulated the NPR functionality in our service.</p>

<p>On another note, we can set up a <code>RelatedController</code> to show content in the sidebar that&rsquo;s related to the currently playing program.</p>

<p>Since we have the latest playing program available in our <code>player</code> service, we will <code>$watch</code> the current property and show related links.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'RelatedController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'player'</span><span class="p">,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">player</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">player</span> <span class="o">=</span> <span class="nx">player</span><span class="p">;</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'player.current'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">related</span> <span class="o">=</span> <span class="p">[];</span>
      <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">program</span><span class="p">.</span><span class="nx">relatedLink</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">link</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$scope</span><span class="p">.</span><span class="nx">related</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
          <span class="na">link</span><span class="p">:</span> <span class="nx">link</span><span class="p">.</span><span class="nx">link</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">$text</span><span class="p">,</span> 
          <span class="na">caption</span><span class="p">:</span> <span class="nx">link</span><span class="p">.</span><span class="nx">caption</span><span class="p">.</span><span class="nx">$text</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>In our HTML, we just reference the related links like we did with our NPR programs, using the <code>ng-repeat</code> directive:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-4 small-4 columns&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;RelatedController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h2&gt;</span>Related content<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;related&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;s in related&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ s.link }}&quot;</span><span class="nt">&gt;</span>{{ s.caption }}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Now, any time our <code>player.current</code> changes, we can show the related content. </p>

<h2>See it</h2>

<p><small>Unstyled for demo purposes</small>
<div ng-controller="DemoPlayerController2">
<button ng-show="!demoing" ng-click="kickOffDemo()" class="button large radius">Show demo</button>
<div ng-show="demoing" class="row large-slide-animation">
  <div class="row">
    <button ng-click="stopDemo()" class="stopDemoButton button small radius">Stop demo</button>
  </div>
  <div class="row">
    <ul class="large-8 small-8 columns">
      <li ng-repeat="p in programs | limitTo: 3">
        <a ng-click="player.play(p)">Play {{ p.title.$text }}</a>
      </li>
    </ul>
    <div class="small-4 large-4 columns">
      <ul class="">
        <li ng-repeat="s in related"><a href="{{ s.link }}">{{ s.caption }}</a></li>
      </ul>
    </div>
  </div>
</div>
</div></p>

<p>In the next and final section of our beginner to expert series, we&rsquo;ll discuss dependency injection, routing, and production-level tools to get you working with AngularJS as quickly as possible.</p>

<p>The <em>official</em> repository for the beginner series is available as a git repo here: <a href="https://github.com/auser/ng-newsletter-beginner-series">https://github.com/auser/ng-newsletter-beginner-series</a>. </p>

<p>To get this repo locally, ensure that you have <code>git</code> installed, clone the repo, and check out <code>part6</code> branch. We are using XHR to fetch templates, so you&rsquo;ll need to run a local server. We&rsquo;ve included a server script in part6:</p>
<pre class="highlight shell">git clone https://github.com/auser/ng-newsletter-beginner-series.git
git checkout part6
./bin/server.sh
</pre>
<div in-this-series prev="/posts/beginner2expert-directives.html" description="The AngularJS - from beginner to expert in 7 steps series" next="/posts/beginner2expert-config.html"></div>

<p>Want to know when Part 7 is released? Sign up for ng-newsletter below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Directives (Parts 4 and 5 of the AngularJS - from beginner to expert in 7 steps series)</title>
    <link href="http://www.ng-newsletter.com/posts/beginner2expert-directives.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/beginner2expert-directives.html"/>
    <updated>2013-08-01T00:00:00-07:00</updated>
    <id>urn:uuid:7d84431c-a5ef-5850-b503-a2ff75100477</id>
    <summary>
This post contains parts 4 (directives) and 5 (expressions) of AngularJS - from beginner to expert in 7
steps.

We started our first several entries demonstrating the core components of the application and how to set up an AngularJS app. In this section...
</summary>
    <content type="html"><![CDATA[<blockquote>
<p>This post contains parts 4 (directives) and 5 (expressions) of <a href="/posts/beginner2expert-how_to_start.html">AngularJS - from beginner to expert in 7
steps</a>.</p>

<p>We started our <a href="/posts/beginner2expert-how_to_start.html">first</a> <a href="/posts/beginner2expert-scopes.html">several</a> <a href="/posts/beginner2expert-data-binding.html">entries</a> demonstrating the core components of the application and how to set up an AngularJS app. In this section, we&rsquo;ll clear up some terminology and dive into a lot of core out-of-the-box functionality that we get with AngularJS.</p>

<p>Throughout this tutorial series, we are building an NPR audio player that will show us the current stories on the show <em>Morning Edition</em> and play them in our browser. To see the fully finished demo, head over <a href="/code/beginner_series">here</a>.</p>
</blockquote>

<h3>4. Directives</h3>

<p>So far in this series, we&rsquo;ve mentioned the phrase <em>directives</em> a few times without diving into what they actually are. A <em>directive</em> is a fancy name for a function that&rsquo;s attached to a DOM element. Directives have the ability to execute methods, define behavior, attach controllers and <code>$scope</code> objects, manipulate the DOM, and more.</p>

<p>When the browser starts up and starts to parse the HTML (as it does normally), any directives are passed over like any other attribute.</p>

<p>When the AngularJS app is bootstrapped and the Angular compiler starts walking through the DOM tree (starting from the DOM element that declares <code>ng-app</code>, as we mentioned in <a href="/posts/beginner2expert-how_to_start.html">part 1</a>), it will parse the HTML looking for these <em>directive</em> functions. </p>

<p>When it finds a DOM element with one or more, it will collect, sort, and run the directive functions in priority order.</p>

<blockquote>
<p>The priority is determined by the individual directives. You can find more advanced information in our <a href="/posts/directives.html">directives</a> article.</p>
</blockquote>

<p>Directives handle all of the heavy lifting that AngularJS apps use to be dynamic and responsive. We&rsquo;ve seen a few examples of directives previously.</p>

<h3>ng-model</h3>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span> <span class="na">name=</span><span class="s">&quot;Name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter your name&quot;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;h4&gt;</span>Your name: {{ name }}<span class="nt">&lt;/h4&gt;</span>
</pre>
<h4>Try it</h4>

<p><input ng-model="name" name="Name" placeholder="Enter your name"/>
<h4>Your name: {{ name }}</h4></p>

<p>The <code>ng-model</code> directive (which we&rsquo;ve used in previous sections) is set to <em>bind</em> the value of the input DOM element to the <code>$scope</code> model in the controller. To do that, it sets up a <code>$watch</code> (similar to the JavaScript event listener) on the value.</p>

<blockquote>
<p><code>$watch</code> functions run (if necessary) in the AngularJS event loop (the <code>$digest</code> loop), and the Angular updates the DOM accordingly. Stay tuned for our advanced post on the <code>$digest</code> loop!</p>
</blockquote>

<p>In Angular, we use directives to bind behavior to the DOM. How we use our directives is the key to a responsive, dynamic Angular application. There are a lot of default directives that come with AngularJS. Let&rsquo;s look at a few and how to use them.</p>

<h2>Common, built-in directives</h2>

<h3 ng-non-bindable>{{ expression }}</h3>

<p>The double-curly expression directive registers a listener for the expression inside the <span ng-non-bindable>{{ expression }}</span> using the <code>$watch()</code> function. This function enables Angular to update the view.</p>

<p>What is an <em>expression</em>?</p>

<h3>5. Expressions</h3>

<p>In order to understand how directives work, we must also understand expressions, so we&rsquo;re taking a little detour into Part 5 of this series: Expressions. We&rsquo;ve seen expressions in previous examples: <span ng-non-bindable>{{ person.name }}</span> and <span ng-non-bindable>{{ clock }}</span>, for instance. </p>

<div ng-controller="DemoController1">
<div class="code_with_result"><pre ng-non-bindable>{{ 8 + 1 }}</pre></div>

<div class="code_with_result"><pre ng-non-bindable>{{ person }}</pre></div>

<div class="code_with_result"><pre ng-non-bindable>{{ 10 * 3.3 | currency }}</pre></div>
</div>

<blockquote>
<p>The last example (<code>10 * 3.3 | currency</code>) uses a <em>filter</em>. We&rsquo;ll talk about filters in depth later in this series.</p>
</blockquote>

<p>Expressions are kinda like the result of an <code>eval(javascript)</code> (roughly). They are processed by Angular and, therefore, have these important, distinct properties:</p>

<ul>
<li>All expressions are executed in the context of the scope and have access to local <code>$scope</code> variables.</li>
<li>They do not throw errors if an expression results in a <em>TypeError</em> or a <em>ReferenceError</em>.</li>
<li>They do not allow for any control flow functions (conditionals; e.g., if/else).</li>
<li>They can accept filter chains.</li>
</ul>

<h4>Try it</h4>

<div ng-controller="DemoController1">
<div ng-live-result ng-placeholder="Try an expression" ng-model="testExpression"></div>
<blockquote><small>Try typing &ldquo;<em>person</em>&rdquo;, &ldquo;<em>clock</em>&rdquo;, or other math expressions like 2 + 4. You can even manipulate the scope: For instance, try things like <code>person.name = "Ari"; person.age = 28; person</code> or <code>clock</code></small></blockquote>
</div>

<p>Expressions all operate on the containing scope within which they are called. This fact enables you to call variables bound to the containing scope inside of an expression, which, in turn, enables you to loop over variables (we&rsquo;ll see this with <code>ng-repeat</code>), call a function, or use variables for math expressions from the scope.</p>

<h4>Now, back to our directives list&hellip;</h4>

<h3>ng-init</h3>

<p>The <code>ng-init</code> directive is a function that runs at bootstrap time (before runtime). It allows us to set default variables prior to running any other functions during runtime:</p>
<pre class="highlight text">&lt;b ng-init='name = &quot;Ari Lerner&quot;'&gt;Hello, {{ name }}&lt;/b&gt;
</pre>
<h4>See it</h4>

<p><b ng-init='name = "Ari Lerner"'>Hello, {{ name }}</b></p>

<h3>ng-click</h3>

<p>The <code>ng-click</code> directive registers a listener with the DOM element. When the DOM listener fires (when a button or link is <em>clicked</em>), Angular executes the expression and updates the view as normal:</p>
<pre class="highlight text">&lt;button ng-click=&quot;counter = counter + 1&quot;&gt;Add one&lt;/button&gt;
Current counter: {{ counter }}
</pre>
<h4>See it</h4>

<p><button class="button" ng-click="counter = counter + 1" ng-init="counter = 0">Add one</button>
Current counter: {{ counter }}</p>

<p>We can also use <code>ng-click</code> to call a function that we&rsquo;ve made on a controller. For instance:</p>
<pre class="highlight html"><span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;sayHello()&quot;</span><span class="nt">&gt;</span>Say hello<span class="nt">&lt;/button&gt;</span>
</pre>
<p>The controller function: </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MyController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;hello!&quot;</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<h4>Try it</h4>

<div ng-controller="DemoController1">
<button ng-click="sayHello()">Say hello</button>
</div>

<h3>ng-show / ng-hide</h3>

<p>The <code>ng-show</code> and <code>ng-hide</code> directives show or hide a portion of the DOM depending on whether the expression is truthy. </p>

<blockquote>
<p>We won&rsquo;t go into them here, but &ldquo;truthy&rdquo; and &ldquo;falsey&rdquo; are JavaScript terms with which you&rsquo;ll want to be familiar.  </p>
</blockquote>
<pre class="highlight html"><span class="nt">&lt;button</span> <span class="na">ng-init=</span><span class="s">&quot;shouldShow = true&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;shouldShow = !shouldShow&quot;</span><span class="nt">&gt;</span>Flip the shouldShow variable<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;shouldShow&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h3&gt;</span>Showing {{ shouldShow }}<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">ng-hide=</span><span class="s">&quot;shouldShow&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h3&gt;</span>Hiding {{ shouldShow }}<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h4>Try it</h4>

<p><button class="button small" ng-init="shouldShow = true" ng-click="shouldShow = !shouldShow">Flip the shouldShow variable</button>
<div ng-show="shouldShow">
  <h3>Showing {{ shouldShow }}</h3>
</div>
<div ng-hide="shouldShow">
  <h3>Hiding {{ shouldShow }}</h3>
</div></p>

<h3>ng-repeat</h3>

<p>The <code>ng-repeat</code> directive loads a template for each item in a collection. The template it clones is the element upon which we call <code>ng-repeat</code>. Each copy of the template gets its own scope.</p>

<p>Before we dive into explanation, let&rsquo;s look at an example:</p>

<p>Let&rsquo;s say we have a list of the following items in our controller:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">roommates</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Ari'</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Q'</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Sean'</span><span class="p">},</span>
  <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Anand'</span><span class="p">}</span>
<span class="p">];</span>
</pre>
<p>We can use <code>ng-repeat</code> to loop through them in our view:</p>
<pre class="highlight html"><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;person in roommates&quot;</span><span class="nt">&gt;</span>{{ person.name }}<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<h4>See it</h4>

<div ng-controller="LoopController">
  <ul>
    <li ng-repeat="item in items">{{ item.name }}
    </li>
  </ul>
</div>

<p>We can also loop through key-value lists in the <code>ng-repeat</code> directive to slightly modify the expression. For instance, if we have a list of people and their favorite colors:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">'Ari'</span><span class="err">:</span> <span class="s1">'orange'</span><span class="p">,</span>
  <span class="s1">'Q'</span><span class="err">:</span> <span class="s1">'purple'</span><span class="p">,</span>
  <span class="s1">'Sean'</span><span class="err">:</span> <span class="s1">'green'</span>
<span class="p">}</span>
</pre>
<p>We can use the <em>repeat expression</em>: <code>(key, value) in object</code>, like so:</p>
<pre class="highlight html"><span class="nt">&lt;ul&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;(name, color) in people&quot;</span><span class="nt">&gt;</span>{{ name }}'s favorite color is {{ color }}
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<h4>See it</h4>

<div ng-controller="LoopController">
  <ul>
    <li ng-repeat="(name, color) in people">{{ name }}&rsquo;s favorite color is {{ color }}
  </ul>
</div>

<p>These are only a few of the built-in directives that AngularJS provides out of the box. AngularJS makes it very easy to create your own directives, as well. Check out our guide on creating your own custom directives <a href="/posts/directives.html">here</a>.</p>

<h3>Directives in our app</h3>

<p>We left our audio app last time by just fetching the list of latest audio programs that the NPR API sends us back:</p>
<pre class="highlight javascript"><span class="nx">$scope</span><span class="p">.</span><span class="nx">programs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">story</span><span class="p">;</span>
</pre>
<p>Now that we know how to iterate over a list of programs, we can simply take our programs and iterate over them to produce a listing using <code>ng-repeat</code>, as we did above:</p>
<pre class="highlight html"><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;programs_list&quot;</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;program in programs&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;large-12&quot;</span><span class="nt">&gt;</span>{{ program.title.$text }}<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<blockquote>
<p>The NPR API gives us back a listing with the <em>title</em> + <code>$text</code>. This syntax is specific to the NPR API, not to AngularJS itself. </p>
</blockquote>

<p>Now we have a listing with the programs listed and their titles, but no way to click and play our titles. Using <code>ng-click</code>, we can add a link to the element:</p>
<pre class="highlight html"><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;programs_list&quot;</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;program in programs&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;play(program)&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;large-12&quot;</span><span class="nt">&gt;</span>{{ program.title.$text }}<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<p>This step will <em>bind</em> the action <code>play</code> to clicking the list DOM element. Now, once we create the <code>play</code> action in our <code>PlayerController</code>, we&rsquo;ll have a fully functioning audio app:</p>
<pre class="highlight javascript"><span class="c1">// format.mp4.$text is the route to the mp4 file from the NPR api
</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">program</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">playing</span><span class="p">)</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">program</span><span class="p">.</span><span class="nx">audio</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">format</span><span class="p">.</span><span class="nx">mp4</span><span class="p">.</span><span class="nx">$text</span><span class="p">;</span>
  <span class="nx">audio</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
  <span class="nx">audio</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
  <span class="c1">// Store the state of the player as playing
</span>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<p>Although this app is fully functional, it is not very pretty, and the code itself will become bloated and difficult to manage, especially as we start to add new functionality. We can create our own directives to help reduce this complexity.</p>

<blockquote>
<p>To learn more about creating custom directives, check out our deep directives post <a href="/posts/directives.html">here</a>.</p>
</blockquote>

<p>To create a custom directive, we&rsquo;ll use the <code>directive</code> function on the app object:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'nprLink'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'EA'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="p">[</span><span class="s1">'^ngModel'</span><span class="p">],</span>
    <span class="na">replace</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngModel</span><span class="p">:</span> <span class="s1">'='</span><span class="p">,</span>
      <span class="na">play</span><span class="p">:</span> <span class="s1">'&amp;'</span>
    <span class="p">},</span>
    <span class="na">templateUrl</span><span class="p">:</span> <span class="s1">'/views/nprListItem.html'</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">duration</span> <span class="o">=</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">ngModel</span><span class="p">.</span><span class="nx">audio</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">duration</span><span class="p">.</span><span class="nx">$text</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>We won&rsquo;t cover what all of these options mean, as we&rsquo;ve covered it in an in-depth <a href="/posts/directives.html">post</a>, but they allow us to reference this directive in our HTML and replace that DOM element with the contents of our template (in <code>/views/nprListItem</code>).</p>

<p>Now, in our template we can create the isolated view that our list item will refer to while keeping our main HTML clean:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;nprLink row&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;play(ngModel)&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;name large-8 columns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;large-2 small-2 playButton columns&quot;</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">&quot;triangle&quot;</span><span class="nt">&gt;&lt;/div&gt;&lt;/button&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-10 small-10 columns&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;large-12&quot;</span><span class="nt">&gt;</span>{{ ngModel.title.$text }}<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-1 columns&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;small-2 columns push-8&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ ngModel.link[0].$text }}&quot;</span><span class="nt">&gt;</span>Link<span class="nt">&lt;/a&gt;&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<blockquote>
<p>Notice that we refer to the <code>program</code> as <code>ngModel</code> instead of <code>program</code> in the template, due to how we&rsquo;ve set up our directive. </p>
</blockquote>

<p>Now, instead of &lsquo;cluttering&rsquo; our main HTML with this specific HTML, we can simply replace it with:</p>
<pre class="highlight html"><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;programs_list&quot;</span> <span class="na">class=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;program in programs&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">npr-link</span> <span class="na">play=</span><span class="s">'play(program)'</span> <span class="na">ng-model=</span><span class="s">&quot;program&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
</pre>
<p>In the next section, we&rsquo;ll discuss how services work and how to communicate across the controllers in our app.</p>

<p>The <em>official</em> repository for the beginner series is available as a git repo here: <a href="https://github.com/auser/ng-newsletter-beginner-series">https://github.com/auser/ng-newsletter-beginner-series</a>. </p>

<p>To get this repo locally, ensure that you have <code>git</code> installed, clone the repo, and check out <code>part5</code> branch. We are using XHR to fetch templates, so you&rsquo;ll need to run a local server. We&rsquo;ve included a server script in part5:</p>
<pre class="highlight shell">git clone https://github.com/auser/ng-newsletter-beginner-series.git
git checkout part5
./bin/server.sh
</pre>
<div in-this-series prev="/posts/beginner2expert-data-binding.html" next="/posts/beginner2expert-services.html" description="The AngularJS - from beginner to expert in 7 steps series"></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Data binding and AJAX (Part 3 of the AngularJS - from beginner to expert in 7 steps series)</title>
    <link href="http://www.ng-newsletter.com/posts/beginner2expert-data-binding.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/beginner2expert-data-binding.html"/>
    <updated>2013-07-31T00:00:00-07:00</updated>
    <id>urn:uuid:22b820ac-4166-5418-a094-b79ac3e1f29c</id>
    <summary>
This is the third post of AngularJS - from beginner to expert in 7
steps.

We started our first post by showing you how to start out building an AngularJS app. In the second post, we discussed how scopes and the $scope service work.

Throughout this...
</summary>
    <content type="html"><![CDATA[<blockquote>
<p>This is the third post of <a href="/posts/beginner2expert-how_to_start.html">AngularJS - from beginner to expert in 7
steps</a>.</p>

<p>We started our <a href="/posts/beginner2expert-how_to_start.html">first</a> post by showing you how to start out building an AngularJS app. In the <a href="/posts/beginner2expert-scopes.html">second</a> post, we discussed how <code>scopes</code> and the <code>$scope</code> service work.</p>

<p>Throughout this tutorial series, we are building an NPR audio player that will show us the current stories on the show <em>Morning Edition</em> and play them in our browser. To see the fully finished demo, head over <a href="/code/beginner_series">here</a>.</p>
</blockquote>

<h3>3. Data binding</h3>

<p>We can make our app a bit more interesting by <code>binding</code> an input field to the person.name attribute. This step sets up a bi-directional binding from the input field to the page. </p>

<p><img alt="data-binding" src="/images/beginners/data-binding.png" /></p>

<blockquote>
<p>Bi-directional in this context means that if the view changes the value, the model <em>sees</em> the change, and if the model changes the value, then the view will see the change.
AngularJS sets this up <em>automatically</em> for you. We&rsquo;ll discuss the <code>digest_loop</code> in depth in an upcoming article, if you&rsquo;re curious how it works.</p>
</blockquote>

<p>To set up this binding, we&rsquo;ll use the <code>ng-model</code> function on the input, like so:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MyController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;person.name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter your name&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;h5&gt;</span>Hello {{ person.name }}<span class="nt">&lt;/h5&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Now that we have a binding set up (yes, it&rsquo;s <em>that</em> easy), we can see how the view changes the model:</p>

<h4>Try it</h4>

<div ng-controller="DemoController1">
  <input type="text" ng-model="person.name" placeholder="Enter your name" />
  <h5>Hello {{ person.name }}</h5>
</div>

<p>As you type in the input box, you&rsquo;ll see that the name underneath changes automatically. That change illustrates how our data binding works in one direction, from the view to the model. </p>

<p>We can also change the model on the (client-side) back end and see it reflected on the front end. </p>

<p>To illustrate our data binding from back end to front end, let&rsquo;s make a clock function in our <code>MyController</code> model that will update a value on the <code>$scope</code>. In this example, we&rsquo;ll create a clock that will tick every second (as clocks usually do) and change the data on the clock variable:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MyController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Ari Lerner&quot;</span> <span class="p">};</span>
  <span class="kd">var</span> <span class="nx">updateClock</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">clock</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
  <span class="p">};</span>
  <span class="kd">var</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="nx">updateClock</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
  <span class="nx">updateClock</span><span class="p">();</span>
<span class="p">});</span>
</pre>
<p>As you can see, as we change the clock variable on the model, the view automatically updates to reflect our changes.</p>

<p>We can show the <code>clock</code> variable that&rsquo;s attached on the <code>$scope</code> in the view simply by surrounding it in <span ng-non-bindable>{{ }}</span>:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MyController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h5&gt;</span>{{ clock }}<span class="nt">&lt;/h5&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h4>See it it</h4>

<div ng-controller="DemoController1">
  <h5>{{ clock }}</h5>
</div>

<h3>Interaction</h3>

<p>Notice that we have bound data to the input field above. We don&rsquo;t have to limit this data binding to only data. We can also call functions on the <code>$scope</code> (as mentioned previously). </p>

<p>To bind buttons or links (or any DOM element, really), we&rsquo;ll use another built-in directive, <code>ng-click</code>. The <code>ng-click</code> directive binds the click event to the method (the <code>mousedown</code> browser event) to the DOM element (i.e., when the browser fires a click event on the DOM element, the method is called). Similar to our previous example, the binding looks like:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;DemoController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h4&gt;</span>The simplest adding machine ever<span class="nt">&lt;/h4&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;add(1)&quot;</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;</span>Add<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;subtract(1)&quot;</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;</span>Subtract<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;h4&gt;</span>Current count: {{ counter }}<span class="nt">&lt;/h4&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>Both the button and the link will be bound to an action on the containing <code>$scope</code>, so when they are pressed (clicked), Angular will call the method. Note that when we are telling Angular what method to call, we&rsquo;re putting it in a string <em>with</em> the parentheses. </p>

<p>Now, let&rsquo;s create an action on our <code>DemoController</code>. </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'DemoController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">counter</span> <span class="o">+=</span> <span class="nx">amount</span><span class="p">;</span> <span class="p">};</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">subtract</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">amount</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">counter</span> <span class="o">-=</span> <span class="nx">amount</span><span class="p">;</span> <span class="p">};</span>
<span class="p">});</span>
</pre>
<h3>See it</h3>

<div ng-controller="SimpleAddingController">
  <h4>The simplest adding machine ever</h4>
  <button ng-click="add(1)">Add</button>
  <button ng-click="subtract(1)">Subtract</button>
  <h4>Current count: {{ count }}</h4>
</div>

<h2>Data binding and AJAX in our app</h2>

<h3>Interaction</h3>

<p>As we saw in the last example of the <a href="/posts/beginner2expert-scopes.html">previous section</a>, we bound a button to the view using the data binding we just learned about. In that example, we bound the button to the <code>play()</code> action and bound the <code>PlayerController</code>&rsquo;s method <code>play</code> on the play button (and the same for the stop button, with the stop method).</p>

<h3>AJAX</h3>

<p>In the last tutorial, we referenced a locally hosted audio file; however, doing so gives us a static NPR file instead of a live NPR feed. In our NPR app, we&rsquo;ll use <code>$http</code> to populate the list of available news clips we can play. </p>

<p>Out of the box, AngularJS supports AJAX (or asynchronous JavaScript and XML). This support gives us the ability to make requests back and forth from a server or multiple servers, which is essential to a client-side app like ours that needs to get and set data. </p>

<p>AngularJS supports AJAX through a <em>service</em> (which we&rsquo;ll discuss in an upcoming section) called the <code>$http</code> service.</p>

<blockquote>
<p>All of the core AngularJS services are prefixed with <code>$</code>. We&rsquo;ve seen this before with the <code>$scope</code> service.</p>
</blockquote>

<p>The <code>$http</code> service is incredibly flexible and gives us many different ways to call AJAX services. To keep this tutorial simple, we&rsquo;re only going to focus on the simplest method possible. We&rsquo;ll dive deeper into the <code>$http</code> service in a more advanced section in the future.</p>

<p>Before we go too far into detail, let&rsquo;s make a request with the <code>$http</code> service:</p>
<pre class="highlight javascript"><span class="nx">$http</span><span class="p">({</span>
  <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
  <span class="na">url</span><span class="p">:</span> <span class="s1">'http://api.openbeerdatabase.com/v1/beers.json?callback=JSON_CALLBACK'</span>
<span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// data contains the response
</span>  <span class="c1">// status is the HTTP status
</span>  <span class="c1">// headers is the header getter function
</span>  <span class="c1">// config is the object that was used to create the HTTP request
</span><span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
<span class="p">});</span>
</pre>
<h4>Try it</h4>

<div ng-controller="SimpleAjaxController">
  <button ng-click="makeRequest()">Make request</button>
  <pre style="overflow: hidden; height: 250px; border:1px solid #eee;">
    Request result: {{ beers }}
  </pre>
</div>

<p>The <code>$http</code> service is a core AngularJS service that helps faciliate communication with remote HTTP servers via the XMLHttpRequest object or through JSONP. </p>

<blockquote>
<p>Note that AngularJS will take care of handling a JSONP request if you append the EXACT string: <code>callback=JSON_CALLBACK</code> as just above. AngularJS will replace <code>JSON_CALLBACK</code> with the proper callback it constructs for you.</p>
</blockquote>

<p>The <code>$http</code> service is a function that takes a configuration object, which defines how the HTTP request is constructed. It will return a <em>promise</em> that has two methods <em>success</em> and <em>error</em>. </p>

<p>To get a list of the available audio clips, let&rsquo;s make a request to NPR&rsquo;s API. First, you&rsquo;ll need to register with NPR to get an API key. Head over to their site at <a href="http://www.npr.org/templates/reg/">http://www.npr.org/templates/reg/</a> or click <a ng-click="showNprRegister = !showNprRegister">here</a> to register from this page.</p>

<div ng-show="showNprRegister">
<small>Register for your account below first. Once your account has been created, click on &ldquo;Open Api&rdquo; to find your API key</small>
<iframe src="http://www.npr.org/templates/reg/" width="100%" height="400px"></iframe>
</div>

<p>Keep note of your API key. We&rsquo;ll use that in a minute. Now, we&rsquo;re going to set up our PlayerController to call the <code>$http</code> service to fetch a list of the clips. </p>

<p>Just like we did above, let&rsquo;s call the <code>$http</code> service to make a request, this time to get all the clips. We want this service to run when the controller is instantiated, so we can simply put this method right in the controller function (which is run when the controller is created), like so:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">apiKey</span> <span class="o">=</span> <span class="s1">'YOUR_KEY'</span><span class="p">,</span>
    <span class="nx">nprUrl</span> <span class="o">=</span> <span class="s1">'http://api.npr.org/query?id=61&amp;fields=relatedLink,title,byline,text,audio,image,pullQuote,all&amp;output=JSON'</span><span class="p">;</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Hidden our previous section's content
</span>  <span class="c1">// construct our http request
</span>  <span class="nx">$http</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="nx">nprUrl</span> <span class="o">+</span> <span class="s1">'&amp;apiKey='</span> <span class="o">+</span> <span class="nx">apiKey</span> <span class="o">+</span> <span class="s1">'&amp;callback=JSON_CALLBACK'</span>
  <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Now we have a list of the stories (data.list.story)
</span>    <span class="c1">// in the data object that the NPR API 
</span>    <span class="c1">// returns in JSON that looks like:
</span>    <span class="c1">// data: { &quot;list&quot;: {
</span>    <span class="c1">//   &quot;title&quot;: ...
</span>    <span class="c1">//   &quot;story&quot;: [
</span>    <span class="c1">//     { &quot;id&quot;: ...
</span>    <span class="c1">//       &quot;title&quot;: ...
</span>  <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Some error occurred
</span>  <span class="p">});</span>
<span class="p">});</span>
</pre>
<p>Now that we have the the list of clips in <code>data</code> in the success function, we can bind it to the <code>$scope</code> object simply by storing the list on <code>$scope</code> in the <code>success</code> callback:</p>
<pre class="highlight javascript"><span class="c1">// from above
</span><span class="err">}</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Store the list of stories on the scope
</span>  <span class="c1">// from the NPR API response object (described above)
</span>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">programs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">.</span><span class="nx">story</span><span class="p">;</span>
<span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Some error occurred
</span></pre>
<p>Now, just like above, we can reference this data in our view simply by referencing <code>programs</code> in our view. Note that one of the benefits of using AngularJS is that it will automatically populate promises into your view when the promise resolves.</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;PlayerController&quot;</span><span class="nt">&gt;</span>
{{ programs }}
<span class="nt">&lt;/div&gt;</span>
</pre>
<h2>Try it</h2>

<div ng-controller="DemoPlayerController">
<input ng-model="apiKey" placeholder="Enter your NPR API key" />
<small ng-bind-html-unsafe="errorMessage" style="display: block;"></small>
<pre>
{{ programs | limitTo:1 }}
</pre>
</div>

<p>In the next section, we&rsquo;ll discuss how to display this data object in our view in a meaningful way using some built-in directives (and a little bit more). </p>

<p>The <em>official</em> repository for the beginner series is available as a git repo here: <a href="https://github.com/auser/ng-newsletter-beginner-series">https://github.com/auser/ng-newsletter-beginner-series</a>. </p>

<p>To get this repo locally, ensure that you have <code>git</code> installed, clone the repo, and check out the <code>part3</code> branch:</p>
<pre class="highlight text">git clone https://github.com/auser/ng-newsletter-beginner-series.git
git checkout part3
</pre>
<div in-this-series prev="/posts/beginner2expert-scopes.html" next="/posts/beginner2expert-directives.html" description="The AngularJS - from beginner to expert in 7 steps series"></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Scopes (Part 2 of the AngularJS - from beginner to expert in 7 steps series)</title>
    <link href="http://www.ng-newsletter.com/posts/beginner2expert-scopes.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/beginner2expert-scopes.html"/>
    <updated>2013-07-30T00:00:00-07:00</updated>
    <id>urn:uuid:fdce4fb2-0e51-5580-8660-454bbc7284f8</id>
    <summary>
This is the second post of AngularJS - from beginner to expert in 7 steps.

We started our first post by showing you how to start out building an AngularJS app. In this post, we’ll discuss a fundamental concept in understanding how AngularJS works...
</summary>
    <content type="html"><![CDATA[<blockquote>
<p>This is the second post of <a href="/posts/beginner2expert-how_to_start.html">AngularJS - from beginner to expert in 7 steps</a>.</p>

<p>We started our <a href="/posts/beginner2expert-how_to_start.html">first</a> post by showing you how to start out building an AngularJS app. In this post, we&rsquo;ll discuss a fundamental concept in understanding how AngularJS works and how you can use it to your advantage.</p>

<p>Throughout this tutorial series, we are going to be building an NPR audio player that will show us the current stories on the show <em>Morning Edition</em> and play them in our browser. To see the fully finished demo, head over <a href="/code/beginner_series">here</a>.</p>
</blockquote>

<h3>Part 2. Scopes</h3>

<p>A <code>$scope</code> is an object that ties a view (a DOM element) to the controller. In
the Model-View-Controller structure, this <code>$scope</code> object becomes the model. It
provides an <em>execution context</em> that is <em>bound</em> to the DOM element (and its children).</p>

<p>Although it sounds complex, the <code>$scope</code> is <em>just a JavaScript object</em>. Both the
controller and the view have access to the <code>$scope</code> so it can be used for
communication between the two. This <code>$scope</code> object will house both the data
and the functions that we&rsquo;ll want to run in the view, as we&rsquo;ll see.</p>

<p>All AngularJS apps have a <code>$rootScope</code>. The <code>$rootScope</code> is the top-most scope that is created on the DOM element that contains the <code>ng-app</code> directive. </p>

<blockquote>
<p>This is where AngularJS <em>binds</em> data and functions when explicit <code>$scopes</code>
are not set in the page. This is why the example in <a href="/posts/beginner2expert-how_to_start.html">part 1</a>
works.</p>
</blockquote>

<p>In this example, we&rsquo;re working with the <code>$rootScope</code>. We add an attribute on the
scope of <code>name</code> in our <code>main.js</code> file. By putting this function in the <code>app.run</code> function, we&rsquo;ll guarantee that it will run prior to the rest of the app. You can think of the <code>run</code> function being the <em>main</em> method of the angular app.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Ari Lerner&quot;</span><span class="p">;</span>
<span class="p">});</span>
</pre>
<p>Now, anywhere in our view, we can reference this attribute using the expression/template: <span ng-non-bindable>{{ }}</span>,
like so:</p>
<pre class="highlight text">{{ name }}
</pre>
<blockquote>
<p>We&rsquo;ll go more in-depth into how the expression template syntax works later in this series.</p>
</blockquote>

<h4>See it:</h4>

<p>{{ aPersonsname }}</p>

<p>In summary:</p>

<ul>
<li>Anything that we attach to this <code>$scope</code> object will become available to the view. </li>
<li>Likewise, any changes that the controller makes to the model will show up as changes in the view.</li>
</ul>

<p>To really see the power of scopes, let&rsquo;s attach a controller to a DOM element, which will create a <code>$scope</code> for the element and allow us to interact with it. </p>

<h3>ng-controller</h3>

<p>To explicitly create a <code>$scope</code> object, we&rsquo;ll attach a controller object to a DOM element using the <code>ng-controller</code> directive on an object, like so:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MyController&quot;</span><span class="nt">&gt;</span>
  {{ person.name }}
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>The <code>ng-controller</code> directive creates a new <code>$scope</code> object for the DOM element and nests it in the containing <code>$scope</code>. In this example, the parent <code>$scope</code> of the div with <code>ng-controller</code> is the <code>$rootScope</code> object. The scope chain looks like this:</p>

<p><img alt="Prototypal scope inheritance" src="/images/beginners/scope-parents.png" /></p>

<p>Now, <code>MyController</code> sets up a <code>$scope</code> that we can access from inside the DOM element. In this case, we&rsquo;re going to create a person object on the <code>$scope</code> of MyController, in main.js: </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'MyController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="s2">&quot;Ari Lerner&quot;</span>
  <span class="p">};</span>
<span class="p">});</span>
</pre>
<p>Now we can access this <code>person</code> object in any child element of the div where <code>ng-controller=&#39;MyController&#39;</code> is written <em>because</em> it is on the <code>$scope</code>. </p>

<h4>See it</h4>

<div ng-controller="DemoController1">
  {{ aPersonsname }}
</div>

<p><br/>
With one exception, all scopes are created with prototypal inheritance, meaning that they have access to their parent scopes. By default, for any property that AngularJS cannot find on a local scope, AngularJS will crawl up to the containing (parent) scope and look for the property or method there. If AngularJS can&rsquo;t find the property there, it will walk to that scope&rsquo;s parent and so on and so forth until it reaches the <code>$rootScope</code>.</p>

<blockquote>
<p>The one exception: Some directives can optionally create an <em>isolate</em> scope and do <em>not</em> inherit from their parents.</p>
</blockquote>

<p>For instance, say we have a <code>ParentController</code> that contains the <code>person</code> object and a <code>ChildController</code> that wants to reference that object:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ParentController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span><span class="na">greeted</span><span class="p">:</span> <span class="kc">false</span><span class="p">};</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'ChildController'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sayHello</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span><span class="p">.</span><span class="nx">greeted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>When we bind the <code>ChildController</code> under the <code>ParentController</code> in our view, we can reference the property on the parent scope just as if it were on the <code>ChildController</code>:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ParentController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ChildController&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;person.name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Name&quot;</span><span class="nt">&gt;&lt;/input&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">ng-click=</span><span class="s">&quot;sayHello()&quot;</span><span class="nt">&gt;</span>Say hello<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  {{ person }}
<span class="nt">&lt;/div&gt;</span>
</pre>
<p><img alt="Nested prototypal scope inheritance" src="/images/beginners/nested-scope-parents.png" /></p>

<h4>See it</h4>

<div ng-controller="ParentController">
  <div ng-controller="ChildController">
    <input type="text" ng-model="person.name" placeholder="Name"></input>
    <a class="button" ng-click="sayHello()">Say hello</a>
    <a class="button alert" ng-click="reset()">Reset</a>
  </div>
  {{ person }}
</div>

<h2>Integrating in myApp</h2>

<p>Now let&rsquo;s use the power of the <code>$scope</code> to manage our <em>NPR</em> app. We left off <a href="/posts/beginner2expert-how_to_start.html">last article</a> having just defined the app module. Now, let&rsquo;s start breaking up our DOM structure and build our fundamental functionality.</p>

<p>Just like we saw in the example above, we&rsquo;ll create a <em>root controller</em> called <code>PlayerController</code>. Our <code>RelatedController</code> will be responsible for keeping track of our audio element and will handle fetching our listing of NPR programs.</p>

<p>Let&rsquo;s create both of our controllers, back in <code>main.js</code>:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'myApp'</span><span class="p">,</span> <span class="p">[]);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}]);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'RelatedController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}]);</span>
</pre>
<h4>Audio</h4>

<p>These controllers don&rsquo;t do much yet, so let&rsquo;s get some audio going on in the app. In this tutorial, we&rsquo;ll be using the HTML5 <em>audio</em> element, so make sure you have an HTML5-compliant browser (we prefer <a href="https://www.google.com/chrome">Google Chrome</a>).</p>

<p>To add an audio element, we can either add it in the HTML or in our controller. Since we&rsquo;ll be interacting with the audio element primarily in our controller, it makes most sense to create it here. </p>

<p>In our <code>PlayerController</code>, let&rsquo;s create an audio element. We&rsquo;ll store it on our scope, which, as you know by now, means that we&rsquo;ll connect the view to the controller through the <code>$scope</code> object.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'audio'</span><span class="p">);</span>
<span class="p">}]);</span>
</pre>
<p>Now, this setup is kind of boring, as it doesn&rsquo;t do very much yet. We&rsquo;ll cover &lsquo;fetching&rsquo; the data in the next part of our series, so for now we&rsquo;ll hardcode a <code>.mp4</code> url. </p>

<p>In the same <code>PlayerController</code>, set the src of the audio file to an <code>.mp4</code> URL to which you have access. For the purpose of convenience, we&rsquo;re using an NPR audio file that we are hosting, but we can point to any URL. Simply set your audio source as the URL of the audio file. </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'audio'</span><span class="p">);</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'/media/npr.mp4'</span><span class="p">;</span>
<span class="p">}]);</span>
</pre>
<h2>Try it</h2>

<div ng-controller="PlayerController1">
<button ng-click="play()" class="button" ng-show="!playing">Play</button>
<button ng-click="stop()" class="button alert" ng-show="playing">Stop</button>
Playing audio: <b>{{ playing }}</b>
</div>

<p>The audio won&rsquo;t play unless we tell it to play. To do that, we can simply call <code>$scope.audio.play()</code>, and the HTML5 audio element will take over and start playing from the mp4 stream.</p>

<p>We can provide an interactive element to the user by creating a button that <code>binds</code> to an action on the <code>$scope</code>. We&rsquo;ll discuss this more in-depth in the next section, however the HTML for the view above looks like:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;PlayerController&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;play()&quot;</span> <span class="na">class=</span><span class="s">&quot;button&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;!playing&quot;</span><span class="nt">&gt;</span>Play<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;stop()&quot;</span> <span class="na">class=</span><span class="s">&quot;button alert&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;playing&quot;</span><span class="nt">&gt;</span>Stop<span class="nt">&lt;/button&gt;</span>
  Playing audio: <span class="nt">&lt;b&gt;</span>{{ playing }}<span class="nt">&lt;/b&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<blockquote>
<p>Notice that we don&rsquo;t have to reference the <code>audio</code> element we create on the
scope. This is because we are <em>creating</em> it in the controller when the
controller is loaded using <code>document.createElement(&quot;audio&quot;)</code>.
Note that we are going to <em>refactor</em> this component later in the tutorial series. It&rsquo;s generally a bad idea to manipulate DOM components inside of a controller (thanks Brad Green for pointing this out as a note). We&rsquo;re keeping this component here to maintain simplicity.</p>
</blockquote>

<p>We&rsquo;ve added a few variables in the view that we are keeping track of in on the
<code>$scope</code>. We&rsquo;re using a few advanced concepts that we&rsquo;ll discuss in detail
throughout the series, so do not worry if it doesn&rsquo;t all make sense
immediately:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'PlayerController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'audio'</span><span class="p">);</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">'/media/npr.mp4'</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">stop</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">pause</span><span class="p">();</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">playing</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'ended'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}]);</span>
</pre>
<p>That&rsquo;s a solid introduction into AngularJS&rsquo;s <code>$scope</code> service. In the next section, we&rsquo;ll cover bi-directional data binding in AngularJS. </p>

<p>The <em>official</em> repository for the beginner series is available as a git repo here: <a href="https://github.com/auser/ng-newsletter-beginner-series">https://github.com/auser/ng-newsletter-beginner-series</a>. </p>

<p>To get this repo locally, ensure that you have <code>git</code> installed, clone the repo, and check out the <code>part2</code> branch:</p>
<pre class="highlight text">git clone https://github.com/auser/ng-newsletter-beginner-series.git
git checkout part2
</pre>
<div in-this-series prev="/posts/beginner2expert-how_to_start.html" next="/posts/beginner2expert-data-binding.html" description="The AngularJS - from beginner to expert in 7 steps series"></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html">How to get started (Part 1 of the AngularJS - from beginner to expert in 7 steps series)</title>
    <link href="http://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/beginner2expert-how_to_start.html"/>
    <updated>2013-07-29T00:00:00-07:00</updated>
    <id>urn:uuid:0e8f29fa-c4de-53e5-9985-897f32e13037</id>
    <summary>This is the first post of AngularJS - from beginner to expert in 7 steps series.

AngularJS redefines how to build front-end applications. Instead of being afraid to cross the boundary between HTML and JavaScript, it takes it head-on. 

Application...</summary>
    <content type="html"><![CDATA[<p>This is the first post of <em>AngularJS - from beginner to expert in 7 steps</em> series.</p>

<p>AngularJS redefines how to build front-end applications. Instead of being afraid to cross the boundary between HTML and JavaScript, it takes it head-on. </p>

<p>Application frameworks, like Backbone, EmberJS, and others, require developers to extend from JavaScript objects that are specific to their frameworks. Although this approach has its merits, it unnecessarily pollutes your object space and requires you to have intimate knowledge of abstract objects that exist in memory. But we accept it because the web wasn&rsquo;t originally designed to be as interactive as we expect it to be today, and we need frameworks to help us close the gap between JavaScript and HTML.</p>

<p><strong>AngularJS closes that gap.</strong></p>

<p>Instead of manipulating the DOM &ldquo;directly,&rdquo; you annotate your DOM with metadata (directives), and Angular manipulates the DOM for you.</p>

<p>AngularJS also does not depend on (or exclude the use of) any other framework. You can even build AngularJS apps in non-AngularJS frameworks.</p>

<p>It just <em>works</em>. </p>

<p>Sound awesome? It is. In this 7-part series we&rsquo;re going to walk you through how to get started writing serious apps with AngularJS - even if you&rsquo;ve never touched it before.</p>

<p>Follow along on this journey, and we&rsquo;ll teach you how to become an <em>expert</em> AngularJS developer.</p>

<h4>First things first: When should you use AngularJS?</h4>

<p>AngularJS is an MV* framework that is ideal for use when building <strong>client-side</strong> <strong>single-page</strong> apps. It is <em>not a library</em>, but a <em>framework</em> for building dynamic web pages. It focuses on <strong>extending HTML</strong> and providing <strong>dynamic data binding</strong>, and it plays well with other frameworks (e.g., jQuery). </p>

<p>If you are building a single-page app, AngularJS will be perfect for you. <a href="http://gmail.com">Gmail</a>, <a href="http://docs.google.com">Google Docs</a>, <a href="http://twitter.com">Twitter</a>, and <a href="http://facebook.com">Facebook</a> all fit into the AngularJS <em>sweet spot</em>. Game development and other apps that heavily manipulate the DOM or need pure speed are not good fits for AngularJS. </p>

<p>Now that we&rsquo;ve gotten through that intro, here is the first topic you need to understand in order to learn AngularJS:</p>

<h3>1. How to start writing an app</h3>

<p>Throughout this tutorial series, we are going to be building an NPR audio player that will show us the current stories on the show <em>Morning Edition</em> and play them in our browser. To see the fully finished demo, head over <a href="/code/beginner_series">here</a>.</p>

<p>When writing an AngularJS app, we write the <strong>behavior</strong> and <strong>interaction</strong> together alongside the <strong>presentation</strong>. </p>

<p>Writing this way can be confusing at first, especially if you have experience with other frameworks where the two are generally separate. Once you get the hang of it, it&rsquo;ll become second nature. </p>

<p>Let&rsquo;s look at the simplest app you can build with AngularJS:</p>
<pre class="highlight html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;yourName&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter a name here&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;h1&gt;</span>Hello, {{ yourName }}!<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre>
<h4>Try it</h4>

<div>
  <input type="text" ng-model="yourName1" placeholder="Enter a name here">
  <h1>Hello, {{ yourName1 }}!</h1>
</div>

<p>As you can see, you get bi-directional data binding without any work. </p>

<p>Bi-directional data binding means that if you change data on the back end, your changes will show up in your view automagically (actually, there&rsquo;s no magic involved; we&rsquo;ll get into how this works soon). </p>

<p>Similarly, if you change data in your view (e.g., by typing into a text box), it will automagically update your model. </p>

<p>So what did we do in our app? </p>

<ul>
<li>ng-app</li>
<li>ng-model=&ldquo;yourName&rdquo;</li>
<li><span ng-non-bindable>{{ yourName }}</span></li>
</ul>

<p><strong>First</strong>, we used our most important (and most easily forgotten) term: the <code>ng-app</code> attribute on the <code>&lt;html&gt;</code> tag. Without this tag, the AngularJS process does not start.</p>

<p><strong>Second</strong>, we told AngularJS that we want to set up bi-directional data binding on the <code>yourName</code> model on the page.</p>

<p><strong>Third</strong>, we told AngularJS to display the data <code>yourName</code> in the directive template called <span ng-non-bindable>{{ yourName }}</span>. </p>

<p>That&rsquo;s it. We&rsquo;ve created a dynamic app that would ordinarily have taken much longer and many more lines of code to build: We did not have to specify any rules on bi-directional data binding, we didn&rsquo;t have to write any updating code, we didn&rsquo;t have to specify any models, and, in fact, we haven&rsquo;t even touched JavaScript yet. We won&rsquo;t have to do that until we want to build apps with more customized behavior.</p>

<p>As you&rsquo;ll see, all of the above <em>just works</em> because of the power of AngularJS&rsquo;s design. </p>

<h3>Building your app</h3>

<p>In this section we&rsquo;ll discuss an app we&rsquo;ll call <code>myApp</code>. You can follow along with our series by git cloning the repository (instructions below) or by following along with our instructions. Create an index.html file with the following content:</p>
<pre class="highlight html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre>
<p>Then, make a directory called <code>js</code> and make a file in that directory called <code>main.js</code>, like so:</p>
<pre class="highlight text">mkdir js
touch js/main.js
</pre>
<p>This HTML page will load both AngularJS and our app that we&rsquo;ll write in <code>main.js</code>. Almost all of the work that we will do in this section will be in the <code>main.js</code> file.</p>

<p>In order to extend and customize our app, we&rsquo;ll need to write some JavaScript. All the JavaScript that we will write will go into our <code>main.js</code> file. </p>

<h3>angular.module</h3>

<p>To define an AngularJS app, we first need to define an <code>angular.module</code>. An Angular module is simply a collection of functions that are run when the application is &ldquo;booted.&rdquo; (We&rsquo;re not going to discuss configuration and run blocks in this series, but we&rsquo;ll address them in future sections.) </p>

<p>Next, we need to define the module in our <code>main.js</code> file:</p>
<pre class="highlight text">var app = angular.module('myApp', []);
</pre>
<p>This line creates the Angular module named <code>myApp</code>. (Don&rsquo;t worry about the second argument &ndash; the empty array, <code>[]</code> &ndash; for now. We&rsquo;ll get to it.)</p>

<p>Now, we want to instantiate our <code>myApp</code> module on our page and tell Angular where in the DOM tree our app lives. To instantiate the module in a page, we&rsquo;ll be using the <code>ng-app</code> directive, which tells Angular that we want our module to <em>own</em> that part of the DOM tree. </p>

<p>We can instantiate our own app (module) by simply passing the name of our app as the value in our <code>index.html</code> file:</p>
<pre class="highlight html"><span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;myApp&quot;</span><span class="nt">&gt;</span>
</pre>
<p>When we refresh the page, Angular will bootstrap <code>myApp</code>.</p>

<p>We can set <code>ng-app</code> on <em>any element in the DOM</em>, and that&rsquo;s where Angular will launch on the page. This step is how we can write an Angular app inside of any web page, even if the rest of the application isn&rsquo;t written in Angular. </p>
<pre class="highlight text">&lt;h2&gt;I am not inside an AngularJS app&lt;/h2&gt;
&lt;div ng-app=&quot;embeddedApp&quot;&gt;
  &lt;h3&gt;Inside an AngularJS app&lt;/h3&gt;
&lt;/div&gt;
</pre>
<p>For an app that will take over the entire page, you can place the <code>ng-app</code> directive on the html element.</p>

<p>Once we&rsquo;ve defined our app, we can start building out the rest of the application. We&rsquo;ll build using <code>$scope</code>, which is one of the most important Angular concepts. We will cover the <code>$scope</code> service in depth in Part 2 of our 7-part series.</p>

<p>So there we have it - the basic structure for an Angular app. We&rsquo;ll use this as a starting point to build our NPR player. </p>

<p>The <em>official</em> repository for the beginner series is available as a git repo here: <a href="https://github.com/auser/ng-newsletter-beginner-series">https://github.com/auser/ng-newsletter-beginner-series</a>. </p>

<p>To get this repo locally, ensure you have <code>git</code> installed, clone the repo, and check out the <code>part1</code> branch:</p>
<pre class="highlight text">git clone https://github.com/auser/ng-newsletter-beginner-series.git
git checkout part1
</pre>
<div in-this-series next="/posts/beginner2expert-scopes.html" description="The AngularJS - from beginner to expert in 7 steps series"></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Build custom directives with AngularJS</title>
    <link href="http://www.ng-newsletter.com/posts/directives.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/directives.html"/>
    <updated>2013-07-15T00:00:00-07:00</updated>
    <id>urn:uuid:21c9e675-e1f1-5928-b93c-cf3e5ece3f43</id>
    <summary>
Most everything we use in AngularJS is a directive. Directives are what makes AngularJS so powerful and responsive. Directives are the root of AngularJS and how we as developers interact with AngularJS. 

Although AngularJS is packed with powerful...
</summary>
    <content type="html"><![CDATA[<p>Most everything we use in AngularJS is a directive. Directives are what makes AngularJS so powerful and responsive. Directives are the root of AngularJS and how we as developers interact with AngularJS. </p>

<p>Although AngularJS is packed with powerful directives out of the box, often times we want to create our own reusable functionality. In this post, we&rsquo;ll focus on how to tackle the seemingly complex process of creating directives. We&rsquo;ll start with building simple directives and explain the process throughout the post.</p>

<p>To start making your own directive, let&rsquo;s first understand what directives actually are. Directives, in AngularJS are, at their core functions that get run when the DOM is compiled by the compiler.</p>

<p>Using this powerful concept, AngularJS enables us to create new directives that we can encapsulate and simplify DOM manipulation. We can create directives that modify or even create totally new behavior in HTML. </p>

<p>If you&rsquo;ve ever used any part of AngularJS before, you&rsquo;ve used a directive, whether you know it or not. The <code>ng-app</code> attribute is a directive, so is <code>ng-controller</code> and all of the <code>ng-</code> prefixed attributes.</p>
<pre class="highlight html"><span class="nt">&lt;body</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>{{ name }}<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</pre>
<h2>Try it</h2>

<p><small>Type &lsquo;Hello Ari Lerner&rsquo;</small>
<body ng-app>
  <input type="text" ng-model="name" placeholder="name"/>
  <h1>{{ name }}</h1>
</body></p>

<p>When AngularJS loads this simple example, it will traverse the DOM elements looking for any directives that are associated with each DOM element. Once it&rsquo;s found all of them (if there are multiple directives), it will then start running the directive and associating it with the DOM element. This all happens behind the scenes and automatically for you.</p>

<p>To <code>invoke</code> a directive from HTML, we simply can apply the directive in the DOM. That is to say, we pick one of the four methods for invoking a directive:</p>

<h4>As an attribute:</h4>
<pre class="highlight html"><span class="nt">&lt;span</span> <span class="na">my-directive</span><span class="nt">&gt;&lt;/span&gt;</span>
</pre>
<h4>As a class:</h4>
<pre class="highlight html"><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;my-directive: expression;&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</pre>
<h4>As an element:</h4>
<pre class="highlight html"><span class="nt">&lt;my</span><span class="na">-directive</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-directive&gt;
</pre>
<h4>As a comment:</h4>
<pre class="highlight html"><span class="c">&lt;!-- directive: my-directive expression --&gt;</span>
</pre>
<p>These are the same in the eyes of AngularJS. In fact, AngularJS even gives you other options for invoking directives with name prefixes. These are all equivalent, as well:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;directivename&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;name&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;span</span> <span class="na">ng-bind=</span><span class="s">&quot;directivename&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">ng:bind=</span><span class="s">&quot;directivename&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">ng_bind=</span><span class="s">&quot;directivename&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">x-ng-bind=</span><span class="s">&quot;directivename&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">data-ng-bind=</span><span class="s">&quot;directivename&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</pre>
<h2>Try it</h2>

<div class="large-12">
<input type="text" ng-model="directivename" placeholder="name" />
<b>ng-bind=&ldquo;directivename&rdquo;</b>: <span ng-bind="directivename"></span><br />
<b>ng:bind=&ldquo;directivename&rdquo;</b>: <span ng:bind="directivename"></span><br />
<b>ng_bind=&ldquo;directivename&rdquo;</b>: <span ng-bind="directivename"></span><br />
<b>x-ng-bind=&ldquo;directivename&rdquo;</b>: <span x-ng-bind="directivename"></span><br />
<b>data-ng-bind=&ldquo;directivename&rdquo;</b>: <span data-ng-bind="directivename"></span>
</div>

<p>The last two are are the only methods of invoking directives that are HTML5 compliant and that will pass HTML5 validators. </p>

<h2>Building our first directive</h2>

<p>Although we&rsquo;ll discuss in greater detail how directives actually work at the fundamental level later, let&rsquo;s start by creating our first directive. </p>

<p>We&rsquo;ll be walking through creating a sparkline directive that will show the weather forecast for the next few days based on <a href="http://openweathermap.org">openweathermap</a> data. We will be building this directive:</p>

<div ng-sparkline5 ng-city="San Francisco" width='400'></div>

<p>Our first, basic directive looks like this:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;/div&gt;'</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>And then we&rsquo;ll invoke it in our html:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-sparkline</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<div ng-sparkline1></div>

<p>Notice that when we invoke it, the name of the directive is not the same as when we define it (<code>ngSparkline</code> vs. <code>ng-sparkline</code>). This is because AngularJS will handle translating the <em>camel cased</em> name when we define it to the <em>snake case</em> when we invoke it. </p>

<p>Although our first example doesn&rsquo;t do very much (yet), it already is showing some powerful features. Anywhere in our html, we can add the attribute <code>ng-sparkline</code> and have the template be appended to the DOM element. </p>

<p>There are two ways to build a directive. In our example, we&rsquo;re using the method of returning a <em>directive description object</em>. AngularJS expects either one of these objects or a <code>link</code> function when we&rsquo;re creating a directive. Building a directive with the link function is usually enough for relatively simple directives. For the most part, we&rsquo;ll be creating directives using the description object.</p>

<h4>Restrict option</h4>

<p>In our example&rsquo;s description object, we&rsquo;re setting two config components. First, we&rsquo;re setting the <code>restrict</code> config option. The restrict option is used to specify how a directive can be invoked on the page.</p>

<p>As we saw before, there are four different ways to invoke a directive, so there are four <em>valid</em> options for restrict:</p>
<pre class="highlight html">'A' - <span class="nt">&lt;span</span> <span class="na">ng-sparkline</span><span class="nt">&gt;&lt;/span&gt;</span>
'E' - <span class="nt">&lt;ng</span><span class="na">-sparkline</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ng-sparkline&gt;
'C' - <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;ng-sparkline&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
'M' - <span class="c">&lt;!-- directive: ng-sparkline --&gt;</span>
</pre>
<p>The <code>restrict</code> option can specify multiple options, as well. If you want to support more than one as an element or an attribute, simply make sure all are specified in the <code>restrict</code> keyword:</p>
<pre class="highlight javascript"><span class="nx">restrict</span><span class="err">:</span> <span class="s1">'EA'</span>
</pre>
<h4>Template</h4>

<p>Secondly, in our example we&rsquo;re also setting a template. This template is an inline template where we are specifying the html that will be appended (or replaced, we&rsquo;ll discuss this shortly). This is particularly useful when we want to share directives across apps and you only want to pass a single file around.</p>

<h4>TemplateUrl</h4>

<p>If you prefer to load a template over ajax, you can specify the <code>templateUrl</code> option, which will use ajax to pull the template.</p>
<pre class="highlight javascript"><span class="nx">templateUrl</span><span class="err">:</span> <span class="s1">'templates/ng-sparkline-template.html'</span>
</pre>
<p>With that, we can start adding functionality. Before we can jump straight into that, we need to look at how the directive is instantiated in the DOM.</p>

<h3>How directives are born (compilation and instantiation)</h3>

<p>When the DOM is done loading and the AngularJS process starts booting up, the first process that happens is the HTML is parsed by the browser as a DOM tree. This tree is then parsed using AngularJS&rsquo;s <code>$compile()</code> method. <code>$compile</code> runs through the DOM tree and looks for directive declarations for the different DOM elements. Once all directive declarations are found for each DOM element and sorted (by priority, which we&rsquo;ll get into shortly), the directive&rsquo;s <code>compile</code> function is run and is expected to return a <code>link()</code> function. The <code>$compile()</code> function will return a linking function that wraps all of the containing DOM element&rsquo;s directives&#39; linking functions. </p>

<p>Finally, the linking function is invoked with the containing scope that attaches all of the associated directives to that scope. This is where we&rsquo;ll do most of the work when building directives, as this is where we can register listeners, set up watches, and add functionality. The result of this process is why the <code>live</code> data-binding exists between the <code>scope</code> and the DOM tree. </p>

<h3>Why have a <code>compile</code> and <code>link</code> function?</h3>

<p>So why does AngularJS have two functions that run at the compile phase instead of just combining them into one? Boiled down, the answer is for performance. It&rsquo;s <strong>slow</strong> to compile and interpolate against scopes every time a new directive of the same type is created. Because of this, all of the <em>slow</em> parts of the compilation process are front-loaded into the compile phase, while the linking happens when everything is associated and attached to the DOM. </p>

<h3>In summary</h3>

<p>We&rsquo;ll use the <code>compile</code> function to both manipulate the DOM <em>before</em> it&rsquo;s rendered and return a <code>link</code> function (that will handle the linking for us). This <em>also</em> is the place to put any methods that need to be shared around with all of the instances of this directive.</p>

<p>We&rsquo;ll use the <code>link</code> function to register all listeners on a specific DOM element (that&rsquo;s cloned from the template) and set up our bindings to the page.</p>

<h3>Back to ngSparkline</h3>

<p>Our sparkline graph will need to do a little more than show us a div on the page to actually be useful. To do that, we&rsquo;ll have to bind a controller input on the directive. Basically, we&rsquo;ll want the directive to be driven by the input of another directive. In most cases, we&rsquo;ll want to bind our directive to the <code>ng-model</code> directive&rsquo;s controller. </p>

<h4>Require option</h4>

<p>We&rsquo;ll enforce that we need this dependency by setting the <code>require</code> option:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngModel'</span><span class="p">,</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;h4&gt;Weather for {{ngModel}}&lt;/h4&gt;&lt;/div&gt;'</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Now, if we invoke the directive on the page <em>without</em> the <code>ng-model</code> directive, our browser will complain and throw an error. To invoke our directive now, we simply have to add the <code>ng-model</code> directive:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;city&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter a city&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;div</span> <span class="na">ng-sparkline</span> <span class="na">ng-model=</span><span class="s">&quot;city&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<p>Notice, in the <code>require</code> option, we prefixed the controller with a <code>^</code>. AngularJS gives you two options in the require option about how to declare requirements with a prefixed character:</p>
<pre class="highlight javascript"><span class="o">^</span> <span class="o">--</span> <span class="nx">Look</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">controller</span> <span class="nx">on</span> <span class="nx">parent</span> <span class="nx">elements</span><span class="p">,</span> <span class="nx">not</span> <span class="nx">just</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">local</span> <span class="nx">scope</span>
<span class="p">?</span> <span class="o">--</span> <span class="nx">Don</span><span class="s1">'t raise an error if the controller isn'</span><span class="nx">t</span> <span class="nx">found</span>
</pre>
<h5>Scope</h5>

<p>Just like in every other part of AngularJS DOM control, directives can be given their own scopes. This is important to note, because without declaring an isolated scope from the rest of the DOM, our directive could muck with the local controller scope and cause unexpected behavior. </p>

<p>To get around this trouble, AngularJS gives you the ability to <em>isolate</em> the scope of the directive from the rest of the page using the <code>scope</code> option. </p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngModel'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngModel</span><span class="p">:</span> <span class="s1">'='</span>
    <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;h4&gt;Weather for {{ngModel}}&lt;/h4&gt;&lt;/div&gt;'</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>The scope option can take one of two different options. It can be set to <em>true</em> (it&rsquo;s false by default).</p>
<pre class="highlight javascript">    <span class="nx">scope</span><span class="err">:</span> <span class="kc">true</span><span class="p">,</span>
</pre>
<p>When the scope directive is set to <em>true</em>, a new scope will be created for the directive. </p>

<p>While it&rsquo;s useful to ensure that a new scope will be created for the directive, that scope will still participate in the normal controller-scope hierarchical relationship. We can <em>isolate</em> the directive&rsquo;s scope outside of the parent relationship by creating an <em>isolate</em> scope.</p>

<p>An <em>isolate</em> scope does <em>not</em> prototypically inherit from the parent scope, but creates an entirely new one. Creating this <em>isolate</em> scope will ensure that your directive does not mess with the existing scope. </p>

<p>To create an <em>isolate</em> scope, simply pass an object back in the <code>scope</code> option:</p>
<pre class="highlight javascript"><span class="nx">scope</span><span class="err">:</span> <span class="p">{}</span>
</pre>
<p>This will create an empty scope. This is not particularly useful because your directive will have nothing available on its scope (other than the variables that you manually add). </p>

<p>To make local variables on your local scope available to the new directive&rsquo;s scope, you&rsquo;ll have to pass one of the following three aliases in the object:</p>

<h5>Local scope property</h5>

<p>Binding a local scope (<em>string</em>) to the value of the DOM attribute, use the <code>@</code> symbol. Now the value of the outer scope will be available inside your directive&rsquo;s scope:</p>
<pre class="highlight javascript"><span class="err">@</span> <span class="p">(</span><span class="nx">or</span> <span class="err">@</span><span class="nx">attr</span><span class="p">)</span>
</pre>
<h5>Bi-directional binding</h5>

<p>A bi-directional binding can be set up between the local scope property and the parent property using the <code>=</code> symbol. If the parent model changes, just like in normal data-binding then the local property will reflect the change.</p>
<pre class="highlight javascript"><span class="o">=</span> <span class="p">(</span><span class="nx">or</span> <span class="o">=</span><span class="nx">attr</span><span class="p">)</span>
</pre>
<h5>Parent execution binding</h5>

<p>To execute a function in the context of the parent scope, we can bind a function using the <code>&amp;</code> symbol. This is to say that when setting the value, a function wrapper will be created and point to the parent function.</p>

<p>To call the parent method with an argument, you&rsquo;ll need to pass an object with the key being the name of the argument and the value being the argument to pass:</p>
<pre class="highlight javascript"><span class="o">&amp;</span> <span class="p">(</span><span class="nx">or</span> <span class="o">&amp;</span><span class="nx">attr</span><span class="p">)</span>
</pre>
<p>For example, if we&rsquo;re writing an email client and we are creating an email textbox such as:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;to&quot;</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- Invoke the directive --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">scope-example</span> <span class="na">ng-model=</span><span class="s">&quot;to&quot;</span> <span class="na">on-send=</span><span class="s">&quot;sendMail(email)&quot;</span> <span class="na">from-name=</span><span class="s">&quot;ari@fullstack.io&quot;</span> <span class="nt">/&gt;</span>
</pre>
<p>We have a model (<code>ng-model</code>), a function (<code>sendMail()</code>), and a string (<code>from-name</code>). To get access to these on your directive&rsquo;s scope:</p>
<pre class="highlight javascript"><span class="nx">scope</span><span class="err">:</span> <span class="p">{</span>
  <span class="na">ngModel</span><span class="p">:</span> <span class="s1">'='</span><span class="p">,</span>     <span class="c1">// Bind the ngModel to the object given
</span>  <span class="na">onSend</span><span class="p">:</span> <span class="s1">'&amp;'</span><span class="p">,</span>      <span class="c1">// Pass a reference to the method 
</span>  <span class="na">fromName</span><span class="p">:</span> <span class="s1">'@'</span>     <span class="c1">// Store the string associated by fromName
</span><span class="p">}</span>
</pre>
<p>In this example, we can see the ngModel update when we manipulate the object through bi-directional data-binding. We can see the <code>fromName</code> string appear in our directive and we can see the <code>onSend()</code> method being called when we click on the Send button:</p>

<h2>Try it</h2>

<div class="row" ng-controller="scopeExampleController">
  <div class="large-12 columns">
    <div class="row collapse">
      <div class="small-10 columns">
        <input type="text" ng-model="to" />
      </div>
      <div class="small-2 columns">
        <a ng-click="sendMail(to)" class="button prefix">Send</a>
      </div>
    </div>
  </div>
  <div class="large-12 columns">
    <div scope-example ng-model="to" status='status' on-send="sendMail(email)" from-name="ari@fullstack.io" />
  </div>
</div>

<p><a ng-click="showSource1=!showSource1" class="small">Show controller source</a>
<div ng-show='showSource1'></p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'scopeExampleController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="s2">&quot;Not sent&quot;</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sendMail</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">mail</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="s2">&quot;Sent&quot;</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}]);</span>
</pre>
<p></div></p>

<p>Going back to our sparkline directive, we&rsquo;ll need to pass in a city with our directive from which we want to pull the weather from openweathermap. To do this, we&rsquo;ll start out by setting it statically on the directive by passing it in as an attribute:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-sparkline</span> <span class="na">ng-model=</span><span class="s">&quot;San Francisco&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<p>Our directive now looks like this:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngModel'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngCity</span><span class="p">:</span> <span class="s1">'@'</span>
    <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;h4&gt;Weather for {{ngModel}}&lt;/h4&gt;&lt;/div&gt;'</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>If we want to be more explicit and descriptive about what model we are requiring, we can change the <code>require: &#39;^ngModel&#39;</code> above to be <code>require: &#39;^ngCity&#39;</code>. This comes in handy when you are communicating requirements on a team or you want to reuse the directive in another project. The implementation would change to the more explicit version:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-sparkline</span> <span class="na">ng-city=</span><span class="s">&quot;San Francisco&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<p>If we want to support this method of setting <code>ng-city</code> instead of <code>ngModel</code>, we&rsquo;ll have to add some supporting logic. As we said above, the <code>require</code> option will <code>inject</code> the controller of the require option. </p>

<p>For <code>ngCity</code> to work, we&rsquo;ll have to create a custom directive with a <code>controller</code> defined. This is as simple as:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngCity'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Alternatively, you can continue to use ngModel.</p>

<h2>Pulling weather data</h2>

<p>Now that we have the city, we can use openweathermap to grab the latest weather data. </p>

<p>In order to do this, we&rsquo;ll have to set up a function that will run when the directive is <code>linked</code> to the DOM. If we write this function in the <code>compile</code> method, then we&rsquo;ll modify the DOM in place.</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngCity'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngCity</span><span class="p">:</span> <span class="s1">'@'</span>
    <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;h4&gt;Weather for {{ngCity}}&lt;/h4&gt;&lt;/div&gt;'</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// get weather details
</span>    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>The link function will be run as soon as the directive is linked to the DOM. In order to call out to a separate service, however, we&rsquo;ll have to <em>inject</em> the <code>$http</code> service. Because of this, we&rsquo;ll need to define a controller to get access to the service.</p>

<h4>Controller option</h4>

<p>In a directive, when we set the controller option we are creating a controller for the directive. This controller is instantiated before the pre-linking phase. </p>

<p>The pre-linking and post-linking phases are executed by the compiler. The pre-link function is executed before the child elements are linked, while the post-link function is executed after. It is only safe to do DOM transformations after the post-link function. </p>

<p>We are defining a <code>controller</code> function in our directive, so we don&rsquo;t need to define either of these functions, but it is important to note that we cannot do DOM manipulations in our controller function.</p>

<p>What does a controller function look like? Just like any other controller. We&rsquo;ll inject the <code>$http</code> service in our controller (using the <code>bracket</code> injection notation):</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngCity'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngCity</span><span class="p">:</span> <span class="s1">'@'</span>
    <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;h4&gt;Weather for {{ngCity}}&lt;/h4&gt;&lt;/div&gt;'</span><span class="p">,</span>
    <span class="na">controller</span><span class="p">:</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTemp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="p">{}</span>
    <span class="p">}],</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">getTemp</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">ngCity</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Note that in our link function, we have access to all of the attributes that were declared in the DOM element. This will become important in a minute when we go to customize the directive.</p>

<p>Now we can create the function <code>getTemp</code> to fetch from the openweathermap. </p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;http://api.openweathermap.org/data/2.5/forecast/daily?mode=json&amp;units=imperial&amp;cnt=7&amp;callback=JSON_CALLBACK&amp;q=&quot;</span>

<span class="nx">$scope</span><span class="p">.</span><span class="nx">getTemp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$http</span><span class="p">({</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="nx">url</span> <span class="o">+</span> <span class="nx">city</span>
  <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">weather</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
      <span class="nx">weather</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nx">$scope</span><span class="p">.</span><span class="nx">weather</span> <span class="o">=</span> <span class="nx">weather</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre>
<p>Now, inside of our link function, we&rsquo;ll have a <code>promise</code> that will be fulfilled by the controller method. A promise, if you&rsquo;re not familiar, is basically an object that will return the result of an action that is run asynchronously.</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-sparkline</span> <span class="na">ng-city=</span><span class="s">&quot;San Francisco&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<h2>See it</h2>

<p><small>This will print out a bunch of JSON</small>
<div ng-sparkline4 ng-city="San Francisco"></div></p>

<p>As you can see, the directive is rendered on screen initially without data, but as soon as the <code>link</code> method is run (linking the specific element to the DOM), the <code>getTemp</code> method will run and will eventually populate the <code>weather</code> property on the scope.</p>

<p>Now, let&rsquo;s take this data and create a sparkline with it. To start, we&rsquo;ll want to pick a property on the weather to work on. </p>

<p>Let&rsquo;s start by creating a chart on the high temperatures. To start with, we&rsquo;ll need to create a <code>$watch</code> on the weather object. Because we are fetching the weather data asynchronously, we cannot simply write the method expecting the data to be populated for us when the linking function runs. No matter, AngularJS makes this incredibly easy with the built-in function <code>$watch</code>.</p>

<p>The <code>$watch</code> function will register a callback to be executed whenever the result of the expression changes. Inside the <code>$digest</code> loop, every time AngularJS detects a change, it will call this function. This has the side effect that we cannot depend on state inside this function. To counter this, we&rsquo;ll check for the value before we depend on it being in place. </p>

<p>Here is our new <code>$watch</code> function:</p>
<pre class="highlight javascript"><span class="nx">scope</span><span class="p">.</span><span class="nx">getTemp</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">ngCity</span><span class="p">);</span>
<span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'weather'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p>Every time the <em>weather</em> property on our scope changes, our function will fire. We will use <a href="http://d3js.org/">d3</a> to chart our sparkline. </p>

<p>Here&rsquo;s what we have so far:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;http://api.openweathermap.org/data/2.5/forecast/daily?mode=json&amp;units=imperial&amp;cnt=14&amp;callback=JSON_CALLBACK&amp;q=&quot;</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngCity'</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngCity</span><span class="p">:</span> <span class="s1">'@'</span>
    <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;h4&gt;Weather for {{ngCity}}&lt;/h4&gt;&lt;div class=&quot;graph&quot;&gt;&lt;/div&gt;&lt;/div&gt;'</span><span class="p">,</span>
    <span class="na">controller</span><span class="p">:</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTemp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$http</span><span class="p">({</span>
          <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
          <span class="na">url</span><span class="p">:</span> <span class="nx">url</span> <span class="o">+</span> <span class="nx">city</span>
        <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">weather</span> <span class="o">=</span> <span class="p">[];</span>
          <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
            <span class="nx">weather</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
          <span class="p">});</span>
          <span class="nx">$scope</span><span class="p">.</span><span class="nx">weather</span> <span class="o">=</span> <span class="nx">weather</span><span class="p">;</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">}],</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">getTemp</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">ngCity</span><span class="p">);</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'weather'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// the `$watch` function will fire even if the
</span>        <span class="c1">// weather property is undefined, so we'll
</span>        <span class="c1">// check for it
</span>        <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">highs</span> <span class="o">=</span> <span class="p">[],</span>
              <span class="nx">width</span>   <span class="o">=</span> <span class="mi">200</span><span class="p">,</span>
              <span class="nx">height</span>  <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>

          <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">weather</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
            <span class="nx">highs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">temp</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span>
          <span class="p">});</span>
          <span class="c1">// chart
</span>        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<h2>See it</h2>

<div ng-sparkline5 ng-city="San Francisco"></div>

<p><a ng-click="showSource2 = !showSource2" class="small">Show d3 source</a>
<div ng-show="showSource2"></p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">highs</span> <span class="o">=</span> <span class="p">[];</span>

<span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">weather</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
  <span class="nx">highs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">temp</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span>
<span class="p">});</span>
<span class="kd">var</span> <span class="nx">chartGraph</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">width</span> <span class="o">||</span> <span class="mi">200</span><span class="p">,</span>
      <span class="nx">height</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">height</span> <span class="o">||</span> <span class="mi">80</span><span class="p">,</span>
      <span class="nx">padding</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">padding</span> <span class="o">||</span> <span class="mi">30</span><span class="p">;</span>

  <span class="c1">// chart
</span>  <span class="kd">var</span> <span class="nx">svg</span>     <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'svg:svg'</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'height'</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'sparkline'</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'g'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'transform'</span><span class="p">,</span> <span class="s1">'translate('</span><span class="o">+</span><span class="nx">padding</span><span class="o">+</span><span class="s1">', '</span><span class="o">+</span><span class="nx">padding</span><span class="o">+</span><span class="s1">')'</span><span class="p">);</span>

  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">'*'</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>

  <span class="kd">var</span> <span class="nx">maxY</span>    <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span>
      <span class="nx">x</span>       <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
                  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">])</span>
                  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">width</span><span class="p">]),</span>
      <span class="nx">y</span>       <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
                  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">maxY</span><span class="p">])</span>
                  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">]),</span>
      <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">().</span><span class="nx">scale</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s1">'left'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>

  <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'g'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'axis'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">line</span>    <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">line</span><span class="p">()</span>
                  <span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="s1">'linear'</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="p">(</span><span class="nx">i</span><span class="p">);})</span>
                  <span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">y</span><span class="p">(</span><span class="nx">d</span><span class="p">);}),</span>
      <span class="nx">path</span>    <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'svg:path'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">data</span><span class="p">([</span><span class="nx">data</span><span class="p">])</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'d'</span><span class="p">,</span> <span class="nx">line</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'fill'</span><span class="p">,</span> <span class="s1">'none'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'stroke-width'</span><span class="p">,</span> <span class="s1">'1'</span><span class="p">);</span>
<span class="p">}</span>
</pre>
<p></div>
</div></p>

<p>Now that we have our chart being drawn, let&rsquo;s look at ways that we can customize the directive when we invoke it.</p>

<p>Inside of our watch function, we&rsquo;re currently setting a static height and width. We can do better than that by allowing the invocation to determine the width and the height. Because we have access to the iAttrs (the instance of the attributes on the instance of the DOM element), we can simply look there first; otherwise we can set a default.</p>

<p>Change the width and the height to look like this:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">width</span>   <span class="o">=</span> <span class="nx">iAttrs</span><span class="p">.</span><span class="nx">width</span> <span class="o">||</span> <span class="mi">200</span><span class="p">,</span>
    <span class="nx">height</span>  <span class="o">=</span> <span class="nx">iAttrs</span><span class="p">.</span><span class="nx">height</span> <span class="o">||</span> <span class="mi">80</span><span class="p">;</span>
</pre>
<p>When we invoke the directive, this time we can add a width to set the width:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-sparkline</span> <span class="na">width=</span><span class="s">'400'</span><span class="nt">&gt;&lt;/div&gt;</span>
</pre>
<p>Now our sparkline changes width to be 400 pixels, instead of the default 200.</p>

<h2>See it</h2>

<div ng-sparkline5 ng-city="San Francisco" width='400'></div>

<p>Inside of our directive as it stands today, we have a label that tells us &ldquo;Weather for {{ ngCity }}.&rdquo; Although this is convenient for demo purposes, we might not always want that label to be static inside the directive. We can set it to include any html that we put inside of the DOM element that contains our directive. </p>

<h4>Transclude option</h4>

<p>Although the name sounds complex, transclusion refers to compiling the content of the element and making the source available to the directive. The transcluded function is pre-bound to the calling scope, so it has access to the current calling scope.</p>

<p>Looking at an example, let&rsquo;s change the invocation to:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">ng-sparkline</span> <span class="na">ng-city=</span><span class="s">&quot;San Francisco&quot;</span> <span class="na">width=</span><span class="s">'400'</span><span class="nt">&gt;</span>
<span class="nt">&lt;h3&gt;</span>A custom view of the weather in San Francisco<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<p>To get this to show up in our template, we&rsquo;ll need to use a special directive called <code>ngTransclude</code>. This is how the template knows where to place the custom HTML. Let&rsquo;s modify the template in our directive to include the custom content:</p>
<pre class="highlight javascript"><span class="nx">template</span><span class="err">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;div class=&quot;graph&quot;&gt;&lt;/div&gt;&lt;/div&gt;'</span>
</pre>
<p>Additionally, we&rsquo;ll have to tell AngularJS that our directive will be using transclusion. To do that, we&rsquo;ll have to set the transclude option either to:</p>

<ul>
<li>true, which will take the content of the directive and place it in the template</li>
<li>&lsquo;element&rsquo;, which will take the entire defined element including the lower priority directives.</li>
</ul>

<p>Set the transclude option to true, as we only want the content of our directive to show up in our template:</p>
<pre class="highlight javascript"><span class="nx">transclude</span><span class="err">:</span> <span class="kc">true</span>
</pre>
<h2>See it</h2>

<div ng-sparkline6 ng-city="San Francisco" width='400'>
  <h3>A custom view of the weather in San Francisco</h3>
</div>

<h4>Replace option</h4>

<p>Sometimes it is better to replace the entire DOM object, rather than append the new template to it. AngularJS makes this easy to accomplish by simply adding <code>replace</code> option in the <code>directive description object</code>. Set the replace option to true, like so:</p>
<pre class="highlight javascript"><span class="nx">replace</span><span class="err">:</span> <span class="kc">true</span>
</pre>
<h4>Priority option</h4>

<p>Directives on elements are compiled in a sorted order based on priority. Sometimes it matters what ordered directives are applied. By setting a higher priority, you can <em>almost</em> guarantee the order in which the directives are applied. To set a higher priority of one directive over another, simply add the priority option and set it to a numerical value higher than 0 (the default):</p>
<pre class="highlight javascript"><span class="nx">priority</span><span class="err">:</span> <span class="mi">10</span>
</pre>
<h4>Terminal option</h4>

<p>Sometimes it&rsquo;s useful to stop the execution of the compiler for including other directives. This is most useful when used in conjunction with setting the priority. <code>terminal</code> will stop the execution of any directives at a lower priority than this one.</p>
<pre class="highlight javascript"><span class="nx">terminal</span><span class="err">:</span> <span class="kc">true</span>
</pre>
<h4>Next steps</h4>

<p>We&rsquo;ve covered how to build a directive from the very low-level to the top. Hopefully you&rsquo;ve gained some confidence and knowledge about how to move forward in the future and provide and build your own custom directives.</p>

<p><a ng-click="showSourceFinal = !showSourceFinal" class="small">Show full source</a>
<div ng-show="showSourceFinal"></p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngSparkline'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&quot;http://api.openweathermap.org/data/2.5/forecast/daily?mode=json&amp;units=imperial&amp;cnt=14&amp;callback=JSON_CALLBACK&amp;q=&quot;</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'^ngCity'</span><span class="p">,</span>
    <span class="na">transclude</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">scope</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">ngCity</span><span class="p">:</span> <span class="s1">'@'</span>
    <span class="p">},</span>
    <span class="na">template</span><span class="p">:</span> <span class="s1">'&lt;div class=&quot;sparkline&quot;&gt;&lt;div ng-transclude&gt;&lt;/div&gt;&lt;div class=&quot;graph&quot;&gt;&lt;/div&gt;&lt;/div&gt;'</span><span class="p">,</span>
    <span class="na">controller</span><span class="p">:</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">getTemp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">$http</span><span class="p">({</span>
          <span class="na">method</span><span class="p">:</span> <span class="s1">'JSONP'</span><span class="p">,</span>
          <span class="na">url</span><span class="p">:</span> <span class="nx">url</span> <span class="o">+</span> <span class="nx">city</span>
        <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">weather</span> <span class="o">=</span> <span class="p">[];</span>
          <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
            <span class="nx">weather</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
          <span class="p">});</span>
          <span class="nx">$scope</span><span class="p">.</span><span class="nx">weather</span> <span class="o">=</span> <span class="nx">weather</span><span class="p">;</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">}],</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">getTemp</span><span class="p">(</span><span class="nx">iAttrs</span><span class="p">.</span><span class="nx">ngCity</span><span class="p">);</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">'weather'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// the `$watch` function will fire even if the
</span>        <span class="c1">// weather property is undefined, so we'll
</span>        <span class="c1">// check for it
</span>        <span class="k">if</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">highs</span> <span class="o">=</span> <span class="p">[];</span>

          <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">weather</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
            <span class="nx">highs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">temp</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span>
          <span class="p">});</span>

          <span class="nx">chartGraph</span><span class="p">(</span><span class="nx">iElement</span><span class="p">,</span> <span class="nx">highs</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">chartGraph</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">opts</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">width</span> <span class="o">||</span> <span class="mi">200</span><span class="p">,</span>
      <span class="nx">height</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">height</span> <span class="o">||</span> <span class="mi">80</span><span class="p">,</span>
      <span class="nx">padding</span> <span class="o">=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">padding</span> <span class="o">||</span> <span class="mi">30</span><span class="p">;</span>

  <span class="c1">// chart
</span>  <span class="kd">var</span> <span class="nx">svg</span>     <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">element</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'svg:svg'</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'width'</span><span class="p">,</span> <span class="nx">width</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'height'</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'sparkline'</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'g'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'transform'</span><span class="p">,</span> <span class="s1">'translate('</span><span class="o">+</span><span class="nx">padding</span><span class="o">+</span><span class="s1">', '</span><span class="o">+</span><span class="nx">padding</span><span class="o">+</span><span class="s1">')'</span><span class="p">);</span>

  <span class="nx">svg</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s1">'*'</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>

  <span class="kd">var</span> <span class="nx">maxY</span>    <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span>
      <span class="nx">x</span>       <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
                  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">])</span>
                  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">width</span><span class="p">]),</span>
      <span class="nx">y</span>       <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">linear</span><span class="p">()</span>
                  <span class="p">.</span><span class="nx">domain</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="nx">maxY</span><span class="p">])</span>
                  <span class="p">.</span><span class="nx">range</span><span class="p">([</span><span class="nx">height</span><span class="p">,</span> <span class="mi">0</span><span class="p">]),</span>
      <span class="nx">yAxis</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">axis</span><span class="p">().</span><span class="nx">scale</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">orient</span><span class="p">(</span><span class="s1">'left'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">ticks</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>

  <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'g'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'class'</span><span class="p">,</span> <span class="s1">'axis'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">yAxis</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">line</span>    <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">svg</span><span class="p">.</span><span class="nx">line</span><span class="p">()</span>
                  <span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="s1">'linear'</span><span class="p">)</span>
                  <span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="p">(</span><span class="nx">i</span><span class="p">);})</span>
                  <span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">y</span><span class="p">(</span><span class="nx">d</span><span class="p">);}),</span>
      <span class="nx">path</span>    <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">'svg:path'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">data</span><span class="p">([</span><span class="nx">data</span><span class="p">])</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'d'</span><span class="p">,</span> <span class="nx">line</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'fill'</span><span class="p">,</span> <span class="s1">'none'</span><span class="p">)</span>
                    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">'stroke-width'</span><span class="p">,</span> <span class="s1">'1'</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngCity'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">controller</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">});</span>
</pre>
<p></div></p>

<p>Feel free to sign up for the newsletter for updates when new posts come out as well as for new content on AngularJS weekly.</p>

<script type="text/javascript">
var app = angular.module("directiveTutorialExampleApp", []);
app.directive('ngSparkline1', function() {
  return {
    restrict: 'A',
    template: '<div class="sparkline"></div>'
  }
});
app.directive('ngSparkline2', function() {
  return {
    restrict: 'A',
    require: '^ngModel',
    scope: {
      ngModel: '='
    },
    template: '<div class="sparkline"><h4>Weather for {{ngModel}}</h4></div>'
  }
});

app.directive('ngCity', function() {
  return {
    controller: function($scope) {}
  }
});

app.directive('ngSparkline3', function() {
  return {
    restrict: 'A',
    require: '^ngCity',
    scope: {
      ngCity: '@'
    },
    template: '<div class="sparkline"><h4>Weather for {{ngCity}}</h4></div>'
  }
});
app.directive('ngSparkline4', function() {
  var url = "http://api.openweathermap.org/data/2.5/forecast/daily?mode=json&units=imperial&cnt=3&callback=JSON_CALLBACK&q=";
  return {
    restrict: 'A',
    require: '^ngCity',
    scope: {
      ngCity: '@'
    },
    template: '<div class="sparkline"><h4>Weather for {{ngCity}}</h4>Weather: <pre>{{ weather }}</pre></div>',
    controller: ['$scope', '$http', function($scope, $http) {
      $scope.getTemp = function(city) {
        $http({
          method: 'JSONP',
          url: url + city
        }).success(function(data) {
          var weather = [];
          angular.forEach(data.list, function(value){
            weather.push(value);
          });
          $scope.weather = weather;
        });
      }
    }],
    link: function(scope, iElement, iAttrs, ctrl) {
      scope.getTemp(iAttrs.ngCity);
    }
  }
});

var chartGraph = function(element, data, opts) {
  var width = opts.width || 200,
      height = opts.height || 80,
      padding = opts.padding || 30;

  // chart
  var svg     = d3.select(element[0])
                  .append('svg:svg')
                  .attr('width', width)
                  .attr('height', height)
                  .attr('class', 'sparkline')
                  .append('g')
                    .attr('transform', 'translate('+padding+', '+padding+')');

  svg.selectAll('*').remove();

  var maxY    = d3.max(data),
      x       = d3.scale.linear()
                  .domain([0, data.length])
                  .range([0, width]),
      y       = d3.scale.linear()
                  .domain([0, maxY])
                  .range([height, 0]),
      yAxis = d3.svg.axis().scale(y)
                    .orient('left')
                    .ticks(5);

  svg.append('g')
      .attr('class', 'axis')
      .call(yAxis);

  var line    = d3.svg.line()
                  .interpolate('linear')
                  .x(function(d,i){return x(i);})
                  .y(function(d,i){return y(d);}),
      path    = svg.append('svg:path')
                    .data([data])
                    .attr('d', line)
                    .attr('fill', 'none')
                    .attr('stroke-width', '1');
}

app.directive('ngSparkline5', function() {
  var url = "http://api.openweathermap.org/data/2.5/forecast/daily?mode=json&units=imperial&cnt=14&callback=JSON_CALLBACK&q=";
  return {
    restrict: 'A',
    require: '^ngCity',
    scope: {
      ngCity: '@'
    },
    template: '<div class="sparkline"><h4>Weather for {{ngCity}}</h4><div class="graph"></div></div>',
    controller: ['$scope', '$http', function($scope, $http) {
      $scope.getTemp = function(city) {
        $http({
          method: 'JSONP',
          url: url + city
        }).success(function(data) {
          var weather = [];
          angular.forEach(data.list, function(value){
            weather.push(value);
          });
          $scope.weather = weather;
        });
      }
    }],
    link: function(scope, iElement, iAttrs, ctrl) {
      scope.getTemp(iAttrs.ngCity);
      scope.$watch('weather', function(newVal) {
        // the `$watch` function will fire even if the
        // weather property is undefined, so we'll
        // check for it
        if (newVal) {
          var highs = [];

          angular.forEach(scope.weather, function(value){
            highs.push(value.temp.max);
          });

          chartGraph(iElement, highs, iAttrs);
        }
      });
    }
  }
});

app.directive('ngSparkline6', function() {
  var url = "http://api.openweathermap.org/data/2.5/forecast/daily?mode=json&units=imperial&cnt=14&callback=JSON_CALLBACK&q=";
  return {
    restrict: 'A',
    require: '^ngCity',
    transclude: true,
    scope: {
      ngCity: '@'
    },
    template: '<div class="sparkline"><div ng-transclude></div><div class="graph"></div></div>',
    controller: ['$scope', '$http', function($scope, $http) {
      $scope.getTemp = function(city) {
        $http({
          method: 'JSONP',
          url: url + city
        }).success(function(data) {
          var weather = [];
          angular.forEach(data.list, function(value){
            weather.push(value);
          });
          $scope.weather = weather;
        });
      }
    }],
    link: function(scope, iElement, iAttrs, ctrl) {
      scope.getTemp(iAttrs.ngCity);
      scope.$watch('weather', function(newVal) {
        // the `$watch` function will fire even if the
        // weather property is undefined, so we'll
        // check for it
        if (newVal) {
          var highs = [];

          angular.forEach(scope.weather, function(value){
            highs.push(value.temp.max);
          });

          chartGraph(iElement, highs, iAttrs);
        }
      });
    }
  }
});

// Scope example
app.controller('scopeExampleController', ['$scope', function($scope) {
  $scope.status = "Not sent";
  $scope.sendMail = function(mail) {
    $scope.status = "Sent";
  };
}]);
app.directive('scopeExample', function() {
  return {
    restrict: 'A',
    require: '^ngModel',
    scope: {
      ngModel: '=',
      sentMail: '=',
      sendMail: '&',
      fromName: '@',
      status: '='
    },
    template: '<div class="sparkline">' +
        '<ul>' +
        '<li><b>ngModel</b>: {{ngModel}}</li>' +
        '<li><b>onSend (status)</b>: {{status}}</li>' +
        '<li><b>fromName</b>: {{fromName}}</li>' +
        '</ul></div>'
  }
});
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html">Form validation with AngularJS</title>
    <link href="http://www.ng-newsletter.com/posts/validations.html"/>
    <link rel="alternate" type="text/html" href="http://www.ng-newsletter.com/posts/validations.html"/>
    <updated>2013-07-06T00:00:00-07:00</updated>
    <id>urn:uuid:88813d48-5ccd-59b6-80f9-b39b5d37789b</id>
    <summary>Client-side form validations are one of the coolest features inside of AngularJS. AngularJS form validation enables you to write a modern HTML5 form that is interactive and responsive from the start.

There are many form validation directives available...</summary>
    <content type="html"><![CDATA[<p>Client-side form validations are one of the coolest features inside of AngularJS. AngularJS form validation enables you to write a modern HTML5 form that is interactive and responsive from the start.</p>

<p>There are many form validation directives available in AngularJS. We&rsquo;ll talk about a few of the most popular ones here and then we&rsquo;ll get into how to build your own validations.</p>
<pre class="highlight html"><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span><span class="nt">&gt;</span>Your email<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;email&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Email Address&quot;</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<p>AngularJS makes it pretty easy for us to handle client-side form validations without adding a lot of extra effort. Although we can&rsquo;t depend on client-side validations keeping our web application secure, they provide instant feedback of the state of the form. </p>

<p>To use form validations, we first must ensure that the form has a <code>name</code> associated with it, like in the above example. Got it? Great!</p>

<p>All input fields can validate against some basic validations, like minimum length, maximum length, etc. These are all available on the new HTML5 attributes of a form. </p>

<p>It is usually a great idea to use the <code>novalidate</code> flag on the form element. This will prevent the browser from submitting the form. </p>

<p>Let&rsquo;s look at all the validation options we have that we can place on an <code>input</code> field:</p>

<h3>Required</h3>

<p>To validate that a form input has been filled out, simply add the html5 tag: <code>required</code> to the input field:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">required</span> <span class="nt">/&gt;</span>
</pre>
<h3>Minimum length</h3>

<p>To validate that a form input input is at least a {number} of characters, add the AngularJS directive <code>ng-minlength=&quot;{number}&quot;</code> to the input field:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-minlength=</span><span class="s">5</span> <span class="nt">/&gt;</span>
</pre>
<h3>Maximum length</h3>

<p>To validate that a form input is equal to or less than a number of characters, add the AngularJS directive <code>ng-maxlength=&quot;{number}&quot;</code>:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-maxlength=</span><span class="s">20</span> <span class="nt">/&gt;</span>
</pre>
<h3>Matches a pattern</h3>

<p>To ensure that an input matches a regex pattern, use the AngularJS directive: <code>ng-pattern=&quot;/PATTERN/&quot;</code>:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-pattern=</span><span class="s">&quot;/a-zA-Z/&quot;</span> <span class="nt">/&gt;</span>
</pre>
<h3>Email</h3>

<p>To validate an email address in an input field, simply set the <code>input</code> type to <code>email</code>, like so:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.email&quot;</span> <span class="nt">/&gt;</span>
</pre>
<h3>Number</h3>

<p>To validate an input field has a number, set the <code>input</code> type to <code>number</code>:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;number&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.age&quot;</span> <span class="nt">/&gt;</span>
</pre>
<h3>Url</h3>

<p>To validate that an input represents a url, set the <code>input</code> type to <code>url</code>:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;url&quot;</span> <span class="na">name=</span><span class="s">&quot;homepage&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.facebook_url&quot;</span> <span class="nt">/&gt;</span>
</pre>
<h3>Custom validations</h3>

<p>AngularJS makes it very easy to add your own validations as well by using directives. For instance, let&rsquo;s say that we want to validate that our username is available in the database. To do this, we&rsquo;ll implement a directive that fires an ajax request whenever the form changes:</p>
<pre class="highlight javascript"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">'validationExample'</span><span class="p">,</span> <span class="p">[]);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ensureUnique'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'ngModel'</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">ngModel</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">$http</span><span class="p">({</span>
          <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
          <span class="na">url</span><span class="p">:</span> <span class="s1">'/api/check/'</span> <span class="o">+</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">ensureUnique</span><span class="p">,</span>
          <span class="na">data</span><span class="p">:</span> <span class="p">{</span><span class="s1">'field'</span><span class="err">:</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">ensureUnique</span><span class="p">}</span>
        <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">c</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">'unique'</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">isUnique</span><span class="p">);</span>
        <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">c</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">'unique'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<h3>Control variables in forms</h3>

<p>AngularJS makes properties available on the containing <code>$scope</code> object available to us as a result of setting a form inside the DOM. These enable us to react to the form in <em>realtime</em> (just like everything else in AngularJS). The properties that are available to us are:</p>

<p>Note that these properties are made available to us in the format:</p>
<pre class="highlight javascript"><span class="nx">formName</span><span class="p">.</span><span class="nx">inputFieldName</span><span class="p">.</span><span class="nx">property</span>
</pre>
<h4>Unmodified form</h4>

<p>A boolean property that tells us if the user has modified the form. This is <code>true</code> if the user hasn&rsquo;t touched the form, and <code>false</code> if they have:</p>
<pre class="highlight javascript"><span class="nx">formName</span><span class="p">.</span><span class="nx">inputFieldName</span><span class="p">.</span><span class="nx">$pristine</span><span class="p">;</span>
</pre>
<h4>Modified form</h4>

<p>A boolean property if and only if the user has actually modified the form. This is set regardless of validations on the form:</p>
<pre class="highlight javascript"><span class="nx">formName</span><span class="p">.</span><span class="nx">inputFieldName</span><span class="p">.</span><span class="nx">$dirty</span>
</pre>
<h4>Valid form</h4>

<p>A boolean property that tells us that the form is valid or not. If the form is currently <em>valid</em>, then this will be true:</p>
<pre class="highlight javascript"><span class="nx">formName</span><span class="p">.</span><span class="nx">inputFieldName</span><span class="p">.</span><span class="nx">$valid</span>
</pre>
<h4>Invalid form</h4>

<p>A boolean property that tells us that the form is invalid. If the form is currently <em>invalid</em>, then this will be true:</p>
<pre class="highlight javascript"><span class="nx">formName</span><span class="p">.</span><span class="nx">inputFieldName</span><span class="p">.</span><span class="nx">$invalid</span>
</pre>
<p>The last two properties are particularly useful for showing or hiding DOM elements. They are also very useful when setting a class on a particular form. </p>

<h4>Errors</h4>

<p>Another useful property that AngularJS makes available to us is the <code>$error</code> object. This object contains all of the validations on a particular form and if they are valid or invalid. To get access to this property, use the following syntax:</p>
<pre class="highlight javascript"><span class="nx">formName</span><span class="p">.</span><span class="nx">inputfieldName</span><span class="p">.</span><span class="nx">$error</span>
</pre>
<p>If a validation <em>fails</em> then this property will be true, while if it is false, then the value has passed the input field.</p>

<h3>A little style never hurts</h3>

<p>When AngularJS is handling a form, it adds specific classes to the form based upon their state. These classes are named similar to the properties that we can check as well. </p>

<p>These classes are:</p>
<pre class="highlight css"><span class="nc">.ng-pristine</span> <span class="p">{}</span>
<span class="nc">.ng-dirty</span> <span class="p">{}</span>
<span class="nc">.ng-valid</span> <span class="p">{}</span>
<span class="nc">.ng-invalid</span> <span class="p">{}</span>
</pre>
<p>The correspond to their counterpart on the particular input field.</p>

<p>When a field is invalid, the <code>.ng-invalid</code> class will be applied to the field. This particular site sets the css class as:</p>
<pre class="highlight css"><span class="nt">input</span><span class="nc">.ng-invalid</span> <span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">input</span><span class="nc">.ng-valid</span> <span class="p">{</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="no">green</span><span class="p">;</span>
<span class="p">}</span>
</pre>
<h3>Putting it all together</h3>

<p>Let&rsquo;s build a signup form. This signup form will include the person&rsquo;s name, their email, and a desired username. </p>

<p>Let&rsquo;s start by looking at what the form will look like when it&rsquo;s done. Go ahead, play with it, start typing in the input fields, see how the form responds and reacts. Notice that the submit button becomes disabled when the form goes invalid:</p>

<form ng-controller="signupForm1Controller" name="signup_form1" novalidate ng-submit="signupForm()">
  <fieldset>
    <legend>Signup form</legend>

    <div class="row">
      <div class="large-12 columns">
        <label ng-class="{error: dirtyAndInvalid(signup_form1.name)}">Your name</label>
        <input ng-class="{error: dirtyAndInvalid(signup_form1.name)}" type="text" placeholder="Name" name="name" ng-model="signup.name" ng-minlength=3 ng-maxlength=20 required />
        <div class="error" ng-show="signup_form1.name.$dirty && signup_form1.name.$invalid">
          <small class="error" ng-show="signup_form1.name.$error.required">Your name is required.</small>
          <small class="error" ng-show="signup_form1.name.$error.minlength">Your name is required to be at least 3 characters</small>
          <small class="error" ng-show="signup_form1.name.$error.maxlength">Your name cannot be longer than 20 characters</small>
        </div>
      </div>
    </div>

    <div class="row">          
      <div class="large-4 columns">
        <label ng-class="{error: dirtyAndInvalid(signup_form1.email)}">Your email</label>
        <input ng-class="{error: dirtyAndInvalid(signup_form1.email)}" type="email" placeholder="Email" name="email" ng-model="signup.email" ng-minlength=3 ng-maxlength=20 required />
        <div class="error" ng-show="signup_form1.email.$dirty && signup_form1.email.$invalid">
          <small class="error" ng-show="signup_form1.email.$error.required">Your email is required.</small>
          <small class="error" ng-show="signup_form1.email.$error.minlength">Your email is required to be at least 3 characters</small>
          <small class="error" ng-show="signup_form1.email.$error.email">That is not a valid email. Please input a valid email.</small>
          <small class="error" ng-show="signup_form1.email.$error.maxlength">Your email cannot be longer than 20 characters</small>
        </div>
      </div>


      <div class="large-4 columns">
        <label ng-class="{error: dirtyAndInvalid(signup_form1.username)}">Username</label>
          <input ng-class="{error: dirtyAndInvalid(signup_form1.username)}" type="text" placeholder="Desired username" name="username" ng-model="signup.username" ng-minlength=3 ng-maxlength=20 ensure-unique="username" ng-required />
        <div class="error" ng-show="signup_form1.username.$dirty && signup_form1.username.$invalid">
          <small class="error" ng-show="signup_form1.username.$error.required">Please input a username</small>
          <small class="error" ng-show="signup_form1.username.$error.minlength">Your username is required to be at least 3 characters</small>
          <small class="error" ng-show="signup_form1.username.$error.maxlength">Your username cannot be longer than 20 characters</small>
          <small class="error" ng-show="signup_form1.username.$error.unique">That username is taken, please try another</small>
        </div>
      </div>

      <div class="large-2 columns">
        <button type="submit" ng-disabled="signup_form1.$invalid" class="button radius" style="margin-top: 20px">Submit</button>
      </div>

  </fieldset>
</form>

<p>Let&rsquo;s start with defining the form:</p>
<pre class="highlight html"><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;signup_form&quot;</span> <span class="na">novalidate</span> <span class="na">ng-submit=</span><span class="s">&quot;signupForm()&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;legend&gt;</span>Signup<span class="nt">&lt;/legend&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;button radius&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/fieldset&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<p>This form&rsquo;s name is <code>signup_form</code> and we are going to call <code>signupForm()</code> when the form is submitted.</p>

<p>Now, let&rsquo;s add the name of the user:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-12 columns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label&gt;</span>Your name<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
        <span class="na">placeholder=</span><span class="s">&quot;Name&quot;</span> 
        <span class="na">name=</span><span class="s">&quot;name&quot;</span> 
        <span class="na">ng-model=</span><span class="s">&quot;signup.name&quot;</span> 
        <span class="na">ng-minlength=</span><span class="s">3</span> 
        <span class="na">ng-maxlength=</span><span class="s">20</span> <span class="na">required</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h2>Try it</h2>

<form name="signup_form2">
  <div class="row">
    <div class="large-12 columns">
      <label>Your name</label>
      <input type="text" 
          placeholder="Name" 
          name="name" 
          ng-model="signup.yourname" 
          ng-minlength=3 
          ng-maxlength=20 required />
    </div>
  </div>
</form>

<p>Breaking this down. First thing to note is that I use <a href="http://foundation.zurb.com">Foundation</a> for my css layouts, so you&rsquo;ll see that syntax in my forms. We added a form that has an input called <code>name</code> that is bound (by <code>ng-model</code>) to the object <code>signup.name</code> on the <code>$scope</code> object. </p>

<p>We also setup a few validations. These validations say we have to have a <code>minlength</code> of our name of 3 or more characters. We also impose a maximum limit of characters of 20 characters (this will be invalid at 21 characters and higher). Lastly, we <code>require</code> that the name be filled out for the form to be valid.</p>

<p>Let&rsquo;s use the properties to show and/or hide a list of errors if the form is invalid. We&rsquo;ll also use the <code>$dirty</code> attribute to make sure the errors don&rsquo;t show up if the user hasn&rsquo;t touched the field:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-12 columns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label&gt;</span>Your name<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
        <span class="na">placeholder=</span><span class="s">&quot;Name&quot;</span> 
        <span class="na">name=</span><span class="s">&quot;name&quot;</span> 
        <span class="na">ng-model=</span><span class="s">&quot;signup.name&quot;</span> 
        <span class="na">ng-minlength=</span><span class="s">3</span> 
        <span class="na">ng-maxlength=</span><span class="s">20</span> <span class="na">required</span> <span class="nt">/&gt;</span>
   <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
        <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
        <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$error.required&quot;</span><span class="nt">&gt;</span>
        Your name is required.
    <span class="nt">&lt;/small&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
            <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$error.minlength&quot;</span><span class="nt">&gt;</span>
            Your name is required to be at least 3 characters
    <span class="nt">&lt;/small&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
            <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$error.maxlength&quot;</span><span class="nt">&gt;</span>
            Your name cannot be longer than 20 characters
    <span class="nt">&lt;/small&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h2>Try it</h2>

<form name="signup_form2">
  <div class="row">
    <div class="large-12 columns">
      <label>Your name</label>
      <input type="text" 
          placeholder="Name" 
          name="name" 
          ng-model="signup.name" 
          ng-minlength=3 
          ng-maxlength=20 required />
      <div class="error" 
           ng-show="signup_form2.name.$dirty && signup_form2.name.$invalid">
        <small class="error" 
               ng-show="signup_form2.name.$error.required">
            Your name is required.
        </small>
        <small class="error" 
               ng-show="signup_form2.name.$error.minlength">
                Your name is required to be at least 3 characters
        </small>
        <small class="error" 
               ng-show="signup_form2.name.$error.maxlength">
                Your name cannot be longer than 20 characters
        </small>
      </div>
    </div>
  </div>
</form>

<p>Breaking this down, we&rsquo;re only going to show our errors if the form is invalid and changed, just as before. This time, we&rsquo;ll look through each of the valiations and only show a particular DOM element if the particular validation property is invalid.</p>

<p>Let&rsquo;s look at the next set of validations, the email validation:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>          
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-12 columns&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label&gt;</span>Your email<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> 
      <span class="na">placeholder=</span><span class="s">&quot;Email&quot;</span> 
      <span class="na">name=</span><span class="s">&quot;email&quot;</span> 
      <span class="na">ng-model=</span><span class="s">&quot;signup.email&quot;</span> 
      <span class="na">ng-minlength=</span><span class="s">3</span> <span class="na">ng-maxlength=</span><span class="s">20</span> <span class="na">required</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
         <span class="na">ng-show=</span><span class="s">&quot;signup_form.email.$dirty &amp;&amp; signup_form.email.$invalid&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
             <span class="na">ng-show=</span><span class="s">&quot;signup_form.email.$error.required&quot;</span><span class="nt">&gt;</span>
             Your email is required.
      <span class="nt">&lt;/small&gt;</span>
      <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
             <span class="na">ng-show=</span><span class="s">&quot;signup_form.email.$error.minlength&quot;</span><span class="nt">&gt;</span>
              Your email is required to be at least 3 characters
      <span class="nt">&lt;/small&gt;</span>
      <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
             <span class="na">ng-show=</span><span class="s">&quot;signup_form.email.$error.email&quot;</span><span class="nt">&gt;</span>
             That is not a valid email. Please input a valid email.
      <span class="nt">&lt;/small&gt;</span>
      <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
             <span class="na">ng-show=</span><span class="s">&quot;signup_form.email.$error.maxlength&quot;</span><span class="nt">&gt;</span>
              Your email cannot be longer than 20 characters
      <span class="nt">&lt;/small&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h2>Try it</h2>

<form name="signup_form3">
<div class="row">          
  <div class="large-12 columns">
    <label>Your email</label>
    <input type="email" placeholder="Email" name="email" ng-model="signup.youremail" ng-minlength=3 ng-maxlength=20 required />
    <div class="error" ng-show="signup_form3.email.$dirty && signup_form3.email.$invalid">
      <small class="error" ng-show="signup_form3.email.$error.required">Your email is required.</small>
      <small class="error" ng-show="signup_form3.email.$error.minlength">Your email is required to be at least 3 characters</small>
      <small class="error" ng-show="signup_form3.email.$error.email">That is not a valid email. Please input a valid email.</small>
      <small class="error" ng-show="signup_form3.email.$error.maxlength">Your email cannot be longer than 20 characters</small>
    </div>
  </div>
</form>

<p>This time (with the entire form included), we&rsquo;re looking at the email field. Note that we set the <code>type</code> of the input field to <em>email</em> and added a validation error on <code>$error.email</code>. This is based off the AngularJS email validation (and the HTML5 attribute). </p>

<p>Finally, let&rsquo;s look at our last input field, the username:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-12 columns&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span>  <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
            <span class="na">placeholder=</span><span class="s">&quot;Desired username&quot;</span> 
            <span class="na">name=</span><span class="s">&quot;username&quot;</span> 
            <span class="na">ng-model=</span><span class="s">&quot;signup.username&quot;</span> 
            <span class="na">ng-minlength=</span><span class="s">3</span> 
            <span class="na">ng-maxlength=</span><span class="s">20</span> 
            <span class="na">ensure-unique=</span><span class="s">&quot;username&quot;</span> <span class="na">required</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signup_form.username.$dirty &amp;&amp; signup_form.username.$invalid&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signup_form.username.$error.required&quot;</span><span class="nt">&gt;</span>Please input a username<span class="nt">&lt;/small&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signup_form.username.$error.minlength&quot;</span><span class="nt">&gt;</span>Your username is required to be at least 3 characters<span class="nt">&lt;/small&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signup_form.username.$error.maxlength&quot;</span><span class="nt">&gt;</span>Your username cannot be longer than 20 characters<span class="nt">&lt;/small&gt;</span>
    <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signup_form.username.$error.unique&quot;</span><span class="nt">&gt;</span>That username is taken, please try another<span class="nt">&lt;/small&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre>
<h2>Try it</h2>

<form name="signup_form4">
<div class="large-12 columns">
  <label ng-class="{error: signup_form4.username.$dirty && signup_form4.username.$invalid}">Username</label>
    <input ng-class="{error: signup_form4.username.$dirty && signup_form4.username.$invalid}" type="text" placeholder="Desired username" name="username" ng-model="signup.yourusername" ng-minlength=3 ng-maxlength=20 ensure-unique="username" required />
  <div class="error" ng-show="signup_form4.username.$dirty && signup_form4.username.$invalid">
    <small class="error" ng-show="signup_form4.username.$error.required">Please input a username</small>
    <small class="error" ng-show="signup_form4.username.$error.minlength">Your username is required to be at least 3 characters</small>
    <small class="error" ng-show="signup_form4.username.$error.maxlength">Your username cannot be longer than 20 characters</small>
    <small class="error" ng-show="signup_form4.username.$error.unique">That username is taken, please try another</small>
  </div>
</div>
</form>

<p>In our last field, we&rsquo;re using all the same previous validations, with the exception that we&rsquo;ve added our custom validation. This custom validation is defined using an AngularJS directive:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ensureUnique'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$http'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'ngModel'</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">ele</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">ngModel</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">$http</span><span class="p">({</span>
          <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
          <span class="na">url</span><span class="p">:</span> <span class="s1">'/api/check/'</span> <span class="o">+</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">ensureUnique</span><span class="p">,</span>
          <span class="na">data</span><span class="p">:</span> <span class="p">{</span><span class="s1">'field'</span><span class="err">:</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">ensureUnique</span><span class="p">}</span>
        <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">c</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">'unique'</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">isUnique</span><span class="p">);</span>
        <span class="p">}).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">c</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">'unique'</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<p>When the form input is valid, this will make a <em>POST</em> request check to the server at <code>/api/check/username</code> to check if the username is available. Now, obviously since we&rsquo;re only talking about front-end code here, we don&rsquo;t have a backend to test this on, although it could easily be written.</p>

<p><strong>Update:</strong> As per a discussion in the comments, I&rsquo;ve added an update using the <code>$timeout</code> service. To check out that full source, check it out <a href="https://gist.github.com/auser/6417470">here</a>.</p>

<p>Lastly, putting our button together, we can use the angular directive <code>ng-disabled</code> to disable and reenable the button when the form is valid:</p>
<pre class="highlight html"><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;signup_form.$invalid&quot;</span> <span class="na">class=</span><span class="s">&quot;button radius&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
</pre>
<p>As we said above, the form itself will have a <code>$invalid</code> and valid attributes given to us for free.</p>

<p><strong>Update 2:</strong> Although live validation is great, it can be abrasive to the user when they see errors pop-up while they are typing, long before they have put in a <em>valid</em> value. You can be <em>nicer</em> to your users if you show the validations either only after they have submitted the form <em>or</em> after they have moved off of the input. Let&rsquo;s look at both ways to do that.</p>

<h4>Show validations after submit</h4>

<p>To show validations only after the user has attempted to submit the form, you can capture a &lsquo;submitted&rsquo; value on the scope and check for that scope to show the error. </p>

<p>For instance, let&rsquo;s take a look at the first example and only show the errors when the form has been submitted. On the <code>ng-show</code> directive on for the form input, we can add a check to see if the form has been submitted (which we will implement shortly):</p>
<pre class="highlight html"><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;signup_form&quot;</span> <span class="na">novalidate</span> <span class="na">ng-submit=</span><span class="s">&quot;signupForm()&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;fieldset&gt;</span>
    <span class="nt">&lt;legend&gt;</span>Signup<span class="nt">&lt;/legend&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;large-12 columns&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label&gt;</span>Your name<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> 
            <span class="na">placeholder=</span><span class="s">&quot;Name&quot;</span> 
            <span class="na">name=</span><span class="s">&quot;name&quot;</span> 
            <span class="na">ng-model=</span><span class="s">&quot;signup.name&quot;</span> 
            <span class="na">ng-minlength=</span><span class="s">3</span> 
            <span class="na">ng-maxlength=</span><span class="s">20</span> <span class="na">required</span> <span class="nt">/&gt;</span>
       <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
            <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid &amp;&amp; signup_form.submitted&quot;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
            <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$error.required&quot;</span><span class="nt">&gt;</span>
            Your name is required.
        <span class="nt">&lt;/small&gt;</span>
        <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
                <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$error.minlength&quot;</span><span class="nt">&gt;</span>
                Your name is required to be at least 3 characters
        <span class="nt">&lt;/small&gt;</span>
        <span class="nt">&lt;small</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> 
                <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$error.maxlength&quot;</span><span class="nt">&gt;</span>
                Your name cannot be longer than 20 characters
        <span class="nt">&lt;/small&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">class=</span><span class="s">&quot;button radius&quot;</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/fieldset&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</pre>
<p>Now, the error div will only show up if the <code>signup_form.submitted</code> variable has been set to true. We can implement this in the <code>signupForm</code> action, like so:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">'signupController'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'$scope'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">submitted</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="nx">$scope</span><span class="p">.</span><span class="nx">signupForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">signup_form</span><span class="p">.</span><span class="nx">$valid</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Submit as normal
</span>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">signup_form</span><span class="p">.</span><span class="nx">submitted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<p>Now, when your users try to submit the form while there is an invalid element, you can catch it and show them the appropriate errors.</p>

<h4>Show validations only after blur</h4>

<p>If you want to retain the <em>real-time</em> nature of the error input, you can show your users the errors after they have <code>blurred</code> off of the input form. To do this, we like to add a small directive that will attach a new variable to the form. </p>

<p>The directive we like to use is the <code>ngFocus</code> directive and it looks like:</p>
<pre class="highlight javascript"><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">'ngFocus'</span><span class="p">,</span> <span class="p">[</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">FOCUS_CLASS</span> <span class="o">=</span> <span class="s2">&quot;ng-focused&quot;</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">restrict</span><span class="p">:</span> <span class="s1">'A'</span><span class="p">,</span>
    <span class="na">require</span><span class="p">:</span> <span class="s1">'ngModel'</span><span class="p">,</span>
    <span class="na">link</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$focused</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s1">'focus'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">FOCUS_CLASS</span><span class="p">);</span>
        <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="nx">ctrl</span><span class="p">.</span><span class="nx">$focused</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;});</span>
      <span class="p">}).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">'blur'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">element</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">FOCUS_CLASS</span><span class="p">);</span>
        <span class="nx">scope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="nx">ctrl</span><span class="p">.</span><span class="nx">$focused</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;});</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}]);</span>
</pre>
<p>To implement the <code>ngFocus</code> directive, we can simply attach this directive to the input element, like so:</p>
<pre class="highlight html"><span class="nt">&lt;input</span> <span class="na">ng-class=</span><span class="s">&quot;{error: signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid}&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Name&quot;</span> <span class="na">name=</span><span class="s">&quot;name&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signup.name&quot;</span> <span class="na">ng-minlength=</span><span class="s">3</span> <span class="na">ng-maxlength=</span><span class="s">20</span> <span class="na">required</span> <span class="na">ng-focus</span> <span class="nt">/&gt;</span>
</pre>
<p>The <code>ngFocus</code> directive simply attaches an action to the <code>blur</code> and <code>focus</code> events on the form input and adds a class (ng-focused) and sets the form input field <code>$focused</code> as true. Then you can show your individual error messages depending if the form is focused or not. For instance:</p>
<pre class="highlight html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;error&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;signup_form.name.$dirty &amp;&amp; signup_form.name.$invalid &amp;&amp; !signup_form.name.$focused&quot;</span><span class="nt">&gt;</span>
</pre>
<p>I hope this post shows you how cool AngularJS form validation can be. Stay tuned for the next post and sign-up for the newsletter for weekly, up-to-date posts about the latest and greatest, curated angularjs news.</p>

<script type="text/javascript">
  var app = angular.module("validationExampleApp", []);
  app.controller("signupForm1Controller", ['$scope', function($scope) {
    $scope.dirtyAndInvalid = function(o) {
      return o.$dirty && o.$invalid;
    }
  }]);
</script>
]]></content>
  </entry>
      
</feed>