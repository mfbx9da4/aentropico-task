<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
<title>Express.js Tutorial</title>
<link rel="stylesheet" type="text/css" href="http://www.hacksparrow.com/wp-content/themes/hacksparrow/style.css"></style>
<script type="text/javascript" src="http://www.hacksparrow.com/wp-content/themes/hacksparrow/jquery-1.6.1.min.js"></script>
<script type="text/javascript" src="http://www.hacksparrow.com/wp-content/themes/hacksparrow/main.js"></script>
<link rel="shortcut icon" href="http://www.hacksparrow.com/wp-content/themes/hacksparrow/favicon.ico" />
<link href="http://www.hacksparrow.com/wp-content/themes/hacksparrow/prettify/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="http://www.hacksparrow.com/wp-content/themes/hacksparrow/prettify/prettify.js"></script>

<link rel="alternate" type="application/rss+xml" title="Hack Sparrow &raquo; Express.js Tutorial Comments Feed" href="http://www.hacksparrow.com/express-js-tutorial.html/feed" />
<link rel='stylesheet' id='antispam-extra.style.plugin-css'  href='http://www.hacksparrow.com/wp-content/plugins/antispam-extra/style.plugin.css?ver=3.8.1' type='text/css' media='all' />
<script type='text/javascript' src='http://www.hacksparrow.com/wp-includes/js/jquery/jquery.js?ver=1.10.2'></script>
<script type='text/javascript' src='http://www.hacksparrow.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript' src='http://www.hacksparrow.com/wp-content/plugins/antispam-extra/script.js?ver=3.8.1'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.hacksparrow.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.hacksparrow.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='Express.js HTTPS' href='http://www.hacksparrow.com/express-js-https.html' />
<link rel='next' title='JavaScript &#8211; Use Variables with Regular Expressions' href='http://www.hacksparrow.com/javascript-use-variables-with-regular-expressions.html' />

<link rel='shortlink' href='http://www.hacksparrow.com/?p=854' />

<!-- Bad Behavior 2.2.15 run time: 18.787 ms -->
<script type="text/javascript">
<!--
function bb2_addLoadEvent(func) {
	var oldonload = window.onload;
	if (typeof window.onload != 'function') {
		window.onload = func;
	} else {
		window.onload = function() {
			oldonload();
			func();
		}
	}
}

bb2_addLoadEvent(function() {
	for ( i=0; i < document.forms.length; i++ ) {
		if (document.forms[i].method == 'post') {
			var myElement = document.createElement('input');
			myElement.setAttribute('type', 'hidden');
			myElement.name = 'bb2_screener_';
			myElement.value = '1391278446 201.27.185.22';
			document.forms[i].appendChild(myElement);
		}
	}
});
// --></script>
		<script type="text/javascript"><!--
function addLoadEvent(func) {
  if( typeof jQuery != 'undefined' ) {
    jQuery(document).ready( func );
  } else if( typeof Prototype != 'undefined' ) {
    Event.observe( window, 'load', func );
  } else {
    var oldonload = window.onload;
    if (typeof window.onload != 'function') {
      window.onload = func;
    } else {
      window.onload = function() {
        if (oldonload)
          oldonload();
        
        func();
      }
    }
  }
}
function wphc(){
	var wphc_data = [1939718448,2124209442,2021901174,2140203829,1686553659,1809488947,1703399716,617863716,684361058,617848438,684361058,601071478,818447471,1619301419,1940707134,1703139641,970707234,819172461]; 

	for (var i=0; i<wphc_data.length; i++){
		wphc_data[i]=wphc_data[i]^284406870;
	}

	var a = new Array(wphc_data.length); 
	for (var i=0; i<wphc_data.length; i++) { 
		a[i] = String.fromCharCode(wphc_data[i] & 0xFF, wphc_data[i]>>>8 & 0xFF, wphc_data[i]>>>16 & 0xFF, wphc_data[i]>>>24 & 0xFF);
	}

	return eval(a.join('')); 
}
addLoadEvent(function(){var el=document.getElementById('wphc_value');if(el)el.value=wphc();});
//--></script>
	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>

<!-- All in One SEO Pack 2.1.3 by Michael Torbert of Semper Fi Web Design[141,212] -->
<meta name="description" content="Looking for a good tutorial on Express.js to help you get quickly productive in it? You have come to the right place. In this tutorial I will run you" />

<meta name="keywords" content="express.js,git,github,node.js" />

<link rel="canonical" href="http://www.hacksparrow.com/express-js-tutorial.html" />
<!-- /all in one seo pack -->
<!-- Vipers Video Quicktags v6.4.5 | http://www.viper007bond.com/wordpress-plugins/vipers-video-quicktags/ -->
<style type="text/css">
.vvqbox { display: block; max-width: 100%; visibility: visible !important; margin: 10px auto; } .vvqbox img { max-width: 100%; height: 100%; } .vvqbox object { max-width: 100%; } 
</style>
<script type="text/javascript">
// <![CDATA[
	var vvqflashvars = {};
	var vvqparams = { wmode: "opaque", allowfullscreen: "true", allowscriptaccess: "always" };
	var vvqattributes = {};
	var vvqexpressinstall = "http://www.hacksparrow.com/wp-content/plugins/vipers-video-quicktags/resources/expressinstall.swf";
// ]]>
</script>
</head>
<body>
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

<!--
<div id="debug"><span></span></div>
-->

<div id="top-bar">

	<div id="top-bar-left" class="top-bar fl">
		<a id="logo"  href="http://www.hacksparrow.com" title="Node.js and JavaScript Tutor">
			<img src="http://www.hacksparrow.com/wp-content/themes/hacksparrow/images/logo.png"/>
		</a>
		<ul id="top-menu">
			<li id="about-menu"></li>
			<li id="categories-menu"></li>
			<li id="archive-menu"></li>
			<li id="contact-menu"></li>
		</ul>
	</div>
	<div id="search-box" class="fl">
		<form id="search-form" action="/">
			<input type="text" id="search-input" name="s" value="">
			<div id="search-submit"></div>
		</form>
	</div>	
	<div id="top-bar-right" class="top-bar fl" style="position:relative">
		<div id="feedburner-link"><a href="http://feeds.feedburner.com/hacksparrow" title="Subscribe to my RSS feeds"></a></div>
		<div id="twitter-link"><a href="http://twitter.com/hacksparrow/" title="Follow me on Twitter">@hacksparrow</a></div>
	</div>
</div>

<div id="wrapper">

	<div id="top-dialog">
	<div id="top-dialog-pointer"></div>
	<span id="top-dialod-html">I am Hack Sparrow<br/>Captain of the Internets.</span>
	</div>

	<div id="content-column">

		<div id="content-mid">

  				
		<div class="post">
			<h1 id="post-854"><a href="http://www.hacksparrow.com/express-js-tutorial.html" rel="bookmark" title="Permanent Link: Express.js Tutorial">Express.js Tutorial</a></h1>
				<div class="post-meta">
					<i>Posted on March 25th, 2012 under <a href="http://www.hacksparrow.com/category/express-js" title="View all posts in Express.js" rel="category tag">Express.js</a>, <a href="http://www.hacksparrow.com/category/node-js-2" title="View all posts in Node.js" rel="category tag">Node.js</a></i><br/>
					<i>Tags: <a href="http://www.hacksparrow.com/tag/express-js" rel="tag">Express.js</a>, <a href="http://www.hacksparrow.com/tag/git" rel="tag">git</a>, <a href="http://www.hacksparrow.com/tag/github" rel="tag">GitHub</a>, <a href="http://www.hacksparrow.com/tag/node-js" rel="tag">node.js</a></i>
				</div>
			<p>Looking for a good tutorial on Express.js to help you get quickly productive in it? You have come to the right place.</p><p><div class="notice">Tutorial updated for Express 3 <img src="http://www.hacksparrow.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" />  If you find any issues in the tutorial code, please ping me in the comments.<br></div></p><p>In this tutorial I will run you through the process setting up an Express.js app and making it do what a basic website might do. You will learn the basics of routes, views, Jade templates, Stylus CSS engine, handling POST and GET requests. </p><p>Let's create an online store to sell Ninja items. We will call it the Ninja Store.</p><p><strong>Installing Express</strong></p><p>First of all install Express.js as a global module:</p><pre class="prettyprint codeblock">$ npm install express -g<br></pre><p>If that fails:</p><pre class="prettyprint codeblock">$ sudo npm install express -g<br></pre><p>Now, create a directory and create an Express app in it:</p><pre class="prettyprint codeblock">$ mkdir ninja-store<br>$ cd ninja-store<br>$ express --sessions --css stylus<br></pre><p>If you like shortcuts, you could accomplish the same this way too:</p><pre class="prettyprint codeblock">$ express ninja-store --sessions --css stylus &#038;& cd ninja-store<br></pre><p><br>We want to have support for sessions, hence the <code>--sessions</code> option. Using <code>--css</code>, we specified that we would be using the <a href="http://learnboost.github.com/stylus/">Stylus CSS engine</a>. If you are a <a href="http://lesscss.org/">Less</a> fan, you can specify <code>--css less</code>. Not specifying the <code>--css</code> option will default to the plain vanilla CSS we all are familiar with.</p><p>Then install the dependencies for the app:</p><pre class="prettyprint codeblock">$ npm install<br></pre><p>That will install a bunch of modules used by the app. With that the base of the app is ready. It is already a working app. Let's see what it outputs. Start the app:</p><pre class="prettyprint codeblock">$ node app<br>Express server listening on port 3000<br></pre><p>Then load <code>http://localhost:3000/</code> in your browser. You will see a simple webpage with the title "Express", which looks something like this:</p><p><img src="http://www.hacksparrow.com/wp-content/uploads/2012/03/expressjs-tutorial-0.png" alt="expressjs tutorial 0" width="649" height="386" class="aligncenter size-full wp-image-2100" /></p><p>So looks like the app is working. Time to find out how it works.</p><p><strong>Request flow in Express</strong></p><p>This is how a request to an Express server flows:</p><p>Route &rarr; Route Handler &rarr; Template &rarr; HTML</p><p>The route defines the URL schema. It captures the matching request and passed on control to the corresponding route handler. The route handler processes the request and passes the control to a template. The template constructs the HTML for the response and sends it to the browser.</p><p>The route handler need not always pass the control to a template, it can optionally send the response to a request directly .</p><p>To understand how Express works, let's get working on the Ninja Store app.</p><p><strong>Setting up the Routes</strong></p><p>We will modify some of the stuff Express generated for us to make it more suited for our app, and more logical so that you can understand the inner workings of Express better.</p><p>Rename the <code>index.jade</code> file in the <code>views</code> folder to <code>home.jade</code>. This is actually a part of setting up views in Express.js, I will get there in the next section.</p><p>Delete the <code>index.js</code> and <code>user.js</code> from the <code>routes</code> folder. We don't need them and their presence could be potentially confusing. Create a new file called <code>store.js</code> in the <code>routes</code> folder, and put the following code in it:</p><pre class="prettyprint codeblock">exports.home = function(req, res){<br>  res.render('home', { title: 'Ninja Store' })<br>};<br></pre><p>Then we are going to modify <code>app.js</code>:</p><p>Delete these</p><pre class="prettyprint codeblock">  , routes = require('./routes')<br>  , user = require('./routes/user')<br></pre><p>Add the following right before <code>var app = express();</code>.</p><pre class="prettyprint codeblock">var store = require('./routes/store');<br></pre><p>Delete these</p><pre class="prettyprint codeblock">app.get('/', routes.index);<br>app.get('/users', user.list);<br></pre><p>and add this</p><pre class="prettyprint codeblock">app.get('/', store.home);<br></pre><p>With that we have set up our own route for the home page.</p><p>Routes are URL schema for a website. In Express you define them using <code>app.get()</code>, <code>app.post()</code>, <code>app.delete()</code> etc. The get, post, delete methods are derived from their corresponding <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">HTTP verbs</a>.</p><p>So far we created a single route for our app. Very soon we will be creating more, but before that I'll tell you about the files in the <code>routes</code> directory.</p><p>The <code>routes</code> directory is a convention, not a compulsion. In the <code>routes</code> directory we create appropriately named files which will handle the routes we define in the <code>app.js</code> file. We will import these files into our app and assign the functions defined in them to handle various routes.</p><p>The imported file becomes sort of like an instance of the class of the route handler file. In our case <code>./routes/store.js</code> is the class, <code>store</code> is instance, and <code>store.home</code> is a method of the instance.</p><p>Again as a recommended convention, we create an appropriately named variable for the imported file from the <code>routes</code> directory. Then we pass one of its functions as the second parameter for the route. For eg:</p><pre class="prettyprint codeblock">app.get('/', store.home);<br></pre><p>From that you might probably guess, we can pass any function as the second parameter for the route. You are correct, even this would work:</p><pre class="prettyprint codeblock">app.get('/', function(req, res) {<br>    res.render('home', { title: 'Ninja Store' });<br>});<br></pre><p>We don't need to render HTML pages either:</p><pre class="prettyprint codeblock">app.get('/', function(req, res) {<br>    res.send('Look ma, no HTML!');<br>});<br></pre><p>Now run the app again and see what you get. Title has changed to "Ninja Store" and you see:</p><p><img src="http://www.hacksparrow.com/wp-content/uploads/2012/03/expressjs-tutorial-1.png" alt="expressjs tutorial 1" width="649" height="386" class="aligncenter size-full wp-image-2101" /></p><p>We are making progress. Time to spice up the home page <img src="http://www.hacksparrow.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /> </p><p><strong>Rendering Views</strong></p><p>You have seen <code>res.render()</code> and <code>res.send()</code> in action already and probably have a fair idea about what they do. <code>res.send()</code> will directly send a string of text to the browser and <code>res.render()</code> will render a <a href="http://jade-lang.com/">Jade template</a>.</p><p>While it is possible to create a website entirely using <code>res.send()</code>, it is certainly not recommended to do so, because you will only end up with a complex and dirty looking codebase. Jade is the default templating engine for Express. Let's find out the basics of <code>res.render()</code> and the Jade templates.</p><p>Open the file named <code>home.jade</code> in the <code>views</code> directory. Let's examine its content:</p><pre class="prettyprint codeblock">extends layout<br><br>block content<br>  h1= title<br>  p Welcome to #{title}<br></pre><p><span class="object">extend layout</span> means, this view file should look for another view file named <code>layout.jade</code> in the same directory and fill in the <span class="object">block</span> placeholders defined in <code>layout.jade</code>.</p><p>Now, let's take a look at the contents of <code>layout.jade</code>.</p><pre class="prettyprint codeblock">doctype 5<br>html<br>  head<br>    title= title<br>    link(rel='stylesheet', href='/stylesheets/style.css')<br>  body<br>    block content<br></pre><p>It does indeed have a <span class="object">block</span> named content, the content for which is defined in <code>home.jade</code>. Note, you can use anything for <span class="object">block</span> names; "content" is just a convention.</p><p>What you are seeing is Jade code. The very basics of Jade is this:</p><p>i. HTML tag names to create tags, but without the angular brackets<br>ii. Spaces or tabs for indentation, but don't mix them<br>iii. <code>#</code> to assign an <code>id</code> to a tag<br>iv. <code>.</code> to assign a class to a tag, or create a div with a class if not already created<br>v. (property='value') to create attributes and assign values to a tag</p><p>Jade is out of scope of this tutorial, so you might want to read more about it <a href="http://jade-lang.com/">here</a>. However, as we proceed with the tutorial, I will explain you the relevant Jade code we come across.</p><p>The <code>doctype 5</code> you see in <code>layout.jade</code> is doing a doctype declaration of HTML5. Also notice the relatively 'cryptic' <code>title= title</code>, the code is explained below.</p><p><code>title= title</code>: The view expects a variable called <code>title</code> from the route handler. The variable will be set as the content of the <code>title</code> tag AFTER escaping special characters. To not-escape, use <code>title!= title</code>.</p><p>You can send data to views via the variables object in the <code>res.render()</code> method. Eg:</p><pre class="prettyprint codeblock">res.render('home', { title: 'Ninja Store' });<br></pre><p>The <span class="object">title</span> variable can be accessed using <code>=title</code>, <code>!=title</code> or <code>#{title}</code> in the views.</p><pre class="prettyprint codeblock">  p Welcome to #{title}<br>  p= title<br>  p!= title<br></pre><p>By default <code>res.send()</code> and <code>res.render()</code> send the HTTP status code of 200. You can specify your own HTTP status code.</p><p>Custom status code example for <code>res.send()</code>:</p><pre class="prettyprint codeblock">res.send('File not Found', 404);<br></pre><p>Custom status code example for <code>res.render()</code> (make sure you have created a file named <code>404.jade</code> in the <code>views</code> directory):</p><pre class="prettyprint codeblock">res.status(404).render('404', { title: 'File not Found'});<br></pre><p>Ok, now that we know the basic of views, let's revamp our homepage!</p><p>Put the following code in the <code>home.jade</code> file:</p><pre class="prettyprint codeblock">extends layout<br><br>block content<br>  #wrapper<br>    #logo<br>        img(src='/images/logo.png')<br>    #display<br>        #login        <br>            form(method='post')<br>                | Enter your name if you want to be a ninja<br>                div<br>                    input(type='text', name='username')<br>                    input(type='submit', value='Log In')<br>        <br>    #footer<br>        div Copyright &copy; Ninja Store #{+new Date().getFullYear()} <br>        a(href='/page?name=about') About <br>        | |  <br>        a(href='/page?name=contact') Contact Us<br></pre><p>Make sure you create a nice logo for the store, name it <code>logo.png</code>, and keep it in the <code>/public/images/</code> directory.</p><p>Put the following code in the <code>style.styl</code> file in the <code>/public/stylesheets/</code> directory:</p><pre class="prettyprint codeblock">body<br>  padding: 0<br>  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif<br><br>a<br>  color: #0069FF<br> <br>#wrapper<br>  width: 450px<br>  margin: 0 auto<br>  padding: 40px 20px<br>  background: #fff<br><br>#logo<br>  text-align: center<br><br>#display<br>  margin: 20px 0 50px<br><br>#userbar<br>  margin-bottom: 10px<br></pre><p>Aren't we supposed to edit the <code>style.css</code> file? Well, <code>style.styl</code> is the Stylus file which generates the <code>style.css</code> file. Even though we code our CSS in the <code>.styl</code> file, we always include the <code>.css</code> file in the Jade template:</p><pre class="prettyprint codeblock">link(rel='stylesheet', href='/stylesheets/style.css')<br></pre><p>So what is the point of using Stylus? Stylus offers a dynamic and efficient syntax for generating CSS. The details is out of scope of this tutorial, you can <a href="http://learnboost.github.com/stylus/">learn more about Stylus here</a>.</p><p>Note: just like Jade templates, make sure you either uses spaces or tabs consistently for indenting your Stylus code.</p><p>Changes made to the <code>views</code> and everything in the <code>public</code> directory will be updated immediately when you refresh the browser. Refresh the browser and see what you get. In rare cases, the view may not be update - feel free to restart the server.</p><p>Wow! There you have, a log in form.</p><p><img src="http://www.hacksparrow.com/wp-content/uploads/2012/03/expressjs-tutorial-21.png" alt="expressjs tutorial 2" width="655" height="473" class="aligncenter size-full wp-image-2114" /></p><p>Try logging in.</p><p>Meh! Hit by an error:</p><pre class="prettyprint codeblock">Cannot POST /<br></pre><p>Let me explain what's going on.</p><p>Remember the route<br><pre class="prettyprint codeblock">app.get('/', store.home);<br></pre><br>we created?</p><p>That was for GET requests to the root of the website. Since our form uses the POST method, the route is not capturing it. We need to create a POST router for the home page to process the form.</p><p><strong>Handling Forms - POST, GET Requests</strong></p><p>Add this to app.js:</p><pre class="prettyprint codeblock">app.post('/', store.home_post_handler);<br></pre><p>Now we need to define the <code>home_post_handler()</code> function in <code>store.js</code> module. Add the following to <code>store.js</code>:</p><pre class="prettyprint codeblock">// handler for form submitted from homepage<br>exports.home_post_handler = function(req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// if the username is not submitted, give it a default of "Anonymous"<br>&nbsp;&nbsp;&nbsp;&nbsp;username = req.body.username || 'Anonymous';<br>&nbsp;&nbsp;&nbsp;&nbsp;// store the username as a session variable<br>&nbsp;&nbsp;&nbsp;&nbsp;req.session.username = username;<br>&nbsp;&nbsp;&nbsp;&nbsp;// redirect the user to homepage<br>&nbsp;&nbsp;&nbsp;&nbsp;res.redirect('/');<br>};<br></pre><p>So handling POST data is pretty easy - just look for them in the <code>req.body</code> object.</p><p>Refresh the browser.</p><p>You still get <code>Cannot POST /</code>. That's because for changes you make in .js files to take effect, you need to restart the server. So restart the server and try logging in again.</p><p>This time the form submission works fine, but you still see the log in form. Did we log in or not? We did log in, but our route handler made it confusing. We'll change it now. Edit the <code>exports.home()</code> function:</p><pre class="prettyprint codeblock">// handler for homepage<br>exports.home = function(req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// if user is not logged in, ask them to login<br>&nbsp;&nbsp;&nbsp;&nbsp;if (typeof req.session.username == 'undefined') res.render('home', { title: 'Ninja Store'});<br>&nbsp;&nbsp;&nbsp;&nbsp;// if user is logged in already, take them straight to the items list<br>&nbsp;&nbsp;&nbsp;&nbsp;else res.redirect('/items');<br>};<br></pre><p>Restart the server and log in again.</p><pre class="prettyprint codeblock">Cannot GET /items<br></pre><p>An error again. But it looks more promising this time, the app is trying to load an undefined route. If we define the route, we would have it working.</p><p>Before we get to defining the missing route, let's optimize the views a little bit. Some components of the view will be common to all the views, so it is a good idea to modularize them. The Jade template engine has a command called <code>include</code> using which you can include files into a view.</p><p>Create a file called <code>footer.jade</code> in the <code>views</code> directory with the following content:</p><pre class="prettyprint codeblock">#footer<br>  div Copyright &copy; Ninja Store #{+new Date().getFullYear()} <br>  a(href='/page?name=about') About <br>  | |  <br>  a(href='/page?name=contact') Contact Us<br></pre><p>Create a file called <code>userbar.jade</code> in the <code>views</code> directory with the following content:</p><pre class="prettyprint codeblock">#userbar<br>  | Welcome <br>  b #{username} <br>  | | <br>  a(href='/items') Items <br>  | |   <br>  a(href='/logout') Log Out<br></pre><p>Now edit the <code>home.jade</code> file:</p><pre class="prettyprint codeblock">extends layout<br><br>block content<br>  #wrapper<br>    #logo<br>      a(href='/')<br>        img(src='/images/logo.png')<br>    #display<br>      #login    <br>        form(method='post')<br>          | Enter your name if you want to be a ninja<br>          div<br>            input(type='text', name='username')<br>            input(type='submit', value='Log In')<br>      <br>    include footer<br></pre><p>We will be defining the missing <code>items/</code> and a related route in a while. In the process, we will also find out how to handle GET requests in Express.js.</p><p>There are two types of parametric GET requests in Express.js - <code>req.params</code> and <code>req.query</code>.</p><p>The <code>req.params</code> object contains request parameters right in the URL. It uses the clean URL scheme. Eg: <code>http://example.com/product/1274</code>. </p><p>The <code>req.query</code> object contains request parameters in the GET query. It uses the conventional GET request scheme. Eg: <code>http://example.com?product=1274</code>.</p><p>For displaying the items we will use the <code>req.params</code> method.</p><p>Add these routes to <code>app.js</code>:</p><pre class="prettyprint codeblock">// display the list of item<br>app.get('/items', store.items);<br>// show individual item<br>app.get('/item/:id', store.item);<br></pre><p><code>/items</code> for listing the items of the store.</p><p><code>/item/:name</code> for displaying the individual items.</p><p>We will use a simple hard-coded array as the data source. Add the following to the <code>store.js</code> file.</p><pre class="prettyprint codeblock">// our 'database'<br>var items = {<br>&nbsp;&nbsp;&nbsp;&nbsp;SKN:{name:'Shuriken', price:100},<br>&nbsp;&nbsp;&nbsp;&nbsp;ASK:{name:'Ashiko', price:690},<br>&nbsp;&nbsp;&nbsp;&nbsp;CGI:{name:'Chigiriki', price:250},<br>&nbsp;&nbsp;&nbsp;&nbsp;NGT:{name:'Naginata', price:900},<br>&nbsp;&nbsp;&nbsp;&nbsp;KTN:{name:'Katana', price:1000}<br>};<br></pre><p>Now create the corresponding route handlers for the routes we added. Add the following to <code>store.js</code>:</p><pre class="prettyprint codeblock">// handler for displaying the items<br>exports.items = function(req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// don't let nameless people view the items, redirect them back to the homepage<br>&nbsp;&nbsp;&nbsp;&nbsp;if (typeof req.session.username == 'undefined') res.redirect('/');<br>&nbsp;&nbsp;&nbsp;&nbsp;else res.render('items', { title: 'Ninja Store - Items', username: req.session.username, items:items });<br>};<br><br>// handler for displaying individual items<br>exports.item = function(req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// don't let nameless people view the items, redirect them back to the homepage<br>&nbsp;&nbsp;&nbsp;&nbsp;if (typeof req.session.username == 'undefined') res.redirect('/');<br>&nbsp;&nbsp;&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var name = items[req.params.id].name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var price = items[req.params.id].price;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res.render('item', { title: 'Ninja Store - ' + name, username: req.session.username, name:name, price:price });<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>};<br></pre><p>Time to create the views for the routes.</p><p>View for listing all the items on the store. Name it <code>items.jade</code>.</p><pre class="prettyprint codeblock">extends layout<br><br>block content<br>  #wrapper<br>    #logo<br>      img(src='/images/logo.png')<br>    #display<br>      include userbar<br>        <br>      -for (var id in items)<br>        - var item = items[id]<br>        div<br>          a(href='/item/#{id}') #{item.name} - $#{item.price}<br>      <br>    include footer<br></pre><p>View for listing individual items of the store. Name it <code>item.jade</code>.</p><pre class="prettyprint codeblock">extends layout<br><br>block content<br>  #wrapper<br>    #logo<br>      img(src='/images/logo.png')<br>    #display<br>      include userbar<br>      <br>      p The #{name.toLowerCase()} is one of the must-have items for any aspiring ninja. It costs just $#{price} on our store.<br>      p Buy it today!<br>      <br>    include footer<br></pre><p>Our footer links uses the conventional GET style links, let's find out how to handle those kind of requests.</p><p>First create the routes for the footer links. Add the following to <code>app.js</code>.</p><pre class="prettyprint codeblock">// show general pages<br>app.get('/page', store.page);<br></pre><p>Now, the route handler in <code>store.js</code>:</p><pre class="prettyprint codeblock">// handler for showing simple pages<br>exports.page = function(req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;var name = req.query.name;<br>&nbsp;&nbsp;&nbsp;&nbsp;var contents = {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;about: 'Ninja Store sells the coolest ninja stuff in the world. Anyone shopping here is cool.',<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contact: 'You can contact us at &lt;address>&lt;strong>Ninja Store&lt;/strong>,&lt;br>1, World Ninja Headquarters,&lt;br>Ninja Avenue,&lt;br>NIN80B7-JP,&lt;br>Nihongo.&lt;/address>'<br>&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;res.render('page', { title: 'Ninja Store - ' + name, username: req.session.username, content:contents[name] });<br>};<br></pre><p>And then the view for the pages. Create a new view file named <code>page.jade</code> in the <code>views</code> directory with the following content.</p><pre class="prettyprint codeblock">extends layout<br><br>block content<br>  #wrapper<br>    #logo<br>      a(href='/')<br>        img(src='/images/logo.png')<br>    #display<br>      p!= content<br>      <br>    include footer<br></pre><p>Notice how we use <code>p!= content</code> instead of <code>p #{content}</code>. That is because we don't want the Jade engine to escape the HTML content of the variable.</p><p>we need to create a route and a handler for logging out. Add this route to <code>app.js</code>:</p><pre class="prettyprint codeblock">app.get('/logout', function(req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;// delete the session variable<br>&nbsp;&nbsp;&nbsp;&nbsp;delete req.session.username;<br>&nbsp;&nbsp;&nbsp;&nbsp;// redirect user to homepage<br>&nbsp;&nbsp;&nbsp;&nbsp;res.redirect('/');<br>});<br></pre><p>Notice how we specified the route handler right in the <code>app.js</code> file with the route definition. All the route definition cares about is that the second parameter should be a function, wherever it may be defined; just make sure to pass the request object (<code>req</code>) and the response object (<code>res</code>) to it.</p><p>With that our Ninja Store website ready. Start the app and get ready to witness the brilliance of the Ninja Store in action. </p><p><img src="http://www.hacksparrow.com/wp-content/uploads/2012/03/expressjs-tutorial-3.png" alt="expressjs tutorial 3" width="655" height="473" class="aligncenter size-full wp-image-2108" /></p><p><strong>Conclusion</strong></p><p>You know what? The whole <a href="https://github.com/hacksparrow/ninja-store">project is on GitHub</a> <img src="http://www.hacksparrow.com/wp-includes/images/smilies/icon_biggrin.gif" alt=":D" class="wp-smiley" />  I intentionally didn't tell you earlier, so that you don't get lazy and skip learning. Now that you done the hard work, feel free to clone the Ninja Store repository and go berserk on it.</p><p>Express.js is a lot more than what I covered in this tutorial. I have already, and will be covering the more advanced topics in dedicated articles on my website.<br><div class="notice">If you liked this tutorial, you will love my book <b>"Express Web Application Development"</b>. <a href="http://www.packtpub.com/express-web-application-development/book">Get your copy here</a>.<br></div></p>	
		</div>
		
		
<div id="interest">
	<div id="similar" class="fl">
		<b>Related to this post</b>
		<ul><li><a href="http://www.hacksparrow.com/express-js-custom-error-pages-404-and-500.html" rel="bookmark" title="March 2, 2013">Express.js Custom Error Pages &#8211; 404 and 500</a></li>

<li><a href="http://www.hacksparrow.com/mobile-web-development-in-express-js-node-js.html" rel="bookmark" title="February 19, 2012">Mobile Web Development in Express.js (Node.js)</a></li>

<li><a href="http://www.hacksparrow.com/express-js-jade-partials-how-to-use-them.html" rel="bookmark" title="November 23, 2011">Express.js Jade Partials &#8211; How to use them</a></li>

<li><a href="http://www.hacksparrow.com/vhost-in-express-js.html" rel="bookmark" title="December 26, 2012">vhost in Express.js</a></li>

<li><a href="http://www.hacksparrow.com/how-to-server-static-html-files-in-express-js.html" rel="bookmark" title="February 14, 2013">How to serve static HTML files in Express.js</a></li>

<li><a href="http://www.hacksparrow.com/post-get-request-handling-in-node-js-express.html" rel="bookmark" title="March 2, 2012">POST / GET Request Handling in Node.js Express</a></li>

<li><a href="http://www.hacksparrow.com/wordpress-image-has-failed-to-upload-due-to-an-error.html" rel="bookmark" title="July 9, 2011">WordPress: Image has failed to upload due to an error</a></li>

<li><a href="http://www.hacksparrow.com/handle-file-uploads-in-express-node-js.html" rel="bookmark" title="January 3, 2012">Handle File Uploads in Express (Node.js)</a></li>

<li><a href="http://www.hacksparrow.com/form-handling-processing-in-express-js.html" rel="bookmark" title="November 29, 2011">Form Handling / Processing in Express.js</a></li>

<li><a href="http://www.hacksparrow.com/kohana-route-not-working-kohana-gives-a-404-error-for-route.html" rel="bookmark" title="June 21, 2011">Kohana Route not Working: Kohana gives a 404 Error for Route</a></li>
</ul><!-- Similar Posts took 35.620 ms -->	</div>
	<div id="bcon" class="fl">
		<script type="text/javascript"><!--
		google_ad_client = "ca-pub-0762366973631369";
		/* KBBOX */
		google_ad_slot = "5126443953";
		google_ad_width = 300;
		google_ad_height = 250;
		//-->
		</script>
		<script type="text/javascript"
		src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
		</script>
	</div>
	<div style="clear:both"></div>
</div>


<div id="social">
				
	<div style="float:left"><!-- Place this tag in your head or just before your close body tag -->
	<script type="text/javascript" src="http://apis.google.com/js/plusone.js"></script>
	<!-- Place this tag where you want the +1 button to render -->
	<g:plusone size="medium"></g:plusone>
	</div>			
	<div style="width:120px;float:left"><iframe src="http://www.facebook.com/plugins/like.php?href=http://www.hacksparrow.com/express-js-tutorial.html/comment-page-14&amp;layout=button_count&amp;show_faces=false&amp;width=450&amp;action=recommend&amp;font&amp;colorscheme=light&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:21px;" allowTransparency="true"></iframe></div>
	<div style="width:90px;float:right"><a href="http://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-via="hacksparrow">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script></div>
	<div style="clear:both"></div>
</div>


<div id="comment-section">
	
<!-- You can start editing here. -->

	<h3 id="comments">131 Responses to &#8220;Express.js Tutorial&#8221;</h3> 

 <ol class="commentlist">
  		<li class="comment even thread-even depth-1" id="comment-9115">
				<div id="div-comment-9115" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://0.gravatar.com/avatar/abb289d74cd85e4529b3962f2e53a308?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />			<cite class="fn">Gordo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="http://www.hacksparrow.com/express-js-tutorial.html/comment-page-14#comment-9115">
			December 2, 2013 at 9:38 pm</a>		</div>

		<p>Great tutorial, thanks a lot!<br />
I would include userbar in page.jade for navigating back</p>

		<div class="reply">
					</div>
				</div>
		</li><!-- #comment-## -->
 </ol>
 
 <div class="navigation">
  <a class="prev page-numbers" href="http://www.hacksparrow.com/express-js-tutorial.html/comment-page-13#comments">&laquo; Previous</a>
<a class='page-numbers' href='http://www.hacksparrow.com/express-js-tutorial.html/comment-page-1#comments'>1</a>
<span class="page-numbers dots">&hellip;</span>
<a class='page-numbers' href='http://www.hacksparrow.com/express-js-tutorial.html/comment-page-12#comments'>12</a>
<a class='page-numbers' href='http://www.hacksparrow.com/express-js-tutorial.html/comment-page-13#comments'>13</a>
<span class='page-numbers current'>14</span> 
 </div>

 


<h3 id="respond">Make a Comment</h3>


<form action="http://www.hacksparrow.com/wp-comments-post.php" method="post" id="commentform">


<p>
<label for="author">Your Name</label>
<input type="text" name="author" id="author" value="" size="22" tabindex="1" />
</p>

<p>
<label for="email">Your E-Mail</label>
<input type="text" name="email" id="email" value="" size="22" tabindex="2" />
</p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: &lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </small></p>-->

<p><textarea name="comment" id="comment" cols="90%" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type="hidden" name="comment_post_ID" value="854" />
</p>
<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="30e66701a0" /></p><div><input type="hidden" id="wphc_value" name="wphc_value" value=""/></div><noscript><div><small>Wordpress Hashcash needs javascript to work, but your browser has javascript disabled. Your comment will be queued in Akismet!</small></div></noscript>
</form>


	
	
</div>
</div>
<!-- /blog content goes here -->
	
		<div id="navigator">
					</div>		
	</div>

<ul id="sidebar">

<li id="text-3" class="widget widget_text">			<div class="textwidget"><a href="http://link.packtpub.com/C9DhUZ">
<img src="http://www.hacksparrow.com/wp-content/themes/hacksparrow/images/ewad-small.png"/>
</a></div>
		</li>
<li id="twitter" class="widget widget_Twidget"><a class="twitter-timeline" data-dnt=true href="https://twitter.com/hacksparrow" data-widget-id="264737018905493504"><h2 class="widgettitle"></h2>
</a>
		      <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>

<li class="no-border">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-0762366973631369";
/* HSBIG */
google_ad_slot = "6478678335";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</li>

<li class="no-border" style="background:#fff">
<div class="fb-like-box" data-href="http://www.facebook.com/pages/Hack-Sparrow/337334869653076" data-width="328" data-height="360" data-show-faces="true" data-stream="false" data-header="false"></div>
</li>

</ul>
<div style="clear:both"></div>
</div>



<div id="footer">
	<div id="footer-wrapper">


		<div id="bottom-twitter">
		<a href="https://twitter.com/hacksparrow" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @hacksparrow</a>
	<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
		</div>


		<div id="footer-widgets">
			<ul id="sidebar2">
<li id="categories-3" class="widget widget_categories"><h2 class="widgettitle">Categories</h2>
		<ul>
	<li class="cat-item cat-item-209"><a href="http://www.hacksparrow.com/category/database" title="View all posts filed under Database">Database</a>
</li>
	<li class="cat-item cat-item-265"><a href="http://www.hacksparrow.com/category/express-js" title="View all posts filed under Express.js">Express.js</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://www.hacksparrow.com/category/general" title="View all posts filed under General">General</a>
</li>
	<li class="cat-item cat-item-6"><a href="http://www.hacksparrow.com/category/javascript" title="View all posts filed under JavaScript">JavaScript</a>
</li>
	<li class="cat-item cat-item-57"><a href="http://www.hacksparrow.com/category/linux" title="View all posts filed under Linux">Linux</a>
</li>
	<li class="cat-item cat-item-208"><a href="http://www.hacksparrow.com/category/node-js-2" title="View all posts filed under Node.js">Node.js</a>
</li>
	<li class="cat-item cat-item-9"><a href="http://www.hacksparrow.com/category/python" title="View all posts filed under Python">Python</a>
</li>
	<li class="cat-item cat-item-14"><a href="http://www.hacksparrow.com/category/rants" title="View all posts filed under Rants">Rants</a>
</li>
	<li class="cat-item cat-item-3"><a href="http://www.hacksparrow.com/category/wordpress" title="View all posts filed under Wordpress">Wordpress</a>
</li>
		</ul>
</li>
<li id="archives-3" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
			<li><a href='http://www.hacksparrow.com/2013/07'>July 2013</a></li>
	<li><a href='http://www.hacksparrow.com/2013/03'>March 2013</a></li>
	<li><a href='http://www.hacksparrow.com/2013/02'>February 2013</a></li>
	<li><a href='http://www.hacksparrow.com/2013/01'>January 2013</a></li>
	<li><a href='http://www.hacksparrow.com/2012/12'>December 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/11'>November 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/09'>September 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/07'>July 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/06'>June 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/04'>April 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/03'>March 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/02'>February 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2012/01'>January 2012</a></li>
	<li><a href='http://www.hacksparrow.com/2011/12'>December 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/11'>November 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/10'>October 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/09'>September 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/08'>August 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/07'>July 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/06'>June 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/05'>May 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/04'>April 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/03'>March 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2011/02'>February 2011</a></li>
	<li><a href='http://www.hacksparrow.com/2010/09'>September 2010</a></li>
	<li><a href='http://www.hacksparrow.com/2010/08'>August 2010</a></li>
	<li><a href='http://www.hacksparrow.com/2010/07'>July 2010</a></li>
	<li><a href='http://www.hacksparrow.com/2010/06'>June 2010</a></li>
	<li><a href='http://www.hacksparrow.com/2010/05'>May 2010</a></li>
	<li><a href='http://www.hacksparrow.com/2010/03'>March 2010</a></li>
	<li><a href='http://www.hacksparrow.com/2010/02'>February 2010</a></li>
		</ul>
</li>
</ul><div><h2 class="widgettitle">Recent Comments</h2><ul id="recentcomments"><li class="recentcomments">Sandeep on <a href="http://www.hacksparrow.com/xml-sitemap-generator-in-node-js-sitemap-xml-gz.html/comment-page-1#comment-9154">XML Sitemap Generator in Node.js &#8211; sitemap.xml.gz</a></li><li class="recentcomments">Alex on <a href="http://www.hacksparrow.com/node-js-udp-server-and-client-example.html/comment-page-1#comment-9153">Node.js UDP Server and Client Example</a></li><li class="recentcomments">ravi on <a href="http://www.hacksparrow.com/express-js-custom-error-pages-404-and-500.html/comment-page-1#comment-9152">Express.js Custom Error Pages &#8211; 404 and 500</a></li><li class="recentcomments">Ted Husted on <a href="http://www.hacksparrow.com/express-js-custom-error-pages-404-and-500.html/comment-page-1#comment-9151">Express.js Custom Error Pages &#8211; 404 and 500</a></li><li class="recentcomments">Mau on <a href="http://www.hacksparrow.com/node-js-async-programming.html/comment-page-1#comment-9140">Node.js Async Programming</a></li><li class="recentcomments">Mau on <a href="http://www.hacksparrow.com/node-js-async-programming.html/comment-page-1#comment-9139">Node.js Async Programming</a></li><li class="recentcomments">Rick on <a href="http://www.hacksparrow.com/dlinksearch-hijacks-browser-disable-dlinksearch-com-search.html/comment-page-4#comment-9129">dlinksearch Hijacks Browser &#8211; Disable dlinksearch.com Search</a></li><li class="recentcomments">balaphp on <a href="http://www.hacksparrow.com/global-variables-in-node-js.html/comment-page-1#comment-9127">Global Variables in Node.js</a></li><li class="recentcomments">Captain on <a href="http://www.hacksparrow.com/running-express-js-in-production-mode.html/comment-page-2#comment-9126">Running Express.js in Production Mode</a></li><li class="recentcomments">student on <a href="http://www.hacksparrow.com/running-express-js-in-production-mode.html/comment-page-1#comment-9125">Running Express.js in Production Mode</a></li></ul></div><div><h2 class="widgettitle">Tags</h2><div class="tagcloud"><a href='http://www.hacksparrow.com/tag/aptana' class='tag-link-228' title='2 topics' style='font-size: 8pt;'>Aptana</a>
<a href='http://www.hacksparrow.com/tag/array' class='tag-link-202' title='6 topics' style='font-size: 11.954198473282pt;'>array</a>
<a href='http://www.hacksparrow.com/tag/curl' class='tag-link-150' title='3 topics' style='font-size: 9.2824427480916pt;'>CURL</a>
<a href='http://www.hacksparrow.com/tag/database-2' class='tag-link-216' title='3 topics' style='font-size: 9.2824427480916pt;'>database</a>
<a href='http://www.hacksparrow.com/tag/express' class='tag-link-255' title='5 topics' style='font-size: 11.206106870229pt;'>Express</a>
<a href='http://www.hacksparrow.com/tag/express-js' class='tag-link-265' title='16 topics' style='font-size: 16.015267175573pt;'>Express.js</a>
<a href='http://www.hacksparrow.com/tag/firefox' class='tag-link-130' title='4 topics' style='font-size: 10.351145038168pt;'>Firefox</a>
<a href='http://www.hacksparrow.com/tag/git' class='tag-link-243' title='3 topics' style='font-size: 9.2824427480916pt;'>git</a>
<a href='http://www.hacksparrow.com/tag/github' class='tag-link-259' title='3 topics' style='font-size: 9.2824427480916pt;'>GitHub</a>
<a href='http://www.hacksparrow.com/tag/google' class='tag-link-129' title='4 topics' style='font-size: 10.351145038168pt;'>Google</a>
<a href='http://www.hacksparrow.com/tag/google-chrome' class='tag-link-133' title='2 topics' style='font-size: 8pt;'>Google Chrome</a>
<a href='http://www.hacksparrow.com/tag/gzip' class='tag-link-117' title='2 topics' style='font-size: 8pt;'>Gzip</a>
<a href='http://www.hacksparrow.com/tag/homebrew' class='tag-link-231' title='2 topics' style='font-size: 8pt;'>Homebrew</a>
<a href='http://www.hacksparrow.com/tag/html' class='tag-link-13' title='3 topics' style='font-size: 9.2824427480916pt;'>HTML</a>
<a href='http://www.hacksparrow.com/tag/http' class='tag-link-245' title='3 topics' style='font-size: 9.2824427480916pt;'>HTTP</a>
<a href='http://www.hacksparrow.com/tag/https' class='tag-link-341' title='3 topics' style='font-size: 9.2824427480916pt;'>HTTPS</a>
<a href='http://www.hacksparrow.com/tag/javascript' class='tag-link-6' title='24 topics' style='font-size: 17.832061068702pt;'>JavaScript</a>
<a href='http://www.hacksparrow.com/tag/javascript-array' class='tag-link-33' title='3 topics' style='font-size: 9.2824427480916pt;'>javascript array</a>
<a href='http://www.hacksparrow.com/tag/javascript-for-loop' class='tag-link-20' title='2 topics' style='font-size: 8pt;'>javascript for loop</a>
<a href='http://www.hacksparrow.com/tag/linux' class='tag-link-57' title='10 topics' style='font-size: 13.984732824427pt;'>Linux</a>
<a href='http://www.hacksparrow.com/tag/list' class='tag-link-200' title='3 topics' style='font-size: 9.2824427480916pt;'>list</a>
<a href='http://www.hacksparrow.com/tag/lol' class='tag-link-102' title='2 topics' style='font-size: 8pt;'>lol</a>
<a href='http://www.hacksparrow.com/tag/mac' class='tag-link-182' title='8 topics' style='font-size: 13.022900763359pt;'>Mac</a>
<a href='http://www.hacksparrow.com/tag/microsoft' class='tag-link-136' title='4 topics' style='font-size: 10.351145038168pt;'>Microsoft</a>
<a href='http://www.hacksparrow.com/tag/mongodb' class='tag-link-210' title='12 topics' style='font-size: 14.732824427481pt;'>MongoDB</a>
<a href='http://www.hacksparrow.com/tag/mozilla' class='tag-link-126' title='6 topics' style='font-size: 11.954198473282pt;'>Mozilla</a>
<a href='http://www.hacksparrow.com/tag/mozilla-firefox' class='tag-link-132' title='2 topics' style='font-size: 8pt;'>Mozilla Firefox</a>
<a href='http://www.hacksparrow.com/tag/mysql' class='tag-link-8' title='6 topics' style='font-size: 11.954198473282pt;'>MySQL</a>
<a href='http://www.hacksparrow.com/tag/mysqldump' class='tag-link-55' title='2 topics' style='font-size: 8pt;'>mysqldump</a>
<a href='http://www.hacksparrow.com/tag/node-js' class='tag-link-205' title='61 topics' style='font-size: 22pt;'>node.js</a>
<a href='http://www.hacksparrow.com/tag/nosql' class='tag-link-222' title='3 topics' style='font-size: 9.2824427480916pt;'>NoSQL</a>
<a href='http://www.hacksparrow.com/tag/npm' class='tag-link-207' title='4 topics' style='font-size: 10.351145038168pt;'>npm</a>
<a href='http://www.hacksparrow.com/tag/object' class='tag-link-232' title='5 topics' style='font-size: 11.206106870229pt;'>Object</a>
<a href='http://www.hacksparrow.com/tag/pagination' class='tag-link-268' title='3 topics' style='font-size: 9.2824427480916pt;'>pagination</a>
<a href='http://www.hacksparrow.com/tag/php' class='tag-link-7' title='11 topics' style='font-size: 14.412213740458pt;'>PHP</a>
<a href='http://www.hacksparrow.com/tag/python' class='tag-link-9' title='7 topics' style='font-size: 12.488549618321pt;'>Python</a>
<a href='http://www.hacksparrow.com/tag/redis' class='tag-link-221' title='4 topics' style='font-size: 10.351145038168pt;'>Redis</a>
<a href='http://www.hacksparrow.com/tag/regex' class='tag-link-235' title='2 topics' style='font-size: 8pt;'>Regex</a>
<a href='http://www.hacksparrow.com/tag/sitemap' class='tag-link-115' title='2 topics' style='font-size: 8pt;'>Sitemap</a>
<a href='http://www.hacksparrow.com/tag/sitemap-xml-gz' class='tag-link-119' title='2 topics' style='font-size: 8pt;'>sitemap.xml.gz</a>
<a href='http://www.hacksparrow.com/tag/string' class='tag-link-197' title='3 topics' style='font-size: 9.2824427480916pt;'>string</a>
<a href='http://www.hacksparrow.com/tag/thunderbird' class='tag-link-125' title='2 topics' style='font-size: 8pt;'>Thunderbird</a>
<a href='http://www.hacksparrow.com/tag/tuple' class='tag-link-201' title='3 topics' style='font-size: 9.2824427480916pt;'>tuple</a>
<a href='http://www.hacksparrow.com/tag/ubuntu' class='tag-link-212' title='5 topics' style='font-size: 11.206106870229pt;'>Ubuntu</a>
<a href='http://www.hacksparrow.com/tag/wordpress' class='tag-link-3' title='5 topics' style='font-size: 11.206106870229pt;'>Wordpress</a></div>
</div>			
			<p style="clear:both"></p>
			
		</div>

		<div id="footer-copyright">
			Copyright &copy; 2014 <a rel="author" href="https://plus.google.com/103752924219473791252" target="_blank" title="Google +">Hage Yaapa</a>
		</div>
		
		
		

	</div>
</div>

<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201405'></script>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-28435166-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>