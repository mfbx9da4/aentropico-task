window._pq=window._pq||[],_pq.push(["track","SignUp"]),angular.module("calendarDirective",[]).directive("eventCalendar",function(){var a=new Array("January"," February","March","April","May","June","July","August","September","October","November","December"),b=new Array(31,28,31,30,31,30,31,31,30,31,30,31),c=new Array("Sun","Mon","Tue","Wed","Thu","Fri","Sat");return{restrict:"A",require:"^ngModel",scope:{ngModel:"=",onClick:"&",maxDay:"="},replace:!0,controllerAs:"main",templateUrl:"views/directives/calendar.html",link:function(d,e,f){var g,h,i,j=f.maxDay||25;d.todayOrPast=function(a){return g>=a},d.validDay=function(a){return a>0&&j>=a},d.onDayClick=function(a){d.todayOrPast(a)&&d.validDay(a)&&d.onClick({day:a})},d.$watch("ngModel",function(e){e||(e=new Date);var f,k;g=e.getDate(),h=e.getMonth(),i=e.getFullYear(),d.days_in_this_month=b[h],d.monthName=a[h],d.currWeek=0;var l=new Date(i,h,1),m=new Date(l.setDate(1)).getDay();for(Math.floor((m+j)/7)-1,d.month={},d.weekDays=c,k=0,d.month[k]=[],f=0;f<l.getDay();f++)d.month[k][f]=-1*f;for(f=l.getDay(),day_counter=1;j>=day_counter;day_counter++)f%=7,0==f&&(k+=1,d.month[k]=[]),d.month[k].push(day_counter),f+=1;for(;d.month[k].length<7;)d.month[k].push(-1*day_counter);d.day=g,d.year=i})}}}),angular.module("btford.markdown",[]).directive("btfMarkdown",["$compile","$timeout",function(a,b){var c=new Showdown.converter;return{restrict:"AE",link:function(d,e,f){if(f.btfMarkdown)d.$watch(f.btfMarkdown,function(f){var g=f?c.makeHtml(f):"";g=$("<div />").append(g),g.find("pre").each(function(a,b){$(b).attr("ng-non-bindable","")});var h=a(g)(d);e.html(""),e.append(h),b(function(){$(e).find("pre code").each(function(a,b){hljs.highlightBlock(b)})})});else{var g=c.makeHtml(e.html());e.html(g)}}}}]),angular.module("auser.twitter",[]).filter("escape",function(){return window.escape}).directive("twitterBtn",["$compile","$location","$timeout",function(a,b){return{restrict:"AE",template:'<a href="https://twitter.com/share?text={{ tweet.text }}&hashtags={{ tweet.tags }}" class="btn btn-info twitter-share-button" data-url="{{ tweet.url }}" title="{{ tweet.text }}" target="_blank" data-via="{{ tweet.via }}"><i class="glyphicon glyphicon-share"></i> {{ tweet.text }}</a>',template:"",scope:{},link:function(a,c,d){var e={};e.text="25 days of Angular - "+(d.text||""),e.tags=d.hashtags||"angular,ngbook,ngnewsletter",e.url=d.url||b.absUrl(),e.via=d.via||"auser",a.tweet=e}}}]),angular.module("alAddThis",[]).directive("addthisToolbox",["$window","$timeout","$rootScope","$location",function(a,b,c,d){return{restrict:"A",replace:!0,template:'<div><!-- AddThis Button BEGIN --><div class="addthis_toolbox addthis_default_style addthis_32x32_style"><a class="addthis_button_twitter" tw:url="'+d.absUrl()+'"></a><a class="addthis_button_gmail"></a><a class="addthis_button_email"></a><a class="addthis_button_facebook" fb:like:href="'+d.absUrl()+'"></a><a class="addthis_button_google_plusone"></a></div><!-- AddThis Button END --></div>',link:function(e,f){a.addthis_share=a.addthis_share||{},a.addthis_share.title=c.title,a.addthis_share.url=d.absUrl(),a.addthis_share.email_template="simple_template",a.addthis_share.passthrough={twitter:{via:"auser"}},a.addthis_config={data_track_addressbar:!0},b(function(){addthis.init(),addthis.toolbox($(f).get(),{},{})},0)}}}]),angular.module("eventsData",[]).factory("events",["$templateCache","$q","$sce","validDay",function(a,b,c,d){var e={currentDay:1,currentData:"",getEventForDay:function(b){if(d.ok(b)){var c=a.get(b+".html");return c?(e.currentDay=b,e.currentData=c,c):void 0}}};return e}]),angular.module("eventsData").provider("todayService",function(){this.today=new Date,this.setToday=function(a){this.today=a},this.$get=function(){return this.today}}).provider("validDay",function(){this.maxDay=25,this.setMaxDays=function(a){this.maxDay=a},this.$get=["todayService",function(a){var b=a,c=b.getDate(),d=this,e={ok:function(a){return a>0&&a<=d.maxDay&&c>=a}};return e}]}),angular.module("adventApp",["ngCookies","ngResource","ngSanitize","ngRoute","ngAnimate","calendarDirective","eventsData","btford.markdown","auser.twitter","alAddThis"]).constant("config",{backend:"hello",version:"1.1"}).config(["todayServiceProvider",function(a){a.setToday(new Date(2013,11,25))}]).config(["validDayProvider",function(a){a.setMaxDays(25)}]).config(["$locationProvider",function(a){a.html5Mode(!1).hashPrefix("!")}]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl"}).when("/day/:id",{templateUrl:"views/day.html",controller:"DayCtrl"}).otherwise({redirectTo:"/"})}]).run(["$rootScope",function(a){a.title="25 days of Angular"}]),angular.module("adventApp").controller("MainCtrl",["$scope","$location","todayService","events",function(a,b,c,d){a.today=c,a.title="25 Days of Angular",a.getViewForDay=function(a){var c=d.getEventForDay(a);c&&b.path("/day/"+a)}}]),angular.module("adventApp").controller("DayCtrl",["$rootScope","$scope","$location","$routeParams","events",function(a,b,c,d,e){b.day=d.id;var f=e.getEventForDay(d.id);f||c.path("#!/");var g=f.split("\n")[0].replace(/#*/,"");a.title="25 days of Angular | "+g,b.data=e.getEventForDay(d.id)}]),angular.module("eventsData").run(["$templateCache",function(a){a.put("1.html","## The short guide to service definitions\n\nOne of the most misunderstood components of Angular that beginners often ask is about the differences between the service(), factory(), and provide() methods. This is where we'll start the twenty-five days of Angular calendar.\n\n### The Service\n\nIn Angular, services are singleton objects that are created when necessary and are never cleaned up until the end of the application life-cycle (when the browser is closed). Controllers are destroyed and cleaned up when they are no longer needed.\n\n> This is why we can't dependably use controllers to share data across our application, especially when using routing.Services are designed to be the glue between controllers, the minions of data, the slaves of functionality, the worker-bees of our application.\n\nLet's dive into creating service. Every method that we'll look at has the same method signature as it takes two arguments \n\n* name - the name of the service we're defining\n* function - the service definition function.\n\nEach one also creates the _same_ underlying object type. After they are instantiated, they all create a service and there is _no functional difference_ between the object types.\n\n### factory()\n\nArguably the easiest way to create a service is by using the factory()method.\n\nThe factory() method allows us to define a service by returning an object that contains service functions and service data. The service definition function is where we place our _injectable_ services, such as $http and $q.\n\n    angular.module('myApp.services')\n    .factory('User', function($http) { // injectables go here\n      var backendUrl = \"http://localhost:3000\";\n      var service = {\n        // our factory definition\n        user: {},\n        setName: function(newName) { \n          service.user['name'] = newName; \n        },\n        setEmail: function(newEmail) {\n          service.user['email'] = newEmail;\n        },\n        save: function() {\n          return $http.post(backendUrl + '/users', {\n            user: service.user\n          });\n        }\n      };\n      return service;\n    });\n\n#### Using the factory() in our app\n\nIt's easy to use the factory in our application as we can simply _inject_ it where we need it at run-time.\n\n    angular.module('myApp')\n    .controller('MainCtrl', function($scope, User) {\n      $scope.saveUser = User.save;\n    });\n\n#### When to use the `factory()`  method\n\n> The `factory()`  method is a great choice to use to build a factory when we just need a collection of methods and data and don't need to do anything especially complex with our service.\n\n** We cannot use the `factory()` method when we need to configure our service from the `.config()` function.**\n\n### service()\n\nThe service() method, on the other hand allows us to create a service by defining a _constructor_ function. We can use a prototypical object to define our service, instead of a raw javascript object.\n\nSimilar to the `factory()` method, we'll also set the _injectables_ in the function definition:\n\n    angular.module('myApp.services')\n    .service('User', function($http) { // injectables go here\n      var self = this; // Save reference\n      this.user = {};\n      this.backendUrl = \"http://localhost:3000\";\n      this.setName = function(newName) {\n        self.user['name'] = newName;\n      }\n      this.setEmail = function(newEmail) {\n        self.user['email'] = newEmail;\n      }\n      this.save = function() {\n        return $http.post(self.backendUrl + '/users', {\n          user: self.user\n        })\n      }\n    });\n\nFunctionally equivalent to using the factory() method, the service() method will hold on to the object created by the _constructor_ object.\n\n#### Using the service() in our app\n\nIt's easy to use the service in our application as we can simply _inject_ it where we need it at run-time.\n\n    angular.module('myApp')\n    .controller('MainCtrl', function($scope, User) {\n      $scope.saveUser = User.save;\n    });\n\n#### When to use the `service()` method\n\n> The `service()` method is great for creating services where we need a bit more control over the functionality required by our service. It's also mostly guided by preference to use `this` instead of referring to the service.\n\n** We cannot use the `service()` method when we need to configure our service from the `.config()` function.**\n\n### provide()\n\nThe lowest level way to create a service is by using the provide() method. This is the **only** way to create a service that we can configure using the `.config()` function.\n\nUnlike the previous to methods, we'll set the _injectables_ in a defined this.$get() function definition.\n\n    angular.module('myApp.services')\n    .provider('User', function() {\n      this.backendUrl = \"http://localhost:3000\";\n      this.setBackendUrl = function(newUrl) {\n        if (url) this.backendUrl = newUrl;\n      }\n      this.$get = function($http) { // injectables go here\n        var self = this;\n        var service = {\n          user: {},\n          setName: function(newName) {\n            service.user['name'] = newName;\n          },\n          setEmail: function(newEmail) {\n            service.user['email'] = newEmail;\n          },\n          save: function() {\n            return $http.post(self.backendUrl + '/users', {\n              user: service.user\n            })\n          }\n        };\n        return service;\n      }\n    });\n\n#### Using the provider() in our app\n\nIn order to configure our service, we can _inject_ the provider into our .config() function.\n\n    angular.module('myApp')\n    .config(function(UserProvider) {\n      UserProvider.setBackendUrl(\"http://myApiBackend.com/api\");\n    })\n\nWe can use the service in our app just like any other service now:\n\n    angular.module('myApp')\n    .controller('MainCtrl', function($scope, User) {\n      $scope.saveUser = User.save;\n    });\n\n#### When to use the `provider()` method\n\n> The `provider()` method is required when we want to configure our service before the app runs. For instance, if we need to configure our services to use a different back-end based upon different deployment environments (development, staging, and production).\n\n> It's the preferred method for writing services that we intend on distributing open-source as well as it allows us to configure services without needing to hard-code configuration data.\n\nThe code for this entire snippet is available [here](http://d.pr/PYhw).\n\nHope you enjoyed today's snippet. Stay tuned for tomorrow's and sign up for the newsletter for great Angular content every week.\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 1: the short guide to services\" />\n</div>"),a.put("10.html","## 25% off an entire year with Brombone\n\nThis year's first deal comes from the team at Brombone. They are offering calendar readers 25% off a year of SEO services. \n\n<a href='http://d.pr/fpEb' class='btn btn-success'>Grab the deal here</a>\n\n## AngularJS SEO, mistakes to avoid.\n\nGoogle does not run (most) JavaScript when it crawls the web, so it can't index our fat JavaScript client websites, including AngularJS pages.\n\nWe can have a headless browser -- like [PhantomJS](http://phantomjs.org/) -- open our pages, run the JavaScript, and save the loaded DOM as an HTML snapshot.\n\nWhen the Googlebot visits your site, we can serve them that snapshot instead of our normal page so that Google will see the rendered page same thing your users see without needing to run any JavaScript.\n\nRead our [post](http://www.ng-newsletter.com/posts/serious-angular-seo.html) for more detailed explanation of this process.\n\nHowever, a naive implementation of this solution isn’t good enough for most sites. \n\nIn today's snippet, we're going to look at a few key things to watch out for.\n\n### Caching snapshots\n\nFirst and foremost, we'll need to cache our snapshots in advance. If we open and run our pages in a headless browser as Googlebot requests them, we're going going to see a ton of drag in our requests and the number of problems we're opening ourselves up for is going to cause us lots issues. \n\nAt best, it will make our site appear really slow to Google, hurting our rankings. More likely, Google will request a ton of pages at once and our webserver won’t be able to launch headless browsers fast enough to keep up them. When Google comes calling, we definitely don’t want to respond with 500 errors.\n\nNow that we have a cache, we'll want to need a way to keep it up to date. When the content on a page changes, we'll need to design a way for our system to know how to update the snapshot in the cache. The specific implementation depends heavily on our architecture and business needs, but it is a question that we'll need to answer.\n\nDo we want to make it time-based? Do we want to manually clear the cache? How do we know what needs to be cleared?\n\nAlso, what happens when we make a site wide change to our site? We'll need to be able to regenerate our entire cache. This can take a long time, depending upon how many pages our app is, how long our system will take to generate snapshots, etc. When we're adding a few new pages to the cache everyday, this might not take that much power, but when we're regenerating everything, this process can take a LONG time. It can also introduce the complexities of scaling past a single machine.\n\n### Remove JavaScript from snapshots\n\nGoogle does execute some JavaScript. Sometimes things like javascript redirects or javascript content clearing can have unexpected results when left in the snapshot. Since our HTML snapshot already contains exactly what we want Google to see, we don't need to leave any javascript in the page to potentially cause problems for the search engine bot. \n\n### Design to fail\n\nIt's important that we are ready for crashes in our system. PhantomJS is great, but it has a habit of just crashing anytime it gets confused. Our solution needs to handle this gracefully, restarting PhantomJS as needed and reporting problems so we can track them down later. By designing a system that we expect to fail, we can start from the get-go to build a system designed for stability.\n\n### Special characters!!!!\n\nSpecial characters are the bane of web programming and working with your headless browser is no exception. If we have any urls with characters that have to be encoded (with those ugly percent signs), we'll need to set up a test suite against them such that the routes actually resolve. It's important that we test any two byte characters, spaces, or percent signs.\n\nFinally, if we don't want to have to deal with all of these issues ourselves, then Brombone might be a good option to check out. Reminder, they are offering calendar readers 25% off a year of SEO services. We can focus on our core products and leave the SEO hoola-hooping to them.\n\n<a href='http://d.pr/fpEb' class='btn btn-success'>Grab the deal here</a>\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 10: 25 percent off a whole year of SEO services from Brombone\" />\n</div>"),a.put("11.html",'## AngularJS with ngAnimate\n\nAngularJS 1.2 comes jam packed with animation support for common `ng` directives via ngAnimate module.\n\nTo enable animations within our application, we\'ll need to link the **angular-animate.js** JavaScript file and include **ngAnimate** as a dependency within our application. The angular-animate.js file can be downloaded from the [angularjs.org](http://www.angularjs.org) homepage or from the [code.angularjs.org CDN](http://code.angularjs.org).\n\n> It is best to stick to using **AngularJS 1.2.4 or higher** to make use of the **best animation features**.\n\n## What directives support animations?\n\nThe following directives are "animation aware" in AngularJS 1.2:\n\n- ngRepeat  (**enter**, **leave** and **move** animations)\n- ngInclude (**enter** and **leave** animations)\n- ngView    (**enter** and **leave** animations)\n- ngIf      (**enter** and **leave** animations)\n- ngSwitch  (**enter** and **leave** animations)\n- ngClass   (**addClass** and **removeClass** animations)\n- ngShow and ngHide (**addClass** and **removeClass** animations for `.ng-hide`).\n\nWe can also use animations within our own directives by using the `$animate` service within our link functions.\n\nWhat\'s nice about ngAnimate is that is fully isolates animations from our directive and controller code. Animations can be easily reused across other applications by just including the CSS and/or JS animation code.\n\n## CSS3 Transitions & Keyframe Animations\n\n`ngAnimate` supports native CSS3 transitions and keyframe animations right out of the box. With AngularJS 1.2, all we need to do is create a few compound CSS classes in our CSS code which are tied to a single base CSS class and then reference that CSS class inside of our HTML template code. \n\nThe steps we recommend are:\n\n* think of an animation name (something like "slide")\n* make a CSS class from that (something like ".slide-animation") \n* setup the styles for each of the events that we wish to animate (ngInclude for example will contain `enter` and `leave` events, therefore we\'ll need to provide animation styles for the `.slide-animation.ng-enter` and `.slide-animation.ng-leave` CSS classes)\n\nPretty simple!\n\n### Transitions\n\n`ngAnimate` works very nicely with CSS3 Transitions. All we need to do is provide **starting** and **ending** CSS classes.  The starting CSS class (known as the setup class) is where we place the starting CSS styles that we wish to have when the animation starts. The ending CSS class (known as the active class) is where we\'ll place the styles that we expect our animation to animate towards.\n\nFor the example below, let\'s setup animations with `ngRepeat`.\n\nClick [here](http://j.mp/18BHKlE) to view this demo live!\n\n#### What does our code look like?\n\n```html\n<input placeholder="Filter Repeat Items..." ng-model="f" /> \n<div ng-repeat="item in items | filter:f" class="repeat-animation">\n  {{ item }}\n</div>\n```\n\n```css\n/*\n * ngRepeat triggers three animation events: enter, leave and move.\n */\n.repeat-animation.ng-enter,\n.repeat-animation.ng-leave,\n.repeat-animation.ng-move {\n  -webkit-transition:0.5s linear all;\n  transition:0.5s linear all;\n}\n\n/* ending enter and move styling\n   (this is what the element will animate from */\n.repeat-animation.ng-enter,\n.repeat-animation.ng-move { opacity:0; }\n\n/* ending enter and move styling\n   (this is what the element will animate towards */\n.repeat-animation.ng-enter.ng-enter-active,\n.repeat-animation.ng-move.ng-move-active { opacity:1; }\n\n/* starting leave animation */\n.repeat-animation.ng-leave { opacity:1; }\n\n/* ending leave animation */\n.repeat-animation.ng-leave.ng-leave-active { opacity:0; }\n```\n\n(click [here](http://j.mp/18BHKlE) to and or edit the demo code in a live editor on plnkr.co).\n\n### Keyframe Animations\n\nKeyframe animations triggered by ngAnimate work just about the same as with transitions, however, **only the setup class is used**. To make this work, we\'ll just reference the keyframe animation in our starting CSS class (the setup class).\n\nFor the example below, let\'s setup animations with `ngView`.\n\nClick [here](http://j.mp/1doogkq) to view this demo live!\n\n#### What does our code look like?\n\n```html\n<div class="view-container">\n  <div ng-view class="view-animation"></div>\n</div>\n```\n\n```css\n/*\n * ngView triggers three animation events: enter, leave and move.\n */\n.view-container {\n  height:500px;\n  position:relative;\n}\n\n.view-animation.ng-enter {\n  -webkit-animation: enter_animation 1s; \n  animation: enter_animation 1s; \n\n  /* \n   * ng-animate has a slight starting delay for optimization purposes\n   * so if we see a flicker effect then we\'ll need to put some extra\n   * styles to "shim" the animation.\n   */\n  left:100%;\n}\n\n.view-animation.ng-leave {\n  -webkit-animation: leave_animation 1s; \n  animation: leave_animation 1s; \n}\n\n.view-animation.ng-leave,\n.view-animation.ng-enter {\n  position:absolute;\n  top:0;\n  width:100%; \n}\n\n/*\n * the animation below will move enter in the view from the right side of the screen\n * and move the current (expired) view from the center of the screen to the left edge\n */\n@keyframes enter_animation {\n  from { left:100%; }\n  to { left:0; }\n}\n\n@-webkit-keyframes enter_animation {\n  from { left:100%; }\n  to { left:0; }\n}\n\n@keyframes leave_animation {\n  from { left:0; }\n  to { left:-100%; }\n}\n\n@-webkit-keyframes leave_animation {\n  from { left:0; }\n  to { left:-100%; }\n}\n```\n\n(click [here](http://j.mp/1doogkq) to and or edit the demo code in a live editor on plnkr.co).\n\nBoth CSS3 Transitions and Keyframe Animations with ngAnimate are automatically canceled and cleaned up if a new animation commences when an existing animation is midway in its own animation.\n\n## JavaScript Animations\n\nJavaScript animations are also supported and they also work by referencing a CSS class within the HTML template.\n\nTo define our own JS animations, just use the `.animation()` factory method within our ngModule code.\n\nFor the example below, let\'s setup animations with `ngShow` using the amazing [http://www.greensock.com/](greensock.js) animation library.\n\nClick [here](http://j.mp/1d7z9qy) to view this demo live!\n\n#### What does our code look like?\n\n```html\n//be sure to link jquery and greensock.js to our application\n<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>\n<script src="http://cdnjs.cloudflare.com/ajax/libs/gsap/1.11.2/TweenMax.min.js"></script>\n\n//and here\'s our ng-show animation\n<button ng-click="showMe = !showMe">Toggle Show Hide</button>\n<div class="big-box show-hide-animation" ng-show="showMe">\n  I am visible\n</div>\n```\n\n```javascript\n'+"var myModule = angular.module('myApp', ['ngAnimate'])\n\nmyModule.animation('.show-hide-animation', function() {\n  /* \n   * the reason why we're using beforeAddClass and removeClass is because we're working\n   * around the .ng-hide class (which is added when ng-show evaluates to false). The\n   * .ng-hide class sets display:none!important and we want to apply the animation only\n   * when the class is removed (removeClass) or before it's added (beforeAddClass).\n   */\n  return {\n\n    /* \n     * make sure to call the done() function when the animation is complete.\n     */\n    beforeAddClass : function(element, className, done) {\n      if(className == 'ng-hide') {\n        TweenMax.to(element, 1, { height: 0, onComplete: done });\n\n        //this function is called when the animation ends or is cancelled\n        return function() {\n          //remove the style so that the CSS inheritance kicks in\n          element[0].style.height = '';\n        }\n      } else {\n        done();\n      }\n    },\n\n    /* \n     * make sure to call the done() function when the animation is complete.\n     */\n    removeClass : function(element, className, done) {\n      if(className == 'ng-hide') {\n        //set the height back to zero to make the animation work properly\n        var height = element.height();\n        element.css('height', 0);\n\n        TweenMax.to(element, 1, { height: height, onComplete: done });\n\n        //this function is called when the animation ends or is cancelled\n        return function() {\n          //remove the style so that the CSS inheritance kicks in\n          element[0].style.height = '';\n        }\n      } else {\n        done();\n      }\n    }\n  }\n});\n```\n\n(click [here](http://j.mp/1d7z9qy) to and or edit the demo code in a live editor on plnkr.co).\n\nIn addition to `beforeAddClass` and `removeClass`, we can also use `beforeRemoveClass` and `addClass` as well. For structural animations, such as ngRepeat, ngView, ngIf, ngSwitch or ngInclude use, we can use `enter`, `leave` and `move`.\n\nIt's up to us to determine how to perform animations within JS animations. Just be sure to call done() to close off the animation (even if we're skipping an animation based on the className ... Otherwise the animation would never close).\n\n## Triggering Animations inside of our own Directives\n\nWe can easily trigger animations within our own directives by calling the animation member functions on the `$animate` service.\n\nFor the example below, let's setup animations to trigger based of a click event.\n\nClick [here](http://j.mp/1bCiNrA) to view this demo live!\n\n#### What does our code look like?\n\n```javascript\nmyModule.directive('expandingZone', ['$animate', function($animate) {\n  return function(scope, element, attrs) {\n    var clickClassName = 'on';\n    element.on('click', function(event) {\n      event.preventDefault(); \n      element.hasClass(clickClassName) ?\n        $animate.removeClass(element, clickClassName) :\n        $animate.addClass(element, clickClassName);\n    });\n  };\n}]);\n```\n\nAnd our HTML code looks like so:\n\n```html\n<div expanding-zone class=\"horizontal-animation\">Click me!</div>\n```\n\nOur CSS3 Transition code can be created easily by referencing the `.horizontal-animation` CSS class.  Notice that our CSS code below can work even without ngAnimate being included since it follows a traditional CSS class transition. The animation will snap back and forth when the `.on` class is added or removed.\n\n```css\n.horizontal-animation {\n  -webkit-transition: 0.5s linear all;\n  transition: 0.5s linear all;\n  width:100px;\n}\n.horizontal-animation.on {\n  width:500px;\n}\n```\n\n(click [here](http://j.mp/1bCiNrA) to and or edit the demo code in a live editor on plnkr.co).\n\n## Learn more! Become a Pro\n\nTo fully master ngAnimate and to learn more tricks with other libraries, be sure to visit [www.yearofmoo.com](http://www.yearofmoo.com). Yearofmoo is a popular programming blog which has a ton of useful AngularJS material ranging from animation to testing to SEO.\n\nFor more information, check out [http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html](http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html) and [ng-newsletter's animation post](http://www.ng-newsletter.com/posts/angular-animation.html).\n\nThis article was written by Matias Niemelä (aka [@yearofmoo](http://twitter.com/yearofmoo)) of [www.yearofmoo.com](http://www.yearofmoo.com) and edited by Ari Lerner (aka [@auser](http://twitter.com/auser)).\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 11: Become an angular animation pro\" />\n</div>"),a.put("12.html","## HTML5 api: geolocation\n\nWith Angular, it's trivial to use HTML5 APIS given to us by the browser. In this snippet, we're going to walk through how to get a popular one from the browser: the `geolocation`.\n\nWhen using an HTML5 API, we'll always need to handle the case when someone is visiting our page from a non-html browser that doesn't implement the same HTML5 apis. We'll deal with this shortly. First, let's look look at how to grab the geolocation on an HTML5 compliant browser (if you're not, you should be using Chrome to visit this page for the best experience).\n\n### Are we compatible?\n\nIn order to determine if a browser has the ability to fetch a geolocation, we'll need to test for the existence of the geolocation object on the `navigator` object on the `window` global object:\n\n    if (window.navigator && window.navigator.geolocation) {\n      // Awesome, HTML5 geolocation is supported\n    } else {\n      // HTML5 geolocation is not supported for this browser yet\n    }\n\n<div ng-controller='GeoLocationController'>\n  <h2 ng-if=\"geoSupport()\" class=\"celebrate\">Your browser supports geolocation, success!</h2>\n  <h2 ng-if=\"!geoSupport()\" class=\"sad\">Your browser does not support geolocation :( Try a different browser (like Chrome)</h2>\n</div>\n<small>If you see a green box above, your browser supports geolocation. If you see a red one, then try a different browser.</small>\n\nWith this simple check, we're ready to get the geolocation for our browser. The `geolocation.getCurrentPosition()` method takes a single argument: a callback function to run with the position. Because the `getCurrentPosition()` is asynchronous, we have to pass in a callback function to actually fetch the position.\n\n    window.navigator.geolocation.getCurrentPosition(function(position) {\n      // position is a JSON object that holds the lat and long\n      // if the call to getCurrentPosition() is successful.\n    });\n\n<div ng-controller='GeoLocationController'>\n  <div ng-if=\"geoSupport()\">\n    <a ng-click=\"getLocation()\" class=\"btn btn-primary\">Get location</a>\n    <span ng-bind-html=\"pos\"></span>\n  </div>\n  <div ng-if=\"!geoSupport()\"></div>\n</div>\n\nWe can wrap this into a controller function, like so so that we can attach the results to the view (as we've done in the example above):\n\n    $scope.getLocation = function() {\n      $window.navigator.geolocation.getCurrentPosition(function(pos) {\n        $scope.pos = pos;\n        $scope.$digest();\n      });\n    }\n\n> Note that we had to use `$scope.$digest()` or `$scope.$apply()`. Due to the fact that the `getCurrentPosition()` function is asynchronous and outside of the scope of our angular app, we'll need to let our app _know_ that something changed and we'll have to invoke a digest loop. We use `$digest()` above because we don't need to trigger a full digest loop, just one on the current scope.\n\n### Handling errors\n\nSometimes the geolocation api does not come back successfully. It may be that the user chose not to allow our app access to their geolocation or that perhaps the GPS unit did not return in time. We need to be able to handle these failures as they will happen. In order to handle them, the `getCurrentPosition()` allows us to pass a second error handling function that will be called with the error:\n\n    $scope.getLocation = function() {\n      $window.navigator.geolocation.getCurrentPosition(function(pos) {\n        $scope.pos = pos;\n        $scope.$digest();\n      }, function(err) {\n          // An error has occurred with an error code\n          // If the err.code is:\n          //    * 0 - the error is unknown\n          //    * 1 - permission was denied to the location api\n          //    * 2 - position is not available \n          //    * 3 - timeout\n      });\n    }\n\n### Tracking location\n\nWith the `getCurrentPosition()` function, it will only ever get executed once. If we want to continuously track the user's position, we'll need to use a different function on the `geolocation` object: `watchPosition()`. The `watchPosition()` method will call the callback function **anytime the position changes**.\n\n    $scope.watchPosition = function(cb) {\n      $window.navigator.geolocation.watchPosition(cb);\n    }\n    $scope.positionChanged = function(pos) {\n      console.log(\"called positionChanged\");\n      $scope.$digest();\n    }\n\nWhere we called the `watchPosition()` method with the `positionChanged` function defined on our scope like:\n\n    <a ng-click=\"watchPosition(positionChanged)\" class=\"btn btn-primary\">Watch position</a>\n\n<div ng-controller='GeoLocationController'>\n  <div ng-if=\"geoSupport()\">\n    <a ng-click=\"watchPosition(positionChanged)\" class=\"btn btn-primary\">Watch position</a>\n    <span ng-bind-html=\"watchedPos\"></span>\n  </div>\n  <div ng-if=\"!geoSupport()\"></div>\n</div>\n\n### The Angular way\n\nOkay, this is all well and great, but it's not very angular. Instead of placing all of our functions on top of our `$scope`, it's better to nest them on a service that can be called from the `$scope`. We can basically copy and paste the code we already have written above into our new service with only a few minor modifications to account for using promises and events to communicate state. We'll include comments inline to explain the code:\n\n    .factory('Geolocation', function($q, $window, $rootScope) {\n      // Default to false\n      var geoCapable = false;\n      // Set geoCapable to true if geolocation is supported\n      if ($window.navigator && $window.navigator.geolocation) geoCapable = true;\n      \n      // If we're not geoCapable, send a message to the rest of\n      // the angular app so we can catch it from the rest of \n      // the application.\n      if (!geoCapable) {\n        $rootScope.broadcast('geo:error', 'geolocation not supported');\n      }\n      var service =  {\n        // Building our service API with the two functions:\n        //  * getPosition()\n        //  * watchPosition()\n        getPosition: function() {\n          // We'll return a promise for this function\n          var d = $q.defer();\n          // if we're not able to handle geolocation, immediately\n          // reject the promise and return\n          if (!geoCapable) return d.reject();\n          // Call the getCurrentPosition function on the \n          // geolocation object\n          $window.navigator.geolocation.getCurrentPosition(function(pos) {\n            // Resolve the promise as we did above\n            d.resolve(pos);\n            $rootScope.$apply();\n          }, function(err) { \n            // If there was an error, send an event back to the\n            // rest of the app and reject the promise\n            $rootScope.$broadcast('geo:error', err);\n            d.reject(pos); \n            $rootScope.$apply();\n          })\n          // return the promise\n          return d.promise;\n        },\n        watchPosition: function(cb) {\n          // First, if we aren't geoCapable then immediately return\n          // and potentially call a potential callback if it's given\n          if (!geoCapable) {\n            $rootScope.$broadcast('geo:error', 'Geo not supported');\n            if (cb) cb('Geo not supported');\n            return;\n          }\n          // Call the watchPosition() function on the geolocation\n          $window.navigator.geolocation.watchPosition(function(pos) {\n            // Anytime the position changes, invoke an event so \n            // we can use the event to communicate across the app.\n            $rootScope.$broadcast('geo:positionChanged', pos);\n            // If a callback is given, then run the callback\n            if (cb) {\n              cb(null, pos);\n              $rootScope.$apply();\n            }\n          });\n        }\n      }\n\n      return service;\n    })\n\nWe can use this factory by calling the API on our scope. Notice that we provide multiple ways to use the results on our scope. This way we can pass in a function OR we can simply listen for events on our scopes.\n\n    angular.module('myApp')\n    .controller('GeoController', function($scope, Geolocation) {\n      $scope.getPosition = function() {\n        Geolocation.getPosition()\n        .then(function(pos) {\n          $scope.position = pos;\n        })\n      }\n    });\n\n<div ng-controller='GeoLocationController'>\n  <div ng-if=\"geoSupport()\">\n"+'    <a ng-click="getPosition()" class="btn btn-primary">Get position from the service</a>\n    <span ng-bind-html="newPos"></span>\n  </div>\n  <div ng-if="!geoSupport()"></div>\n</div>\n\n<div class="article">\n  <div twitter-btn \n      text="Day 12: Handling geolocation with angular" />\n</div>'),a.put("13.html","## HTML5 api: camera\n\nOn [day 12](#/day/12), we looked at how to grab the geolocation using the HTML5 geolocation API. In this snippet, we're going to check out how to grab camera controls through the HTML5 api with Angular.\n\nThere is quite a lot of history surrounding the camera API. Although we won't go through it here as it's outside of the scope of this snippet, but it's important to note that because of the not-yet-solidified camera API and we'll need to work around it. We'll also then dive head-first into using it with Angular. Let's get started.\n\n### Are we compatible?\n\nIn order to check if our user's browser implements the camera API we'll need to check to see if it implements any of the _known_ camera API functions. We can iterate through all of the different options and check if the browser implements them.\n\n    var getUserMedia = function() {\n      if (navigator.getUserMedia) return navigator.getUserMedia;\n      else if (navigator.webkitGetUserMedia) return navigator.webkitGetUserMedia;\n      else if (navigator.mozGetUserMedia) return navigator.mozGetUserMedia;\n      else if (navigator.msGetUserMedia) return navigator.msGetUserMedia;\n      else return undefined;\n    }\n\n<div ng-controller=\"CameraController\">\n  <h2 ng-if=\"hasUserMedia\" class=\"celebrate\">Your browser supports a version of the camera api, success!</h2>\n  <h2 ng-if=\"!hasUserMedia\" class=\"sad\">Your browser does not support the camera API :( Try a different browser (like Chrome)</h2>\n</div>\n\n> We can also use a tool like [Modernizr](http://modernizr.com/) to gain access to the `getUserMedia` api.\n\nOnce we've determined if the camera API is available, we can request access to it from the browser. To request access, we'll need to request which type of access we would like. There are two types of available input we can take:\n\n* audio\n* video\n\nThe first argument of the `userMedia` object is the JSON object of which media input we are interested. The second two are the success callback function and the error callback function that get called with their respective place when the method succeeds or fails.\n\n    getUserMedia({\n      audio: false,\n      video: true\n    }, function success(stream) {\n      // We now have access to the stream\n    }, function failure(err) {\n      // It failed for some reason\n    });\n\nOnce one of these callbacks return, we'll have access to our media api.\n\n### Wrap it into a service\n\nBefore we get into actually using the API, let's wrap this component in a service. This will make it incredibly easy to test later on (not covered in _this_ snippet). It will also abstract away any dealings we'll need to do with the `userMedia` object and is quite simple:\n\n    angular.module('myApp')\n    .factory('CameraService', function($window) {\n      var hasUserMedia = function() {\n        return !!getUserMedia();\n      }\n\n      var getUserMedia = function() {\n        navigator.getUserMedia = ($window.navigator.getUserMedia || \n                                  $window.navigator.webkitGetUserMedia ||\n                                  $window.navigator.mozGetUserMedia || \n                                  $window.navigator.msGetUserMedia);\n        return navigator.getUserMedia;\n      }\n\n      return {\n        hasUserMedia: hasUserMedia(),\n        getUserMedia: getUserMedia\n      }\n    })\n\nWith this service, we can simply request access to the user media inside of our other angular objects. For instance:\n    \n    angular.module('myApp')\n    .controller('CameraController', function($scope, CameraService) {\n      $scope.hasUserMedia = CameraService.hasUserMedia;\n    })\n\n<div ng-controller=\"CameraController\">\n  <h2 ng-if=\"hasUserMedia\" class=\"celebrate\">Your browser supports a version of the camera api, success!</h2>\n  <div ng-if=\"!hasUserMedia\" class=\"sad\">Your browser does not support the camera API :( Try a different browser (like Chrome)</div>\n</div>\n\n### Setting up the directive\n\nNow that we have a hold of the `userMedia` object, we can request access to it. Since we're going to place this element on the page, it's a good idea to write it as a directive. The non-camera-specific directive code:\n\n    angular.module('myApp')\n    .directive('camera', function(CameraService) {\n      return {\n        restrict: 'EA',\n        replace: true,\n        transclude: true,\n        scope: {},\n        template: '<div class=\"camera\"><video class=\"camera\" autoplay=\"\" /><div ng-transclude></div></div>',\n        link: function(scope, ele, attrs) {\n          var w = attrs.width || 320,\n              h = attrs.height || 200;\n\n          if (!CameraService.hasUserMedia) return;\n          var userMedia = CameraService.getUserMedia(),\n              videoElement = document.querySelector('video');\n          // We'll be placing our interaction inside of here\n        }\n      }\n    });\n\n### Using the camera API\n\nWe can now request access to the camera inside of our link function in the directive. This simply means that we'll set up the two callback functions that will be called from the `getUserMedia()` method call and then make the request for permission:\n    \n    // Inside the link function above\n    // If the stream works\n    var onSuccess = function(stream) {\n      if (navigator.mozGetUserMedia) {\n        videoElement.mozSrcObject = stream;\n      } else {\n        var vendorURL = window.URL || window.webkitURL;\n        videoElement.src = window.URL.createObjectURL(stream);\n      }\n      // Just to make sure it autoplays\n      videoElement.play();\n    }\n    // If there is an error\n    var onFailure = function(err) {\n      console.error(err);\n    }\n    // Make the request for the media\n    navigator.getUserMedia({\n      video: {\n        mandatory: {\n          maxHeight: h,\n          maxWidth: w\n        }\n      }, \n      audio: true\n    }, onSuccess, onFailure);\n\n    scope.w = w;\n    scope.h = h;\n\nOnce we've asked permission, the video element will get a src url and start playing.\n\n<div ng-controller=\"CameraController\">\n  <div ng-if=\"hasUserMedia\">\n    <a class=\"btn btn-info\" ng-click=\"enabled=!enabled\">Demo</a>\n    <camera ng-if=\"enabled\"></camera>\n  </div>\n  <div ng-if=\"!hasUserMedia\" class=\"sad\">Your browser does not support the camera API :( Try a different browser (like Chrome)</div>\n</div>\n\n### Extending the directive\n\nThis directive is pretty simple and reasonably so. However, what if we want to make a call to say, create a snapshot of the current frame. For instance, to allow our users to take a photo of themselves for a profile photo. This is pretty easy to do as well. We'll simply add a function on our `scope` that will handle taking the photo for us.\n\nNote, that we will create a way for us to extend the directive with new controls, each we'll create in the similar fashion. First, to implement this pattern, we'll need to add a controller to our parent directive (`camera`):\n    \n    // scope: {},\n    controller: function($scope, $q, $timeout) {\n      this.takeSnapshot = function() {\n        var canvas  = document.querySelector('canvas'),\n            ctx     = canvas.getContext('2d'),\n            videoElement = document.querySelector('video'),\n            d       = $q.defer();\n\n        canvas.width = $scope.w;\n        canvas.height = $scope.h;\n\n        $timeout(function() {\n          ctx.fillRect(0, 0, $scope.w, $scope.h);\n          ctx.drawImage(videoElement, 0, 0, $scope.w, $scope.h);\n          d.resolve(canvas.toDataURL());\n        }, 0);\n        return d.promise;\n      }\n    },\n    // ...\n\nNow we can safely create camera controls with this parent DOM element. For instance, the snapshot controller:\n\n    .directive('cameraControlSnapshot', function() {\n      return {\n        restrict: 'EA',\n        require: '^camera',\n        scope: true,\n        template: '<a class=\"btn btn-info\" ng-click=\"takeSnapshot()\">Take snapshot</a>',\n        link: function(scope, ele, attrs, cameraCtrl) {\n          scope.takeSnapshot = function() {\n            cameraCtrl.takeSnapshot()\n            .then(function(image) {\n              // data image here\n            });\n          }\n        }\n      }\n    })\n\nThis will need to placed inside the camera, like so:\n\n    <camera>\n      <camera-control-snapshot></camera-control-snapshot>\n    </camera>\n\n<div ng-controller=\"CameraController\">\n  <div ng-if=\"hasUserMedia\">\n"+'    <a class="btn btn-info" ng-click="enabled=!enabled">Demo</a>\n    <camera ng-if="enabled" onSnapshot=\'snapshotTaken()\'>\n      <camera-control-snapshot></camera-control-snapshot>\n    </camera>\n  </div>\n  <div ng-if="!hasUserMedia" class="sad">Your browser does not support the camera API :( Try a different browser (like Chrome)</div>\n</div>\n\n<div class="article">\n  <div twitter-btn \n      text="Day 13: Handling the camera with angular" />\n</div>'),a.put("14.html","## Good deals -- Angular and Groupon\n\nIn today's snippet, we're looking at how to connect our application to the great deals offered by the Groupon API.\n\nThe Groupon API requires a an `api_key` to authenticate the requesting user. Luckily, getting a Groupon `api_key` is really easy to do.\n\nHead over to the Groupon API docs page at [http://www.groupon.com/pages/api](http://www.groupon.com/pages/api) and click on the giant _Get My Api Key_ button. \n\nAfter we sign up, we get our API key. Let's hold on to this key for the time being.\n\n### Providing the API\n\nAnytime that we are building a service that we'll want to configure, for example with an API key we'll want to use the `.provider()` function to create a service. This will allow us to craft a service that holds on to our key for future requests.\n\nWe'll write the service to be able to be configured with an api key. This can be accomplished like so:\n\n    angular.module('alGroupon', [])\n    .provider('Groupon', function() {\n      // hold on to our generic variables\n      var apiKey = '',\n          baseUrl = '//api.groupon.com/v2';\n\n      // A function to set the api key\n      this.setApiKey = function(key) {\n        apiKey = key || apiKey;\n      }\n\n      this.$get = [function() {\n        // Service definition\n      }]\n    });\n\nIn our app, we'll use this module by setting it as a dependency and then configuring our service inside of a `.config()` function. For example:\n\n    angular.module('myApp', ['alGroupon'])\n    .config(function(GrouponProvider) {\n      GrouponProvider\n        .setApiKey('XXXXXXXXXXXXXXXXXXX');\n    })\n\n### Defining the service\n\nNow we haven't actually created any functionality for the Groupon service. Let's go ahead and create a function that will find some of the latest deals.\n\nThe API method to get the latest deals (can be found in the docs page) is at the route `/deals.json`. Luckily for us, the Groupon API supports JSONP fetching which allows us to fetch the deals without needing to concern ourselves with CORS.\n\nInside of our requests, we'll need to pass in two parameters for each one of our requests:\n\n* callback\n* client_id \n\nAs we have these already available to us in our service, we can create a small helper function that will create the request parameters we'll eventually use to make the service request:\n\n    // The service definition\n    this.$get = ['$q', '$http', \n      function($q, $http) {\n        var prepareRequest = function(conf) {\n          // Ensure we have a config option\n          conf = conf || {}\n          // Set the callback and the client_id\n          // in the config object\n          conf['callback'] = 'JSON_CALLBACK';\n          conf['client_id'] = api_key\n          return conf;\n        }\n        // ...\n    }]\n\nWith that set, let's create the function that gets some deals. This simply is a function that we can set up with the standard `$http` request:\n\n    this.$get = ['$q', '$http', \n      function($q, $http) {\n        // ...\n        var service = {\n          getDeals: function(conf) {\n            var d = $q.defer();\n            conf = prepareRequest(conf);\n            // Execute the request in the background\n            $http({\n              method: 'JSONP',\n              url: baseUrl + '/deals.json',\n              params: conf\n            }).success(function(data) {\n              d.resolve(data.deals);\n            }).error(function(reason) {\n              d.reject(reason);\n            })\n            return d.promise;\n          }\n        }\n        return service;\n    }]\n\n> We're creating a custom promise in this example. Although this isn't necessary, it allows us to pass back custom data. In here, we're passing back not just data, but `data.deals`.\n\nNow, we can simply inject this into our controller and call `getDeals` on the service as we would any other service.\n\n    angular.module('myApp', ['alGroupon'])\n    .controller('GrouponController', \n      function($scope, Groupon) {\n        $scope.getDeals = function() {\n          Groupon.getDeals()\n          .then(function(deals) {\n            $scope.deals = deals;\n          });\n        }\n    });\n\n<div ng-controller='GrouponExampleController'>\n"+'  <a ng-click="getDeals()" class="btn btn-warning">Get deals</a>\n  <div ng-show="showing">\n    <a ng-click="showing=!showing" class="btn btn-primary">Hide</a>\n    <span ng-bind-html="deals"></span>\n  </div>\n</div>\n\nNotice in our function we allow the user pass in configuration for the requests. We can use this configuration object to customize our request to the Groupon API.\n\nThat\'s it. Connecting with Groupon is that easy with our configurable service. \n\n> The Groupon API documentation can be found [here](http://www.groupon.com/pages/api).\n\n<div class="article">\n  <div twitter-btn \n      text="Day 14: Deals for everyone with the Groupon API" />\n</div>'),a.put("15.html",'## Optimizing Angular: the view (part 2)\n\nIn today\'s snippet, we\'re going to continue what we started looking at on [day 7](#/day/7) with optimizing the view with Angular.\n\nIt\'s relatively well-known that the Angular event system can handle approximately 2000 watches on any given page for a desktop browser. Although this number has been somewhat arbitrarily cited by the Angular team and others, it holds true with our experience as well.\n\n### What\'s a watch\n\n Before we can talk about how to optimize the numbers of watches in the view, it\'s a good idea to define what we mean when we say _watch_.\n\nAngular sets up these constructs called _watches_ which monitor the changes to interesting data in an angular application. This _interesting data_ is specified by our app by showing elements on-screen using directives or the `$scope` from inside of a controller using the `{{ }}` template tags.\n\nThe following creates two watches, one for the input and one for the output:\n\n    <div>\n      Enter your name: <input type="text" ng-model="name" />\n      <h3>Hello {{ name }}</h3>\n    </div>\n\n<h4>See it</h4>\n<div>\n  Enter your name: <input type="text" ng-model="name" />\n  <h3>Hello {{ name }}</h3>\n</div>\n\nFor instance, anytime that we set up a list that uses `ng-repeat` with a bunch of components that may or may not change. If we set up a binding between the front-end and the backend, we create at minimum 1 watch. If we loop over a list while we create that, that\'s at least `n` watches. When we start setting up multiple bindings for each iteration, that\'s n*n watches. \n\n### Limiting the watches\n\nThere are a few strategies that we can take to limit the number of watches on a page. For this snippet, we\'ll talk about the `bindonce` library.\n\nWhenever we\'re using static information, information that we don\'t expect to change, it\'s inefficient to keep a watcher around to watch data that will never change. \n\nFor instance, when we get a list of our user\'s Facebook friends we don\'t expect their names to change. We\'ll look at this data as _static_ information.\n\nRather than creating a watch for every one of our facebook friend\'s names, we can tell Angular to only create a single watch to watch the list of friends to repeat over using the `bindonce` library.\n\nThis code creates a 3 watchers for every friend of ours. In a list of 20 friends, that\'s 60 watchers in this code alone:\n\n    <ul>\n      <li ng-repeat="friend in friends">\n        <a ng-href="friend.link">\n          <h1 ng-bind="friend.name">\n          <h4 ng-bind="friend.birthday">\n          </h4>\n        </a>\n      </li>\n    </ul>\n\n#### Installation\n\nTo install the `bindonce` library, we can use `bower` to download it:\n\n    $ bower install angular-bindonce --save\n\nOr we can grab it from the repo at [https://github.com/Pasvaz/bindonce](https://github.com/Pasvaz/bindonce). Either way, we\'ll need to include the file in our HTML and reference it as a module in our app\'s dependency module array.\n\n    angular.module(\'app\', [\n      \'pasvaz.bindonce\'\n    ])\n\nUsing `bindonce`, we can tell angular to watch data while it\'s unresolved and as soon as it resolves we can set it to remove the watcher. The following code only resolves 1 watcher for the entire loop:\n\n    <ul>\n      <li bindonce\n        ng-repeat="friend in friends">\n        <a bo-href="friend.link">\n          <h1 bo-text="friend.name">\n          <h4 bo-text="friend.birthday">\n          </h4>\n        </a>\n      </li>\n    </ul>\n\n### Use simple watches\n\nAnother approach to optimize the watches on our view is to keep them as simple as possible. The `$digest` cycle will run watches at a minimum of 2 times per cycle, so the simpler the `$watch` function is, the faster it will run.\n\nFor deeper look into other optimizations, check out the optimization chapter in [ng-book.com](http://ng-book.com).\n\n<div class="article">\n  <div twitter-btn \n      text="Day 15: Optimizing the view part 2" />\n</div>'),a.put("16.html",'## Announcing AngularFire v0.5.0\n\nFeatured on the [AngularJS home page](http://angularjs.org/), [Firebase](https://www.firebase.com/) is quickly becoming the standard for adding a backend to Angular applications. Many applications are using [AngularFire](https://github.com/firebase/angularfire), Firebase’s official bindings for Angular, to create awesome realtime web apps with the two technologies. Since launching AngularFire, the Firebase team has gathered a lot of feedback from the community and is excited to announce AngularFire v0.5.0 today! \n\nNew features and fixes with the update include:\n\n* Consolidation of the `angularFire` and `angularFireCollection` services into a single, simpler and mroe intuitive service named `$firebase`\n* Easier integration with your own custom services\n* Tons of performance optimizations, particularly for large lists of data\n* Improved documentation and an updated tutorial on [angularfire.com](http://angularfire.com)\n\n### Getting Started with AngularFire\n\nWe can start using AngularFire in four easy steps! \n\n#### 1. Sign up and create our first Firebase\n\nTo start writing data to Firebase, sign up for a free account and we\'ll create our first Firebase. The name we choose for the Firebase will be part of the URL you use to reference our Firebase data. For example: \n\n`https://<my-firebase>.firebaseio.com/`\n\nThe AngularFire bindings lets us associate a Firebase URL with a model or collection of models, which will be kept in sync across all clients currently using our app.\n\n#### 2. Include the Firebase and AngularFire libraries\n\nUsing AngularFire is as simple as including two JavaScript files in our HTML file, one for Firebase and another for AngularFire. \n\n    <script src="https://cdn.firebase.com/v0/firebase.js"></script>\n    <script src="https://cdn.firebase.com/libs/angularfire/0.5.0-rc1/angularfire.js"></script>\n\n#### 3. Add Firebase as a dependency of our app module\n\n    var myapp = angular\n            .module("myapp", ["firebase"]);\n\n#### 4. Bind a model to a Firebase URL in our controller\n\nBy declaring Firebase as a dependency, we now have access to the `$firebase` service, which we can specify as a dependency in our controllers and services. \n\n    angular.module(\'myapp\')\n    .controller("MyController", \n      ["$scope", "$firebase",\n        function($scope, $firebase) {\n          // Define controller here\n        }\n    ]);\n\nThe `$firebase` service takes a single argument: a Firebase reference. The object returned by `$firebase` will automatically be kept in sync with the remote Firebase data.\n\nFor example, the following code synchronizes the `$scope.items` model with your specified Firebase reference:\n\n    myapp.controller("MyController", ["$scope", "$firebase",\n      function($scope, $firebase) {\n        $scope.items = $firebase(new Firebase(URL));\n      }\n    ]);\n\nNow we\'re ready to synchronize our Angular models with Firebase! To write data to Firebase, we\'ll simply use one of the methods prefixed with `$` on the object, such as `$add` or `$remove`:\n\n    myapp.controller("MyController", \n      ["$scope", "$firebase",\n        function($scope, $firebase) {\n          $scope.items = $firebase(new Firebase(URL));\n          $scope.addItem = function(item) {\n            $scope.items.$add(item);\n          }\n        }\n    ]);\n\nFor more details, check out the [updated documentation](http://angularfire.com/documentation.html). \n\nAfter you’ve had a chance to try out the improved AngularFire library, send in your feedback by [submitting a pull request](https://github.com/firebase/angularfire) or posting a question on the [Firebase + Angular Google Group](https://groups.google.com/forum/#!forum/firebase-angular). \n\n<div class="article">\n  <div twitter-btn \n      text="Day 16: Announcing AngularFire v0.5.0" />\n</div>'),a.put("17.html","## Pushy Angular\n\nReal-time with Angular is a topic that's growing to be an increasingly important in today's fast-moving pace. On [Day 9](#/day/9), we looked at how to handle real-time presence with Firebase. \n\nPusher is especially good for generating real-time data that don't necessarily need custom storage. In this snippet, we're going to build a small dashboard for a server running a tiny stats collection process that runs every 10 seconds.\n\n<div ng-controller='StatsController' class='post17'>\n  <div class=\"info-box\">\n    <h3>Servers</h3>\n    <table>\n      <tr ng-repeat=\"(name, stats) in nodes track by $id(name)\">\n        <td><table>\n          <thead>\n            <th colspan=\"2\">Server name: {{ name }}</th>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div class=\"main\">\n                  <div class=\"main-text\">{{ stats.load5 }}</div>\n                  <div class=\"sub-text\">\n                    <strong class=\"load\">\n                      average load over the past 5 minutes\n                    </strong>\n                  </div>\n                </div>\n              </td>\n              <td>\n                <div class=\"main\">\n                  <div class=\"main-text\">{{ stats.freemem }}</div>\n                  <div class=\"sub-text\">\n                    <strong class=\"freememory\">\n                      free memory\n                    </strong>\n                  </div>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table></td>\n      </tr>\n    </table>\n  </div>\n</div>\n\n<small>The above example is the current load average as well as the current free memory on an instance in ec2.</small>\n<small>If the above example does not load data within 10 seconds, visit the backend URL to <em>wake it up</em> at <a href=\"http://guarded-peak-8084.herokuapp.com/start\">http://guarded-peak-8084.herokuapp.com/start</a></small>\n\n> The source for the server process can be found [here](https://gist.github.com/auser/7997500).\n\n### Get pushy\n\nIn order to work with the Pusher service, we'll need to sign up for it (obviously). Head to [Pusher](http://pusher.com) and sign up for the service. We'll be working with the free account.\n\nOnce we've signed up, we'll need to include loading the library in our HTML. Now, we can do this in the _usual_ way by placing a script tag on the page:\n\n    <script src=\"http://js.pusher.com/2.1/pusher.min.js\" type=\"text/javascript\"></script>\n\n**Or** we can create a provider to load the library for us. This has many advantages, the most of which is that it allows us to use Angular's dependency injection with externally loaded scripts. \n\n    angular.module('alPusher', [])\n    .provider('PusherService', function() {\n      var _scriptUrl = '//js.pusher.com/2.1/pusher.min.js'\n      , _scriptId = 'pusher-sdk'\n      , _token = ''\n      , _initOptions = {};\n\n      this.setOptions = function(opts) {\n        _initOptions = opts || _initOptions;\n        return this;\n      }\n\n      this.setToken = function(token) {\n        _token = token || _token;\n        return this;\n      }\n\n      // Create a script tag with moment as the source\n      // and call our onScriptLoad callback when it\n      // has been loaded\n      function createScript($document, callback, success) {\n        var scriptTag = $document.createElement('script');\n        scriptTag.type = 'text/javascript';\n        scriptTag.async = true;\n        scriptTag.id = _scriptId;\n        scriptTag.src = _scriptUrl;\n        scriptTag.onreadystatechange = function () {\n          if (this.readyState == 'complete') {\n            callback();\n          }\n        }\n        // Set the callback to be run\n        // after the scriptTag has loaded\n        scriptTag.onload = callback;\n        // Attach the script tag to the document body\n        var s = $document\n          .getElementsByTagName('body')[0];\n        s.appendChild(scriptTag);\n      }\n\n      this.$get = ['$document', '$timeout', '$q', '$rootScope', '$window', \n        function($document, $timeout, $q, $rootScope, $window) {\n        var  deferred = $q.defer(),\n            socket,\n            _pusher;\n\n        function onSuccess() {\n         // Executed when the SDK is loaded\n         _pusher = new $window.Pusher(_token, _initOptions);\n        }\n\n         // Load client in the browser\n         // which will get called after the script\n         // tag has been loaded\n        var onScriptLoad = function(callback) {\n          onSuccess();\n          $timeout(function() {\n            // Resolve the deferred promise\n            // as the FB object on the window\n            deferred.resolve(_pusher);\n          });\n        };\n\n        // Kick it off and get Pushing\n        createScript($document[0], onScriptLoad);\n        return deferred.promise;\n       }]\n    })\n\n> This is our preferred method of injecting external libraries as it also makes it incredibly simple to test our external library interactions.\n\nWith the `PusherService` above, we can create a secondary service that will actually handle subscribing to the Pusher events. \n\nWe'll create a single method API for the `Pusher` service that will subscribe us to the Pusher channel. We'll want to make sure that we \n\n    angular.module('myApp', ['alPusher'])\n    .factory('Pusher', function($rootScope, PusherService) {\n      return {\n        subscribe: function(channel, eventName, cb) {\n          PusherService.then(function(pusher) {\n            pusher.subscribe(channel)\n            .bind(eventName, function(data) {\n              if (cb) cb(data);\n              $rootScope\n                .$broadcast(channel + ':' + eventName, data);\n              $rootScope.$digest();\n            })\n          })\n        }\n      }\n    })\n\nThis `Pusher` service allows us to subscribe to a channel and listen for an event. When it receives one, it will `$broadcast` the event from the `$rootScope`. If we pass in a callback function, then we'll run the callback function.\n\nFor example:\n    \n    Pusher.subscribe('stats', 'stats', function(data) {\n      // from the stats channel with a stats event\n    });\n\n### Tracking nodes\n\nWe'll need to keep track of different nodes with our dashboard. Since we're good angular developers and we write tests, we'll store our nodes and their active details in a factory.\n\nThere is nothing magical about the `NodeFactory` and it's pretty simple. It's entire responsibility is to hold on to a list of nodes and their current stats:\n    \n    angular.module('myApp')\n    .factory('NodeFactory', function($rootScope) {\n      var service = {\n        // Keep track of the current nodes\n        nodes: {},\n        // Add a node with some default data\n        // in it if it needs to be added\n        addNode: function(node) {\n          if (!service.nodes[node]) {\n            service.nodes[node] = {\n              load5: 0,\n              freemem: 0\n            };\n            // Broadcast the node:added event\n            $rootScope.$broadcast('node:added');\n          }\n        },\n        // Add a stat for a specific node\n        // on a specific stat\n        addStat: function(node, statName, stat) {\n          service.addNode(node);\n          service.nodes[node][statName] = stat;\n        }\n      }\n      return service;\n    })\n\n### Tracking\n\nWe're almost ready to track our server stats now. All we have left to do is configure our `Pusher` service with our API key and set up our controller to manage the stats.\n\nWe need to configure the `PusherService` in our `.config()` function, like normal:\n    \n    angular.module('myApp')\n    .config(function(PusherServiceProvider) {\n      PusherServiceProvider\n        .setToken('xxxxxxxxxxxxxxxxxxxx')\n        .setOptions({});\n    })\n\nNow we can simply use our `Pusher` factory to keep real-time track of our nodes. We'll create a `StatsController` to keep track of the current stats:\n\n    angular.module('myApp')\n    .controller('StatsController', function($scope, Pusher, NodeFactory) {\n      Pusher.subscribe('stats', 'stats', function(data) {\n        NodeFactory.addStat(data.node, 'load5', data.load5);\n        NodeFactory.addStat(data.node, 'freemem', data.precentfreemem);\n      });\n      $scope.$on('node:added', function() {\n        $scope.nodes = NodeFactory.nodes;\n      });\n    })\n\nLastly, our HTML is going to be pretty simple. The only tricky part is looping over the current nodes as we iterate over the collection. Angular makes this pretty easy with the `ng-repeat` directive:\n\n    <table>\n      <tr ng-repeat=\"(name, stats) in nodes track by $id(name)\">\n        <td>{{ name }}</td>\n        <td>{{ stats.load5 }}</td>\n        <td>{{ stats.freemem }}</td>\n      </tr>\n    </table>\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 17: Build a real-time OS dashboard with Pusher\" />\n</div>"),a.put("18.html","## Staggering animations with ngAnimate\n\nAfter getting a glimpse at how to perform animations with ngAnimate in last week's ng-newsletter entry: [AngularJS with ngAnimate](http://www.ng-newsletter.com/advent2013/#!/day/11), let's expand our knowledge and learn how to supercharge our animations even further. What are we going to learn? Staggering Animations!\n\nAngularJS 1.2 introduces a hidden, but powerful, CSS trick that informs `$animate` to stagger all successive CSS animations into a curtain-like effect.  \n\n> It is best to stick to using AngularJS 1.2.4 or higher to make use of the best animation features.\n\n## How can we put this to use?\n\nLet's say we have a ngRepeat animation and, instead of everything animating at the same time, we would like there to be a 50 millisecond delay between each enter operation. This would be quite difficult to do on our own using JavaScript with timeout delays, but luckily it is very easy to do using ngAnimate by adding some additional CSS code that the `$animate service understands.\n\nLet's **continue** off our our **code from last week's article** and apply some stagger animations to it. What did we have? Just a few simple transition animations for the enter, leave and move events on a list of items rendered by ngRepeat.\n\n```css\n/*\n * ngRepeat triggers three animation events: enter, leave and move.\n */\n.repeat-animation.ng-enter,\n.repeat-animation.ng-leave,\n.repeat-animation.ng-move {\n  -webkit-transition:0.5s linear all;\n  transition:0.5s linear all;\n}\n\n/* ending enter and move styling\n   (this is what the element will animate from */\n.repeat-animation.ng-enter,\n.repeat-animation.ng-move { opacity:0; }\n\n/* ending enter and move styling\n   (this is what the element will animate towards */\n.repeat-animation.ng-enter.ng-enter-active,\n.repeat-animation.ng-move.ng-move-active { opacity:1; }\n\n/* starting leave animation */\n.repeat-animation.ng-leave { opacity:1; }\n\n/* ending leave animation */\n.repeat-animation.ng-leave.ng-leave-active { opacity:0; }\n```\n\nClick [here](http://www.ng-newsletter.com/advent2013/#!/day/11#whatdoesourcodelooklike) to see the full HTML + CSS code from last week for this example.\n\nNow let's enhance this by adding in a **stagger effect** to the **enter**, **leave ** and **move** animations.\n\n```css\n.repeat-animation.ng-enter,\n.repeat-animation.ng-leave,\n.repeat-animation.ng-move {\n  -webkit-transition:0.5s linear all;\n  transition:0.5s linear all;\n}\n\n.repeat-animation.ng-enter-stagger,\n.repeat-animation.ng-leave-stagger,\n.repeat-animation.ng-move-stagger {\n  /* 50ms between each item being animated after the other */\n  -webkit-transition-delay:50ms;\n  transition-delay:50ms;\n\n  /* this is required here to prevent any CSS inheritance issues */\n  -webkit-transition-duration:0;\n  transition-duration:0;\n}\n\n/* the rest of the CSS code... */\n```\n\nAnd voila! We have a nice delay gap between each item being entered. To see this demo in action, click on the link below. \n\n[http://plnkr.co/edit/YjfxV1p4azbtSBkmBR6m?p=preview](http://plnkr.co/edit/YjfxV1p4azbtSBkmBR6m?p=preview)\n\n## What about CSS3 Keyframe Animations?\n\nThe code above was crafted together using CSS transitions, but CSS keyframe animations can also be used to trigger the animation. Let's expand our code from above, change the CSS styling to use keyframe animations instead of transitions.  \n\nThe keyframe animation code is very similar to our transition code, but instead of using `transition` we use `animation`.\n\n```css\n.repeat-animation.ng-enter {\n  -webkit-animation: enter_animation 0.5s;\n  animation: enter_animation 0.5s;\n}\n.repeat-animation.ng-leave {\n  -webkit-animation: leave_animation 0.5s;\n  animation: leave_animation 0.5s;\n}\n\n@-webkit-keyframes enter_animation {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n\n@keyframes enter_animation {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n\n@-webkit-keyframes leave_animation {\n  from { opacity:1; }\n  to { opacity:0; }\n}\n\n@keyframes leave_animation {\n  from { opacity:1; }\n  to { opacity:0; }\n}\n```\n\n(click [here](http://www.ng-newsletter.com/advent2013/#!/day/11#keyframeanimations) to get learn the basics of ngAnimate with keyframe animations).\n\nSo far so good. Now let's enhance that yet again using some stagger CSS code\n\n```css\n.repeat-animation.ng-enter-stagger,\n.repeat-animation.ng-leave-stagger,\n.repeat-animation.ng-move-stagger {\n  /* notice how we're using animation instead of transition here */ \n  -webkit-animation-delay:50ms;\n  animation-delay:50ms;\n\n  /* yes we still need to do this too */\n  -webkit-animation-duration:0;\n  animation-duration:0;\n}\n\n/* the rest of the CSS code... */\n```\n\nKeep in mind, however, that CSS Keyframe animations are triggered only after the \"reflow\" operation has run within an animation triggered by ngAnimate. This means that, depending on how many animations are being run in parallel, the element may appear in a pre-animated state for a fraction of a second. Why?  Well this is a performance boost that the `$animate` service uses internally to queue up animations together to combine everything to render under one single reflow operation. So if our animation code starts off with the element being hidden (say opacity:0) then the element may appear as visible before the animation starts. To inform `$animate` to style the element beforehand, we can just place some extra CSS code into our setup CSS class (the same CSS class where we reference the actual keyframe animation).  \n\n```css\n.repeat-animation.ng-enter {\n  /* pre-reflow animation styling */\n  opacity:0;\n\n  /* the animation code itself */\n  -webkit-animation: enter_animation 0.5s;\n  animation: enter_animation 0.5s;\n}\n```\n\nAnd finally, here's a link to our amazing, stagger-enhanced, CSS keyframe animation code: [http://plnkr.co/edit/7W1WomseYatlWCaBrlkY?p=preview](http://plnkr.co/edit/7W1WomseYatlWCaBrlkY?p=preview).\n\nAhh this is sweet isn't it?\n\n## What directives support this?\n\nBoth **ngRepeat** and **ngClass** support this, however, any angular directive can support it as well. It isn't actually the directive that triggers this animation, but instead, **a stagger animation will be triggered** if **two or more animations** of the same animation event residing within the same element container (the parent element) **are issued at the same time**. And with ngRepeat this happens automatically.  \n\nTo get this to work with a directive like ngClass then it is just a matter of triggering a series of CSS class changes on a series of elements all under the same parent class. Please visit the yearofmoo article at the end of this article to view some awesome examples to issue animations using ngClass.\n\nUnderstanding how this works can help us make stagger effects in our own directive code by using the helpful DOM operations available on the `$animate` method.\n\nClick [here](http://docs.angularjs.org/api/ngAnimate#usage_css-defined-animations_css-staggering-animations) to get a full understanding of how stagger animations are triggered by the `$animate` service.\n\n## But what about JS animations?\n\nRight now staggering animations are not provided within JavaScript animations. This is because the feature itself is very new and young so it's best to see how popular and well this feature plays out on the web before cramming more features into AngularJS.  \n\nHowever, all is not lost, the helpful yearofmoo article below goes into detail about how to piece together a stagger-like animation using JavaScript animations in ngAnimate.\n\n## Where can I learn more?\n\nAn in-depth article, more examples and an advanced demo repo is available on [www.yearofmoo.com](http://www.yearofmoo.com) in the brand new article titled: [Staggering Animations in AngularJS](http://www.yearofmoo.com/2013/12/staggering-animations-in-angularjs.html). This article goes into detail on how to make use of staggering animations with ngAnimate, how to create custom directives to hook into staggering animations, and also how to wire them together with the amazing animate.css CSS animation library.\n\nThis article was written by Matias Niemela (aka [@yearofmoo](http://twitter.com/yearofmoo)) of [www.yearofmoo.com](http://www.yearofmoo.com) and edited by Ari Lerner (aka [@auser](http://twitter.com/auser))."),a.put("19.html","## Getting started unit-testing Angular\n\nOne of the fundamental reasons for choosing Angular is cited as that it is built with testing in mind. We can build complex web applications using various popular frameworks and libraries with features as tall as the sky and as equally complex. As with anything of increasing complexity and density, this can quickly grow out of hand. \n\nTesting is a good approach to keep code maintainable, understandable, debug-able, and bug-free. A good test suite can help us find problems before they rise up in production and at scale. It can make our software more reliable, more fun, and help us sleep better at night.\n\nThere are several schools of thought about how to test and when to test. As this snippet is more about getting us to the tests, we'll only briefly look at the different options. In testing, we can either:\n\n* Write tests first (Test-Driven Development | TDD) where we write a test to match the functionality and API we expect out of our element\n* Write tests last where we confirm the functionality works as expected (WBT | Write-behind testing)\n* Write tests to black-box test the functionality of the overall system\n\nFor the application that we're working on, it's really up to us to determine what style makes sense for our application. In some cases, we operate using TDD style, while in others we operate with WBT. \n\n> We generally follow the following pattern when choosing a testing style: while we're at prototyping phase (or just after), we generally work with WBT testing as we don't always have a solidified API we're working with. Additionally, our team is generally pretty small. Otherwise, when our application starts to grow, we switch over to drive our functionality through testing.\n\n### Getting started\n\nEnough chit-chat, let's test!\n\nThere are several libraries that we can use right out of the box when testing angular apps. The currently, most popularly supported framework released and sponsored by the Google team is called `karma`. \n\nIf we're not using the `yeoman.io` generator, we'll need to install karma for development puposes. Installing `karma` can by done using the `npm` tool, which is a package manager for node and comes built-in:\n\n    $ npm install --save-dev karma\n\n> If we're using the `yeoman` generator with our apps, this is already set up for us.\n\n`Karma` works by launching a browser, loading our app or a derivative of our source files and running tests that we write against our source code. In order to _use_ karma, we'll need to tell the framework about our files and all the various requirements.\n\nTo kick it off, we'll use the `karma init` command which will generate the initial template that we'll use to build our tests:\n\n    $ karma init karma.conf.js\n\nIt will ask us a series of questions and when it's done, it will create a configuration file. Personally, we usually go through and answer yes to as many which are asked (except without RequireJS). We like to fill in the `files:` section manually (see below).\n\nWhen it's done, it will create a file in the same directory where we ran the generator that looks similar to the following:\n\n    // Karma configuration\n    module.exports = function(config) {\n      config.set({\n        // base path, that will be used to resolve files and exclude\n        basePath: '',\n\n        // testing framework to use (jasmine/mocha/qunit/...)\n        frameworks: ['jasmine'],\n\n        // list of files / patterns to load in the browser\n        files: [\n          'app/components/angular/angular.js',\n          'app/components/angular-mocks/angular-mocks.js',\n          'app/scripts/**/*.js',\n          'test/spec/**/*.js'\n        ],\n\n        // list of files / patterns to exclude\n        exclude: [],\n\n        // web server port\n        port: 8080,\n\n        // level of logging\n        // possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: false,\n\n        // Start these browsers, currently available:\n        // - Chrome\n        // - ChromeCanary\n        // - Firefox\n        // - Opera\n        // - Safari (only Mac)\n        // - PhantomJS\n        // - IE (only Windows)\n        browsers: ['Chrome'],\n\n\n        // Continuous Integration mode\n        // if true, it capture browsers, run tests and exit\n        singleRun: false\n      });\n    };\n\nThis `karma.conf.js` file describes a simple `unit` test that karma will load when we start writing tests. We can also tell it to build an e2e, or end-to-end test that is specifically intended for building black-box style testing, but that's for another snippet/article.\n\n> Note that we **need** to have `angular-mocks.js` and our angular code available to reference inside the `karma.conf.js` file.\n\nNow that we have our `karma.conf.js` file generated, we can kick off karma by issuing the following command:\n\n    $ karma start karma.conf.js\n\nIf we haven't run it before, it's likely going to **fail** or at least report errors of files not being found. Let's start writing our first test.\n\nIn Write-Behind development, we're going to test the following controller:\n\n```javascript\nangular.module('myApp', [])\n.controller('MainController', function($scope) {\n  $scope.name = \"Ari\";\n  $scope.sayHello = function() {\n    $scope.greeting = \"Hello \" + $scope.name;\n  }\n})\n```\n\nFirst, let's create the actual test file in `test/spec/controllers/main.js`. Since `karma` works well with Jasmine, we'll be using the Jasmine framework as the basis for our tests. \n\n> For information on Jasmine, check out their fantastic documentation at [http://jasmine.github.io/2.0/introduction.html](http://jasmine.github.io/2.0/introduction.html).\n\nInside our freshly created file, let's add the test block:\n\n```javascript\ndescribe('Unit: MainController', function() {\n  // Our tests will go here\n})\n```\n\nGreat! Now we need to do a few things to tell our tests what we are testing. We need to tell it what module we are testing. We can do this by using the `beforeEach()` function to load the angular module that contains our `MainController` (in this case, it's just `myApp`):\n\n```javascript\ndescribe('Unit: MainController', function() {\n  // Load the module with MainController\n  beforeEach(module('myApp'));\n})\n```\n\nNext, we're going to _pretend_ that we're angular loading the controller when it needs to be instantiated on the page. We can do this by _manually_ instantiating the controller and handing it a `$scope` object. Creating it manually will also allow us to interact with the scope throughout the tests.\n\n```javascript\ndescribe('Unit: MainController', function() {\n  // Load the module with MainController\n  beforeEach(module('myApp'));\n\n  var ctrl, scope;\n  // inject the $controller and $rootScope services\n  // in the beforeEach block\n  beforeEach(inject(function($controller, $rootScope) {\n    // Create a new scope that's a child of the $rootScope\n    scope = $rootScope.$new();\n    // Create the controller\n    ctrl = $controller('MainController', {\n      $scope: scope\n    });\n  }));\n})\n```\n\nNow, we have access to both the controller as well as the scope of the controller. \n\n### Writing a test\n\nNow that everything is all set up and ready for testing, let's write one. It's _always_ a good idea to test functionality of code that we write. Anytime that variables can be manipulated by the user or we're running any custom actions, it's usually a good idea to write a test for it.\n\nIn this case, we won't need to test setting the name to \"Ari\" as we _know_ that will work (it's JavaScript). What we would like to know, however is that the `sayHello()` function works as-expected. \n\nThe `sayHello()` method simply preprends the `$scope.name` to a variable called `$scope.greeting`. We can write a test that verifies that `$scope.greeting` is `undefined` before running and then filled with our expected message after we run the function:\n\n```javascript\ndescribe('Unit: MainController', function() {\n  // Load the module with MainController\n  beforeEach(module('myApp'));\n\n  var ctrl, scope;\n  // inject the $controller and $rootScope services\n  // in the beforeEach block\n  beforeEach(inject(function($controller, $rootScope) {\n    // Create a new scope that's a child of the $rootScope\n    scope = $rootScope.$new();\n    // Create the controller\n    ctrl = $controller('MainController', {\n      $scope: scope\n    });\n  }));\n\n  it('should create $scope.greeting when calling sayHello', \n    function() {\n      expect(scope.greeting).toBeUndefined();\n      scope.sayHello();\n      expect(scope.greeting).toEqual(\"Hello Ari\");\n  });\n})\n```\n\nWe have access to all different parts of the controller through the `scope` of it now. Feel the power of testing? This is only the beginning. \n\nFinally, we are writing a book all about testing with Angular. Interested? Let us know by showing your interest at it's page on [leanpub](https://leanpub.com/testingangularjs). Enjoy!"),a.put("2.html","# A short guide to routing\n\nAlmost all non-trivial, non-demo Single Page App (SPA) require multiple pages. A settings page is different from a dashboard view. The login page is different from an accounts page.\n\nWe can get this functionality with Angular incredibly simply and elegantly using the angular.route module. \n\n### Installation\n\nIn order to actually use routes, we'll need to install the routing module. This is very easy and can be accomplished in a few ways:\n\n#### Using bower\n\n    $ bower install --save angular-route\n\n#### Saving the raw source\n\nAlternatively, we can save the source directly from [angularjs.org](http://angularjs.org) by clicking on the big download button and then clicking on the _extras_ link. From there, we can simply save the file to somewhere accessible by our application.\n\n### Usage\n\nIt's easy to define routes. In our main module, we'll need to _inject_ the ngRoute module as a dependency of our app.\n\n    angular.module('myApp', ['ngRoute'])\n      .config(function($routeProvider) {});\n\nNow, we can define the routes of our application. The route module adds a $routeProvider that we can _inject_ into our .config() function. It presents us two methods that we can use to define our routes. \n\n#### when()\n\nThe when() method defines our routes. It takes two arguments, the _string_ of the route that we want to match and a route definition object. The route string will match on the url in the browser. The main route of the app is usually the / route.\n\nThe route definition can also accept symbols that will be substituted by angular and inserted into a service called the $routeParams that we can access from our routes.\n\n    angular.module('myApp', ['ngRoute'])\n        .config(function($routeProvider) {\n          $routeProvider\n            .when('/', {\n              templateUrl: 'views/main.html',\n              controller: 'MainCtrl'\n            })\n            .when('/day/:id', {\n              templateUrl: 'views/day.html',\n              controller: 'DayCtrl'\n            })\n        \n\nThe route definition object is where we'll define all of our routes from a high-level. This is where we'll assign a controller to manages the section in the DOM, the templates that we can use, and other route-specific functionality.\n\nMost often, we'll set these routes with a controller and a templateUrl to define the functionality of the route.\n\n#### otherwise()\n\nThe otherwise() method defines the route that our application will use if a route is not found. It's the _default_ route.\n\nFor example, the route definition for **this** calendar is:\n\n    angular.module('myApp', ['ngRoute'])\n    .config(function($routeProvider) {\n      $routeProvider\n        .when('/', {\n          templateUrl: 'views/main.html',\n          controller: 'MainCtrl'\n        })\n        .when('/day/:id', {\n          templateUrl: 'views/day.html',\n          controller: 'DayCtrl'\n        })\n        .otherwise({\n          redirectTo: '/'\n        });\n    })\n\n### Using in the view\n\nOkay, so we've defined routes for our application, now how do we actually _use_ them in our app? \n\nAs a route is simply a new view with new functionality for a portion of a page, we'll need to tell angular which portion of the page we want to switch. To do this, we'll use the ng-view directive:\n\n    <div class=\"header\">My page</div>\n    <div ng-view></div>\n    <span class=\"footer\">A footer</span>\n\nNow, anytime that we switch a route, only the DOM element (`<div ng-view></div>`) will be updated and the header/footer will stay the same.\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 2: A short guide to Routing\" />\n</div>"),a.put("20.html",'## Build a Real-Time, Collaborative Christmas Wishlist with GoAngular v2\n\nGoInstant is a platform for building real-time, collaborative web and mobile apps. We don’t need to worry about creating a separate back-end or server infrastructure, GoInstant will handle that part for us.\n\n[GoAngular](https://developers.goinstant.com/v1/GoAngular/index.html), the GoInstant integration with AngularJS, makes it incredibly easy to use Angular and GoInstant together. The GoInstant team just released their V2 which is WAY more powerful than the V1 and made some big improvements including:\n\n* Access to all of GoInstant’s most powerful features! Including: user-management, presence, and a real-time data store.\n* [Promise-based API](https://goinstant.com/blog/the-goinstant-api-now-supports-promises-for-better-async-javascript-support)\n\nIn this snippet, we’re going to look at how to use GoInstant and GoAngular to create the collaborative Christmas wishlist you see below.  Just in time for the last weekend of holiday shopping! Check out the final version of the app [here](http://secret-citadel-9867.herokuapp.com/).\n\n<a href="https://raw.github.com/mattcreager/goangular-wishlist-example/master/screenshot.png"><img src="https://raw.github.com/mattcreager/goangular-wishlist-example/master/screenshot.png" alt="Christmas wish-list screenshot" width="200px" /></a>\n\n> We only need NodeJS and npm installed to get our wishlist app up and running. \n> For more information on installing NodeJS, check out the [nodejs.org](http://nodejs.org/) page.\n\nIf you want to follow along, the source is available at [https://github.com/mattcreager/goangular-wishlist-example](https://github.com/mattcreager/goangular-wishlist-example) and includes directions to help you get up and running.\n\n## Step 1: Sign up for GoInstant\n\nBefore we can get started, we’ll need to [sign up](https://goinstant.com/signup) for GoInstant and create an app.  Let’s call it “wishlist.”\n\n## Step 2: Include GoInstant & GoAngular\n\nNext we\'ll add our external dependencies: GoInstant and GoAngular are available on bower or via their CDN.\n\nIn our `index.html`, we’ll need to make sure the following lines are added:\n\n```html\n<script src="https://cdn.goinstant.net/v1/platform.min.js"></script>\n<script src="https://cdn.goinstant.net/integrations/goangular/v2.0.0/goangular.min.js"></script>\n```\n\n#### Add GoAngular as a dependency\n\nLet\'s hit two birds with one stone: We\'ll declare dependencies for our app module and controller, and configure our GoInstant connection, with the URL we retrieved in step one.\n\n```js\n'+"angular.module('WishList', ['goangular'])\n   .config(function(goConnectionProvider) {\n     // Connect to our GoInstant backend url\n     goConnectionProvider.set(CONFIG.connectUrl);\n  })\n```\n\nAfter we’ve included `goangular` as a dependency for our app, we can _inject_ the `goConnection` into our angular objects, which we’ll use to connect to our GoInstant back-end:\n\n```javascript\n.controller('ListCtrl', function($scope, goConnection) {\n  // goConnection is available in here\n});\n```\n\n## Step 3: Create and Join a Room\n\nBefore we can access a key, we need to be in a room, which is the GoInstant idiom for channels. The `goConnection` service provides easy access to our pre-configured connection; we'll use that to create and join a room:\n\n```js\nangular.module(‘WishList’, [‘goangular’])\n.controller('ListCtrl', function($scope, goConnection) {\n  var itemsKey;\n  \n  goConnection.ready()\n  .then(function(goinstant) {\n    // create a room, join it and return a promise\n    return goinstant.room('a-list').join().get('room');\n  });\n});\n```\n\nNotice that we’re returning a promise inside of the `goConnection` connection. This tells the GoInstant library to resolve the promise and then pass it along the promise chain. Specifically, this allows us to interact with the promised object in the promise chain.\n\nUsing the promise chain guarantees that the interaction with GoInstant will be asynchronous and fits naturally into the async flow of javascript.\n\n## Step 4:  Fetch our wishes\n\nNow we can use the room from the previous promise inside the _next_ promise. In this case, we’re trickling information down from the room, which in turn gets used to fetch the list of items inside the room, which finally gets resolved onto the `$scope` object as `$scope.items`.\n\n```javascript\ngoConnection.ready().then(function(goinstant) {\n  return goinstant.room('a-list').join().get('room');\n}).then(function(room) {\n  return room.key('items').get();\n}).then(function(result) {\n  $scope.items = result.value || {};\n}).finally($scope.$apply);\n```\n\nThis interaction is actually quite performant and also makes it incredibly easy to test the features of our app.\n\n## Step 5: Finally watch our wishes, so we know when they change\n\nWhen a wish is added, we can just add it to our model: `$scope.items`.\n\n```js\nvar itemsKey;\n\ngoConnection.ready().then(function(goinstant) {\n  return goinstant.room('a-list').join().get('room');\n}).then(function(room) {\n  itemsKey = room.key('items');\n  \n  return itemsKey.get();\n}).then(function(result) {\n  $scope.items = result.value || {};\n  \n  $scope.addWish = function() {\n    itemsKey.add($scope.wish);\n  };\n  \n  itemsKey.on('add', {\n    local: true,\n    listener: function(value, context) {\n      $scope.$apply(function() {\n        var itemKey = context.addedKey.split('/')\n        $scope.items[itemKey[itemKey.length -1 ]] = value;\n      });\n    }\n  });\n}).finally($scope.$apply);\n```\n\nThere we have it, a functional real-time, collaborative wishlist, just in time for the holidays! Dig in further with [GoAngular’s documentation](https://developers.goinstant.com/v1/GoAngular/index.html), join the conversation in [IRC](irc://irc.freenode.net#goinstant).\n\nFrom our experience, the team is incredibly responsive and will accept feedback to [support@goinstant.com](support@goinstant.com).\n\n**Update**: Nifty! The GoAngular team recorded a screencast that walks through this process! Check it out at [https://www.youtube.com/watch?v=6KspFPDOaMY&hd=1](https://www.youtube.com/watch?v=6KspFPDOaMY&hd=1).\n\nEnjoy the next five days of the 25 days of Angular, we’re certainly looking forward to it here at the GoInstant office!\n"),a.put("21.html",'## Immediately satisfying users with a splash page\n\nOne of the common questions we get as teachers of Angular is how can we prevent the Flash Of Unrendered Content (FOUC). We covered a few methods to handle hiding this unrendered content on [Day 3](#!/day/3), but these simply hide the content from the user. \n\nHiding content, especially on mobile can make our app appear to not be working, slow, or broken. Rather than let our users _think_ that our app is broken, we can address it specifically by showing them _something_ while they wait for our app to load.\n\n> We spoke about this in our talk at Google (view it [here](https://www.youtube.com/watch?v=xOAG7Ab_Oz0&feature=youtu.be&hd=1))\n\n### One incredibly short introduction how the browser works\n\nWhen the browser, any browser gets HTML it will start to parse the HTML into a tree. We refer to this tree as the Document Object Model, or the DOM for short. When the browser has parsed the entire HTML, it will start walking down the tree and begin laying out the elements.\n\nIf it encounters an element that requires it to fetch data from a remote site, such as a `<link>` tag or a `<script>` tag with a `src` attribute, the browser will immediately try to fetch the resource before continuing on down the tree.\n\nAdditionally, any element in the `<head>` will be fetched before the rest of the document has been parsed and presented on-screen.\n\nThe browser takes care of placing elements on the screen as it encounters elements. This process is usually quite fast, but slow connections and slow devices allow us to see it in full-blown action. \n\nSo what can we do?\n\n### Use this process to our advantage\n\nWe can use the fact that the browser starts to render elements as soon as it encounters them to show a splash screen while the rest of the page is loading. A splash screen is simply a full-screen block of HTML that we will show when the page is loading. \n\nTo implement a splash screen, we\'ll need to strip all of the loading of any external files OUTSIDE of the `<head>` element. This includes any external CSS and JavaScript. The only elements we want in the `<head>` element are meta tags, the `<title>` element, and any in-line styles that our splash screen will use (as we\'ll see shortly).\n\nSecondly, the first element that we want in our `<body>` tag is the splash screen head element. This way, once the browser starts parsing the `<body>` tag it will lay out the splash screen elements and style them before it starts to load any other files.\n\n```html\n<html>\n  <head>\n    <title>My Angular App</title>\n    <style type="text/css">\n      .splash {}\n    </style>\n  </head>\n  <body ng-app="myApp">\n    <!-- The splash screen must be first -->\n    <div id="splash" ng-cloak>\n      <h2>Loading</h2>\n    </div>\n    <!-- The rest of our app -->\n    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.2.5/angular.min.js"></script>\n    <div ng-controller="MainController">\n    </div>\n    <script src="js/app.js"></script>\n  </body>\n</html>\n```\n\nLaying out our page like this will give us the most optimal appearing loading of our app. What goes inside our splash screen element is really up to us. The more we can _inline_ the elements that appear in the splash screen, the faster it will run. \n\nUsing base64 encoding for our images or SVG elements are easy methods of making our splash screen appear to be part of the normal, non-static flow of a splash screen. The more external elements we place inside of the top-most element, the slower it will appear.\n\nNow, once we have our HTML setup like what we have above, we\'ll need to style our `<div id="splash">` element. We can do this by placing the style definitions in the sole `<style>` element in the `<head>` tag of our page.\n\n```html\n<head>\n  <title>My Angular App</title>\n  <style type="text/css">\n    /* some naive styles for a splash page */\n    .splash {\n      background: blue;\n      color: white;\n    }\n    .splash h2 {\n      font-size: 2.1em;\n      font-weight: 500;\n    }\n  </style>\n</head>\n```\n\n### Hiding our splash screen when the app is ready\n\nLastly, we\'ll need to make sure that our splash screen goes away at the end of the loading process and let our app reclaim the page. \n\nWe can do this using the `ngCloak` directive that is built into Angular itself. The `ngCloak` directive\'s entire responsibility is to hide uncompiled content from the browser before the angular app has been loaded.\n\nThe `ngCloak` directive works by adding a CSS class to the element that sets a `display: none !important;` to the element. Once the page has been loaded and angular is bootstrapping our app, it will remove the `ng-cloak` class from the element which will remove the `display: none` and show the element.\n\nWe can hijack this `ngCloak` directive for the splash page and invert the style for the `splash` element only. For example, in the CSS in our `<head>` element, we can place the following CSS definitions:\n\n```css\n[ng-cloak].splash {\n  display: block !important;\n}\n[ng-cloak] {display: none;}\n/* some naive styles for a splash page */\n.splash {\n  background: blue;\n  color: white;\n}\n.splash h2 {\n  font-size: 2.1em;\n  font-weight: 500;\n}\n```\n\nWith this in place, our splash screen will load and be shown in our app before anything else is shown and we made **NO** changes to the functionality of our app. '),a.put("22.html",'## A Few of My Favorite Things: Isolated Expression Scope\n\nWhat do we do when we need to create a component that needs to be reusable and want to give other developers the ability to use that component however they wish? \n\nIn AngularJS, isolated expression scope is a really powerful tool that allows us to delegate units of work to the parent controller of a directive instead of handling it internally. This flexibility allows us to use the same directive over and over but have it do totally different things depending on how we define it in the HTML.  \n\nIn this article, we are going to create a single directive that we will use seven times to do completely different things. When we are finished, we will have seen the power and flexibility of isolated expression scope applied in an approachable manner that you can start to using immediately. Let\'s get started!\n\nThe code for this article is **[here](http://plnkr.co/edit/ThUoam9WMOBD93gfIVGL?p=preview)**\n\n### Isolated Expression Scope\n\nWe are going to create a `vote` directive that has an `vote-up` and `vote-down` method. Isolated expression scope comes into play the moment we decide that we want to be able to increment and decrement the vote count by varying denominations. In our case, we want one vote directive instance to increment and decrement the vote count by 100, another to increment and decrement the vote count by 10 and so on.\n\nWe will use the HTML as a starting point and walk through how the vote directive actually comes to together. We have a `MainController` that has a property of `votes` that we are going to use to keep track of our total vote count. We also have three vote components on the page and in each one we are defining `label`, `vote-up` and `vote-down` differently. \n\n```html\n<div class="container" ng-controller="MainController">\n  <h1>Current Votes: {{votes}}</h1>\n  <hr>\n  <h3>Isolated Expression Scope</h3>\n  <div class="vote-container">\n    <vote label="100" vote-up="incrementHundred()" \n      vote-down="decrementHundred()"></vote>\n    <vote label="10" vote-up="incrementTen()" \n      vote-down="decrementTen()"></vote>\n    <vote label="1" vote-up="incrementOne()" \n      vote-down="decrementOne()"></vote>\n  </div>\n</div>\n```\n\nNotice that the label corresponds with the denomination that the vote directive increments or decrements the vote count. The directive with the label `100` has a method of `incrementHundred` and `decrementHundred` which does exactly that to the `votes` property. \n\nNow that we have created some AngularJS requirements by defining them in our HTML, let us fulfill those in our JavaScript. First up, we have created the `MainController` with the `votes` property defined on scope as well as all of the increment and decrement properties we declared. \n\nJust below that we are going to declare the `vote` directive.\n\n```javascript\nangular.module(\'website\', [])\n  .controller(\'MainController\', [\'$scope\',\n    function($scope) {\n      $scope.votes = 0;\n\n      $scope.incrementOne = function() {\n        $scope.votes += 1;\n      };\n\n      $scope.decrementOne = function() {\n        $scope.votes -= 1;\n      };\n\n      $scope.incrementTen = function() {\n        $scope.votes += 10;\n      };\n\n      $scope.decrementTen = function() {\n        $scope.votes -= 10;\n      };\n\n      $scope.incrementHundred = function() {\n        $scope.votes += 100;\n      };\n\n      $scope.decrementHundred = function() {\n        $scope.votes -= 100;\n      };\n    }\n  ])\n  .directive(\'vote\', function() {\n    return {\n      restrict: \'E\',\n      templateUrl: \'vote.html\',\n      scope: {\n        voteUp: \'&\',\n        voteDown: \'&\',\n        label: \'@\'\n      }\n    };\n  });\n```\n\nThe vote directive is fairly simple in that we have restricted it to an element node with `restrict: \'E\'` and declared the template with `templateUrl: \'Vote.html\'`.\n\nWe are creating isolated scope by defining an object i.e.: `{}` for the `scope` property on the directive definition object. \n\nAn attribute isolated scope is being created for the label property with `label: \'@\'` which means we are creating a uni-directional binding from the parent scope to the directive to tell us what the `label` attribute evaluates to. This is appropriate because we only want to read the property and we never need to set it. \n\nExpression isolated scope is being created for `voteUp` and `voteDown` with `voteUp: \'&\'` and `voteDown: \'&\'`. What this means is that when we call `voteUp` or `voteDown` in our directive, it will call whatever method we defined in that attribute on our directive.    \n\nFor instance, because we have defined `incrementHundred()` in our `vote-up` attribute in the code below, when we call `voteUp` on our directive it will call `incrementHundred()` on the parent scope. \n\n<vote label="100" vote-up="incrementHundred()" \n      vote-down="decrementHundred()"></vote>\n\n> AngularJS converts camel-case to snake-case when moving from JavaScript to HTML. That is why we are using `voteUp` in our JavaScript and `vote-up` in the HTML. \n\nAnd for our directive markup, we have an anchor tag that calls `voteUp` on `ng-click`, a div that displays the `label` value and another anchor tag to call `voteDown`.\n\n```html\n<div class="vote-set">\n  <a href="#" class="icon-arrow-up" ng-click="voteUp()"></a>\n  <div class="number">{{label}}</div>\n  <a href="#" class="icon-arrow-down" ng-click="voteDown()"></a>\n</div>\n```\n\nAnd now we have created a vote directive that we are using in three places to increment the vote count with different denominations.\n\n### Isolated Expression Scope with Variables\n\nOccasionally we need to pass a value back to the parent controller as a parameter on the expression we have bound to and so this is what we are going to tackle next.\n\nIn our previous example we have defined 6 methods to handle the increment and decrement operations but that seems a little verbose. Wouldn\'t it be nice if we could consolidate those methods and just send in the value that we want to increment or decrement the vote count by? \n\nIn the HTML below, we have set things into motion by defining an `incrementVote` and `decrementVote` method that accepts `unit` as a parameter. \n\n```html\n<div class="container" ng-controller="MainController">\n  <h1>Current Votes: {{votes}}</h1>\n  <hr>\n  <h3>Isolated Expression Scope with Variables</h3>\n  <div class="vote-container">\n    <vote label="9" vote-up="incrementVote(unit)" \n      vote-down="decrementVote(unit)"></vote>\n    <vote label="6" vote-up="incrementVote(unit)" \n      vote-down="decrementVote(unit)"></vote>\n    <vote label="3" vote-up="incrementVote(unit)" \n      vote-down="decrementVote(unit)"></vote>\n  </div>\n</div>\n```\n\nAnd in the template markup below, we are going to call `voteUp` and `voteDown` and with a value for the parent controller. \n\n```html\n<div class="vote-set">\n  <a href="#" class="icon-arrow-up" \n    ng-click="voteUp({unit:label})"></a>\n  <div class="number">{{label}}</div>\n  <a href="#" class="icon-arrow-down" \n    ng-click="voteDown({unit:label})"></a>\n</div>\n```\n\n> The most important thing to keep in mind when passing variables with isolated expressions is that we do not pass them one-by-one but with a parameter object.\n\nWe are going to use the value we defined for the `label` property as our `unit` value. And in the `MainController`, we will take the the `unit` value and cast it to an integer with `parseInt(unit,10)` and add or subtract it to `$scope.votes`. \n\n```javascript\nangular.module(\'website\', [])\n  .controller(\'MainController\', [\'$scope\',\n    function($scope) {\n      $scope.votes = 0;\n\n      // ...\n\n      $scope.incrementVote = function(unit) {\n        $scope.votes += parseInt(unit,10);\n      };\n\n      $scope.decrementVote = function(unit) {\n        $scope.votes -= parseInt(unit,10);\n      };\n    }\n  ])\n```\n\n### Isolated Expression Scope with Multiple Methods\n\nWe are going to wrap things up with one more neat thing that you can do with isolated expression scope. We can actually bind more than one method to a single expression on the directive. \n\nFor the sake of illustration, we are going to add a vote directive that increments and decrements the vote count by 1000. When this happens, we want to call a second method called `alertAuthorities` because clearly something is amiss!\n\n```html\n<div class="container" ng-controller="MainController">\n  <h1>Current Votes: {{votes}}</h1>\n  <hr>\n  <h3>Isolated Expression Scope with Multiple Methods</h3>\n  <div class="vote-container">\n    <vote label="1000" \n      vote-up="incrementVote(1000);alertAuthorities();" \n      vote-down="decrementVote(1000);alertAuthorities();">\n      </vote>\n  </div>\n  <hr>\n  <div ng-if="alert" class="alert alert-danger">{{alert}}</div>\n</div>\n```\n\nWe are showing an alert `div` if there is an `alert` defined on `$scope` which we set in the code below. \n\n```javascript\nangular.module(\'website\', [])\n'+"  .controller('MainController', ['$scope',\n    function($scope) {\n      $scope.votes = 0;\n\n      // ...\n      \n      $scope.incrementVote = function(unit) {\n        $scope.votes += parseInt(unit,10);\n      };\n\n      $scope.decrementVote = function(unit) {\n        $scope.votes -= parseInt(unit,10);\n      };\n\n      $scope.alertAuthorities = function() {\n        $scope.alert = 'The authorities have been alerted!';\n      };\n    }\n  ])\n```\n\nBy calling `voteUp` or `voteDown` on this particular `vote` directive, we are not only calling `incrementVote` or `decrementVote` but `alertAuthorities` as well. \n\n### In Conclusion\n\nWe started out with a simple isolated expression scope example and then extended it to pass values from the directive to the parent controller. And then to wrap things up, we learned how we could actually call more than one method on a parent controller using expression isolated scope. \n\nThis snippet was written by Lukas Ruebbelke (aka [@simpulton](https://twitter.com/simpulton)) and edited by Ari Lerner (aka [@auser](http://twitter.com/auser)).\n\n\nHope you enjoyed today's snippet. Stay tuned for tomorrow's and sign up for the newsletter for great Angular content every week.\n"),a.put("23.html","Enter to Win Firebase Credit!\n==============================\n\nAngular provides an excellent framework for rendering content in the browser, but the other component of building a web app is storing and syncing data. With [Firebase](https://firebase.com), you can easily wire up a backend to your Angular app in just a few lines of code. \n\nThe Firebase team created [AngularFire](https://github.com/firebase/angularFire), official bindings to help you create complex, realtime apps using the two technologies. Follow the [quickstart guide](http://angularfire.com/quickstart.html) to get started with AngularFire in just four steps.\n\n**Firebase is holding a raffle for developers using Firebase and Angular!** The winner will receive 6 months of Firebase’s [Bonfire plan](https://www.firebase.com/pricing.html) (a $900 value) and lunch with the Firebase team. \n\nTo enter the raffle, [fill out the form here](https://docs.google.com/forms/d/1kza8tZmjfHa62EbbNtFuFEeNKFYRxKe8ZewdJ6xJwRw/viewform) **by December 29th.**\n\nIf you have questions on using Firebase with Angular or want to share your apps with the community, join the [Firebase + Angular Google Group](https://groups.google.com/forum/#!forum/firebase-angular)."),a.put("24.html",'## Egghead.io -- Directives in 5 minutes\n\n<iframe src="//fast.wistia.net/embed/iframe/zzjt7cwr9p?videoFoam=true" allowtransparency="true" frameborder="0" scrolling="no" class="wistia_embed" name="wistia_embed" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width="1280" height="720"></iframe><script src="//fast.wistia.net/assets/external/iframe-api-v1.js"></script>\n\nGift yourself knowledge and a lifetime discount to egghead.io. The best bite-sized Angular training videos.\n\n<img src="/images/events/23/egghead_holiday_hat.png" alt="Holiday santa" width="250" />\n\n<a href="http://egghead.io/pricing?dc=ng_newsletter_xmas&utm_source=ng_newsletter&utm_medium=email&utm_campaign=ng_newsletter_xmas" class="btn btn-warning">Grab the deal now</a>'),a.put("25.html","## ng-book is complete and our new D3 on Angular book\n\n### ng-book is heading to print!\n\nIn celebration of the final day of the 25 days of Angular calendar and to celebrate the holidays and bring us into the new year, we're happy to announce that the ink is drying on [ng-book: The Complete Book on AngularJS](https://www.ng-book.com) and it's headed to print!\n\nIf you have not yet heard of ng-book, it's over 600+ pages of production-grade AngularJS material. Regardless if you are beginner or advanced AngularJS user, this book has something for you. We cover everything Angular, from just getting started to making our Angular apps SEO friendly. \n\nCheck out the Table of Contents [here](https://www.ng-book.com/media/toc.pdf).\n\nThe packages are available here:\n\n* [The Book and Complete Source Code](https://gum.co/angular)\n* [The Complete Package](https://gum.co/ngbook-complete)\n\n### Introducing D3 on AngularJS, the book\n\nThe amazing [@vicapow](https://twitter.com/vicapow) and [@auser](https://twitter.com/auser), the author of ng-book have teamed up to bring you a new book on [D3 on Angular](https://leanpub.com/d3angularjs). \n\nTo celebrate the holidays, we're also announcing the book as available for pre-release as of today! Support the book and get it while it's hot! \n\nWant to learn D3 and use it to power our web app visualizations?\n\nCheck it out on leanpub at [https://leanpub.com/d3angularjs](https://leanpub.com/d3angularjs).\n\nHappy holidays from [ng-newsletter](http://www.ng-newsletter.com/) and enjoy the rest of December!"),a.put("3.html","## Preventing flickering\n\nWhen a particular page or component of our application requires data be available on the page when it loads up, there will be time between when the browser renders the page and angular does. This gap may be tiny so we don't even see the difference or it can be long such that our users see the un-rendered content.\n\nThis behavior is called `F`lash `O`f `U`nrendered `C`ontent (FOUC) and is **always** unwanted. In this snippet, we'll explore a few different ways to prevent this from happening for our users.\n\n### ng-cloak\n\nThe `ng-cloak` directive is a built-in angular directive that hides all of the elements on the page that contain the directive.\n\n    <div ng-cloak>\n      <h1>Hello {{ name }}</h1>\n    </div>\n\nAfter the browser is done loading and the _compile phase_ of the template is rendering, angular will delete the `ngCloak` element attribute and the element will become visible.\n\nThe safest way to make this IE7 safe is to also add a class of `ng-cloak`:\n\n    <div ng-cloak class=\"ng-cloak\">\n      <h1>Hello {{ name }}</h1>\n    </div>\n\n### ng-bind\n\nThe `ng-bind` directive is another built-in Angular directive that handles data-binding in the view. We can use `ng-bind` instead of using the <code ng-non-bindable>{{ }}</code> form to bind elements to the page. \n\nUsing `ng-bind` instead of <code ng-non-bindable>{{ }}</code> will prevent the unrendered <code ng-non-bindable>{{ }}</code> from showing up instead of empty elements being rendered.\n\nThe example from above can be rewritten to the following which will prevent the page from flickering with <code ng-non-bindable>{{ }}</code>:\n\n    <div>\n      <h1>Hello <span ng-bind=\"name\"></span></h1>\n    </div>\n\n### resolve\n\nWhen we're using routes with different pages, we have another option to prevent pages from rendering until some data has been loaded into the route.\n\nWe can specify data that we need loaded before the route is done loading by using the `resolve` key in our route options object.\n\nWhen the data loads successfully, then the route is changed and the view will show up. If it's not loaded successfully, then the route will **not** change and the `$routeChangeError` event will get fired.\n\n    angular.module('myApp', ['ngRoute'])\n    .config(function($routeProvider) {\n      $routeProvider\n      .when('/account', {\n        controller: 'AccountCtrl',\n        templateUrl: 'views/account.html',\n        resolve: {\n          // We specify a promise to be resolved\n          account: function($q) {\n            var d = $q.defer();\n            $timeout(function() {\n              d.resolve({\n                id: 1,\n                name: 'Ari Lerner'\n              })\n            }, 1000);\n            return d.promise;\n          }\n        }\n      })\n    });\n\nThe `resolve` option takes an object, by `key`/`value` where the `key` is the name of the resolve dependency and the `value` is either a string (as a service) or a function whose return value is taken as the dependency. \n\n> `resolve` is very useful when the resolve `value` returns a promise that becomes resolved or rejected.\n\nWhen the route loads, the `keys` from the resolve parameter are accessible as injectable dependencies:\n\n    angular.module('myApp')\n    .controller('AccountCtrl', \n      function($scope, account) {\n        $scope.account = account;\n    });\n\nWe can use the `resolve` key to pass back results from `$http` methods as well, as `$http` returns promises from it's method calls:\n\n    angular.module('myApp', ['ngRoute'])\n    .config(function($routeProvider) {\n      $routeProvider\n      .when('/account', {\n        controller: 'AccountCtrl',\n        templateUrl: 'views/account.html',\n        resolve: {\n          account: function($http) {\n            return $http.get('http://example.com/account.json')\n          }\n        }\n      })\n    });\n\nThe recommended usage of the `resolve` key is to define a service and let the service respond with the required data (plus, this makes testing much easier). To handle this, all we'll need to do is build the service.\n\nFirst, the `accountService`:\n\n    angular.module('app')\n    .factory('accountService', function($http, $q) {\n      return {\n        getAccount: function() {\n          var d = $q.defer();\n          $http.get('/account')\n          .then(function(response) {\n            d.resolve(response.data)\n          }, function err(reason) {\n            d.reject(reason);\n          });\n          return d.promise;\n        }\n      }\n    })\n\nWe can use this service method to replace the `$http` call from above:\n\n    angular.module('myApp', ['ngRoute'])\n    .config(function($routeProvider) {\n      $routeProvider\n      .when('/account', {\n        controller: 'AccountCtrl',\n        templateUrl: 'views/account.html',\n        resolve: {\n          // We specify a promise to be resolved\n          account: function(accountService) {\n            return accountService.getAccount()\n          }\n        }\n      })\n    });\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 3: Preventing flickering on Angular\" />\n</div>"),a.put("4.html",'## Conditionally applying CSS classes\n\nSwitching content based upon state is trivial inside of Angular, but how about styles? For instance, let\'s say that we have a list of elements, each with a checkbox to indicate to our users that we\'re selecting an element to run some action on the element or to indicate that a date in a calendar is today (like on the 25 days of Angular calendar front-page).\n\nAngular has a number of built-in ways that we can apply custom styling to DOM elements based upon different data states inside of our `$scope` objects.\n\n### ng-style\n\nThe `ng-style` directive is a built-in directive that allows us to set styles directly on a DOM element based upon angular expressions.\n\n<div ng-controller=\'DemoCtrl\'>\n  <h1 ng-style="{color:\'blue\'}">\n    Hello {{ name }}!\n  </h1>\n</div>\n\nAnd the corresponding code:\n\n    <div ng-controller=\'DemoCtrl\'>\n      <h1 ng-style="{color:\'blue\'}">\n        Hello {{ name }}!\n      </h1>\n    </div>\n\nThe `ng-style` directive accepts an object or a function that returns an object whose keys are CSS style names (such as `color`, `font-size`, etc) and the values that correspond to the style key names.\n\nIn the above example, we\'re _hard-coding_ the style color, but we can easily change that to either pass in a function that calculates and returns back the color or we can pass in an object that contains the specific values for the style.\n\nFor example, we can use a dropdown to set the specific style on the element and update a model with the selected color on the dropdown:\n\n<div ng-controller=\'DemoCtrl\'>\n  <select ng-model="selectedColor"\n    ng-options="color for color in allColors">\n  </select>\n  <h1 ng-style="{color:selectedColor}">\n    Hello {{ name }}!\n  </h1>\n</div>\n\nThis is powered by the following HTML:\n\n    <div ng-controller=\'DemoCtrl\'>\n      <select ng-model="selectedColor"\n        ng-options="color for color in allColors">\n      </select>\n      <h1 ng-style="{color:selectedColor}">\n        Hello {{ name }}!\n      </h1>\n    </div>\n\nThe `DemoCtrl` controller in this case looks like:\n\n    angular.module(\'adventApp\')\n    .controller(\'DemoCtrl\', function($scope) {\n      $scope.allColors = [\'blue\', \'red\', \'#abc\', \'#bedded\'];\n      $scope.selectedColor = \'blue\';\n    });\n\nWhen we change the `selectedColor`, the `ng-style` directive updates and our HTML changes.\n\n### ng-class\n\nThe `ng-class` directive is available for us to apply different css classes to a DOM object, instead of styles. Allowing us to set classes is often more powerful than setting styles directly as we can define our CSS design separate from our business logic of the app.\n\n<div ng-controller=\'DemoCtrl\'>\n  <button class="btn btn-primary"\n    ng-click="shouldHighlight=!shouldHighlight">\n    Highlight text\n  </button>\n  <h1 ng-class="{highlight:shouldHighlight}">\n    Hello {{ name }}!\n  </h1>\n</div>\n\nThe corresponding HTML looks like:\n\n    <div ng-controller=\'DemoCtrl\'>\n      <button ng-click="shouldHighlight=!shouldHighlight">\n        Highlight text\n      </button>\n      <h1 ng-class="{highlight:shouldHighlight}">\n        Hello {{ name }}!\n      </h1>\n    </div>\n\nFunctionally, it is similar to the `ng-style` directive as it accepts an object or a function that returns an object to define the classes that are to be applied to the DOM object.\n\nAs we can pass an object, we can set multiple conditionals on the element. This flexibility enables us to define custom design for our elements.\n\n<div ng-controller=\'DemoCtrl\'> \n  <button class="btn btn-primary"\n    ng-click="shouldHighlight=!shouldHighlight">\n    Highlight text\n  </button>\n  <button class="btn btn-primary"\n    ng-click="emphasize=!emphasize">\n    Emphasize\n  </button>\n  <h1 ng-class="{\n    important:emphasize,\n    highlight:shouldHighlight\n    }">\n    Hello {{ name }}!\n  </h1>\n</div>\n\nThe corresponding HTML looks like:\n\n    <div ng-controller=\'DemoCtrl\'> \n      <button ng-click="shouldHighlight=!shouldHighlight">\n        Highlight text\n      </button>\n      <button ng-click="emphasize=!emphasize">\n        Emphasize\n      </button>\n      <h1 ng-class="{\n        important:emphasize,\n        highlight:shouldHighlight\n        }">\n        Hello {{ name }}!\n      </h1>\n    </div>\n\n### custom directive\n\nAnother solution we can use to create custom styles for our elements is by setting up a directive to generate a custom CSS stylesheet for us. \n\n> When we need to set a large number of styles or we\'re setting a lot of styles for a particular custom page, we can use the custom directive is an efficient method. For instance, if we\'re building a site that we allow users to customize a site of theirs.\n\nA custom directive might look something like:\n\n    angular.module(\'myApp\')\n    .directive(\'myStylesheet\', function() {\n      return {\n        restrict: \'A\',\n        require: \'ngModel\',\n        scope: { ngModel: \'=\', className: \'@\' },\n        template: "<style " +\n          "type=\'text/stylesheet\'>" +\n        ".{{ className }} {" +\n        " font-size: {{ ngModel.fontsize }};" +\n        " color: {{ ngModel.color }};" +\n        "}" +\n        "</style>"\n      }\n    });\n\nThis directive will add a `<style>` tag to our page and allow us to pass in a single `ng-model` that can contain our custom styles.\n\nWe can use this directive simply by attaching our data model that contains our DOM element\'s style on the tag.\n\n    <div ng-controller=\'DemoCtrl\'>\n      <div my-stylesheet \n        ng-model="pageObject"\n        class-name="customPage" >\n      </div>\n      <div class="customPage">\n        <h1>Hello</h1>\n      </div>\n    </div>\n\nAnd the example:\n\n<div ng-controller=\'DemoCtrl\'>\n  <div my-stylesheet \n    ng-model="pageObject"\n    class-name="customPage" >\n  </div>\n  <div class="customPage">\n    <h1>Hello</h1>\n  </div>\n</div>\n\n<div class="article">\n  <div twitter-btn \n      text="Day 4: Conditionally applying css classes" />\n</div>\n'),a.put("5.html","## Setting configs in angular\n\nLike with any modern software development lifecycle that's destined for production, we're likely to have multiple deployment destinations. We might have a development server, a staging server, a production server, etc.\n\nFor each of these different scenarios, we're probably using different versions of the app, with the latest, bleeding edge version on development and staging and the stable version in production. \n\nEach of these likely is talking to different back-end services, is using different individual settings, such as which back-end url we're talking to, if we're in testing mode or not, etc.\n\nHere are a few of the multiple methods for how we can handle separating out our environments based upon deployment type. But first...\n\n### Configuration in Angular\n\nThe easiest way to use configuration inside of an Angular app is to set a constant with an object. For example:\n    \n    angular.module('myApp.config')\n    .constant('myConfig', {\n      'backend': 'http://localhost:3000/api',\n      'version': 0.2\n    })\n\nOur Angular objects now have access to this `myConfig` as a service and can _inject_ it just like any other Angular service to get access to the configuration variables:\n\n    angular.module('myApp', ['myApp.config'])\n    .factory('AccountSrv', \n    function($http, myConfig) {\n      return {\n        getAccount: function() {\n          return $http({\n            method: 'GET',\n            url: myConfig.backend + '/account'\n          })\n          // ...\n        }\n      }\n    });\n\n> In this example, we separate out the main app module from the one that contains the configuration and then later set it as a dependency of our main app. We'll follow this pattern for all examples in this snippet.\n\nWe'll use this same pattern in the few different methods to get config data in our app.\n\n### Server-side rendering\n\nIf we're using a server-side rendering engine, such as [Ruby on Rails](http://rubyonrails.org) or [NodeJS](http://nodejs.org) to deliver our application files, we can render out different JavaScript in/for the view.\n\nWhen we're using Rails, this process is pretty simple (we'll leave it as an exercise for the reader to implement in different back-end solutions). Presumably our configuration is set up using a hash object that looks similar to:\n\n    CONFIG = {\n      development: {\n        backend: \"http://localhost:3000\"\n      },\n      production: {\n        backend: \"http://my.apibackend.com\"\n      }\n    }\n\nWe can use this inside of our `index.html.haml` file to deliver rendered JavaScript to our browser.\n\n    <!-- Our app content -->\n    div{'ng-view' => \"\"}\n    :javascript\n      angular.module('myApp.config', [])\n      = .constant('myConfig', #{CONFIG[Rails.env]})\n    %script{:src => \"scripts/app.js\"}\n\nAs with any separate module in Angular, we'll add it as a dependency of our main app and we're good to go. We'll write our app code to include the `myApp.config` as a dependency and inject the configuration where we need it:\n\n    angular.module('myApp', ['myApp.config'])\n    .service('AccountService', \n      function($http, myConfig) {\n        this.getAccount = function() {\n          return $http({\n            method: 'GET',\n            url: myConfig.backend+'/account.json'\n          });\n        }\n    });\n\n### Client-side\n\nIf we are not using a back-end to serve our app and cannot depend upon html interpolation to render us back a configuration, we must depend upon configuration at compile-time.\n\nAs we can see above, we can manually set our configuration files if we're not depending upon any complex configuration or deploying only to one or two environments.\n\nWe will generate a file for each environment that contains the relevant configuration for each environment. For instance, the development might look like:\n\n    angular.module('myApp.development', [])\n    .constant('myConfig', {\n      backend: 'http://dev.myapp.com:3000'\n    })\n\nAnd the production might look like:\n\n    angular.module('myApp.production', [])\n    .constant('myConfig', {\n      backend: 'http://myapp.com'\n    })\n\nNow, inside of our app, we'll only need to switch a single line to define which configuration it should use in production. As we said before, we'll need to add one of these to our dependencies of our app module:\n\n    angular.module('myApp', ['myApp.production'])\n    // ...\n\nThe tricky part of this is that we'll need to manually change the configuration file for each build. Although it's not a difficult task for a single developer, this can become a giant hassle for larger teams.\n\nWe can use our build tools instead of doing this configuration switch manually. \n\n### Using grunt to automate the process\n\nUsing Grunt, we can use the `grunt-template` task. This task allows us to specify variables once and output a template of our choosing.\n\n> If you're using yeoman to build your angular apps (and you should be), this should look very familiar.\n\n#### Installation\n\nInstalling `grunt-template` is easy to do with npm:\n\n    $ npm install --save-dev grunt-template\n\nSince Gruntfiles are simply JavaScript, we can write our configuration in `.json` files in our path and load them from our `Gruntfile`. Since we're interested in using different environments, we'll set up our configuration files in a config directory.\n\nFor instance, the development config file in `config/development.json`:\n\n    {\n      backend: 'http://dev.myapi.com:3000'\n    }\n\nAnd the production version: `config/production.json`:\n\n    {\n      backend: 'http://myapp.com'\n    }\n\nWith these set, we'll need to tackle two other tasks:\n\n1. Loading the configuration for the current environment\n2. Compiling the config into a template\n\nTo load the configuration for the current environment, we'll simply use a bit of JavaScript in our `Gruntfile` to take care of this process. At the top of the `Gruntfile` we'll load the following to load the _right_ config into a variable we'll call `config`:\n    \n    var env = process.env.ENV || 'development';\n\n    var config =\n      require('./config/' + env + '.json');\n\nThis will set the configuration to load the object from `config/development.json` by default. We can pass the environment variable `ENV` to set it to production:\n\n    $ ENV=production grunt build\n\nNow all we need to do is compile our template. To do this, we'll use the `grunt-template` task:\n\n    grunt.initConfig({\n      // ...\n\n      'template': {\n        'config': {\n          'options': {\n            data: config\n          }\n        },\n        'files': {\n          // The .tmp destination is a yeoman\n          // default location. Set this dest\n          // to fit your own needs if not using\n          // yeoman\n          '.tmp/scripts/config.js': \n            ['src/config.js.tpl']\n        }\n      }\n      // ...\n    });\n\n    grunt.loadNpmTasks('grunt-template');\n    grunt.registerTask('default', ['template']);\n\nWe'll need to write our `src/config.js` template. This is the easy part as we'll simply generate the file we manually created above. In our `src/config.js.tpl`, add the following:\n\n    angular.module('myApp.config', [])\n    .constant('myConfig', function() {\n      backend: ''\n    });\n\nWith this automated process, we can eliminate the manual process of building our configuration entirely.\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 5: Configuration in Angular\" />\n</div>"),a.put("6.html","## The Power of Expression Binding\n\n10 out of 10 developers agree that they love data-binding in Angular. This glowing endorsement is well earned as it has saved us from having to write truck loads of boilerplate code while  increasing the testable surface area of our application exponentially.\n\nIn today's snippet, we look at some _magic_ we can do with Angular.\n\nNew developers to Angular tend to follow a learning curve when it comes to data-binding that usually goes in this order: \n\n* primitives\n* data-structures\n* expressions\n\nBinding to expressions is an incredibly powerful technique that opens the door to some really interesting possibilities. \n\nIn this article, we are walking through an example where we are going to move from simple data-binding to a fairly complex and interesting expression binding example.\n\n> Disclaimer: Binding to expressions are really powerful but if not used delicately, we'll end up paying a performance cost. The example, we're talking a about a prototype-ready example that is not appropriate with 1000s of items or logic-heavy expressions.\n\n### Simple Bindings\n\nWe are going to kick things off with a simple controller called `StepOneCtrl` that essentially has two properties and a method. \n\nWe will bind to `$scope.categories` array and then call `setCurrentCategory` to update the `currentCategory` property from the view. \n    \n    angular.module('myApp')\n    .controller('StepOneCtrl', ['$scope', function ($scope) {\n      // Example categories\n      $scope.categories = [\n          {name: 'one', display: 'Category One'},\n          {name: 'two', display: 'Category Two'},\n          {name: 'three', display: 'Category Three'},\n          {name: 'four', display: 'Category Four'}\n      ];\n\n      $scope.currentCategory = null;\n\n      $scope.setCurrentCategory = function (category) {\n        $scope.currentCategory = category;\n      };\n    }])\n\nIn the view, we are looping over the `categories` array with `ng-repeat` and create a `category-item` div for each object in the `categories` array. \n\nWithin the div we are binding the `display` property on the `category` object. \n\n<div class=\"container\" ng-controller=\"StepOneCtrl\">\n  <h2>Step One</h2>\n  <div class=\"row\">\n    <div \n      class=\"col-xs-3 category-item\" \n      ng-repeat=\"category in categories\" \n      ng-click=\"setCurrentCategory(category)\">\n      <strong>{{category.display}}</strong>\n    </div>\n  </div>\n  <h4>Active Category: {{currentCategory.display}}</h4>\n</div>\n\nThe source for the above example is:\n\n    <div class=\"container\" ng-controller=\"StepOneCtrl\">\n      <h2>Step One</h2>\n      <div class=\"row\">\n        <div class=\"col-xs-3 category-item\" \n          ng-repeat=\"category in categories\" \n          ng-click=\"setCurrentCategory(category)\">\n          <strong>{{category.display}}</strong>\n        </div>\n      </div>\n      <h4>Active Category: {{currentCategory.display}}</h4>\n    </div>\n\nWhen our user clicks on the `category-item div`, the `ng-click` directive calls `setCurrentCategory()` with the `category` object along with it.\n\nIn the `h4` tag below, we're simply binding the `currentCategory.display` data above as we would in simply data-binding.\n\n### A Basic Expression Binding\n\nAlbeit simple, the above example is impressive in its own right with how much we can accomplish in a little amount of code with data-binding. \n\nNow that the foundation has been laid and now we are going to extend it to allow us to bind to an expression with Angular.\n\nIn the demo code, we have create second controller called `StepTwoCtrl` that is identical to `StepOneCtrl` with an additional method `isCurrentCategory()` that returns a boolean if the current category matches the category argument.\n    \n    angular.module('myApp')\n    .controller('StepTwoCtrl', function ($scope) {\n      $scope.categories = [\n        {name: 'one', display: 'Category One'},\n        {name: 'two', display: 'Category Two'},\n        {name: 'three', display: 'Category Three'},\n        {name: 'four', display: 'Category Four'}\n      ];\n\n      $scope.currentCategory = null;\n\n      $scope.setCurrentCategory = function (category) {\n        $scope.currentCategory = category;\n      };\n      \n      $scope.isCurrentCategory = function (category) {\n        return $scope.currentCategory === category;\n      }\n    })\n\n> Generally speaking this about as complicated as we like bound expressions to be with simple evaluations that incur very little overhead.\n\nWe are going to use this method to dynamically set a class on our `category-item` div using the `ng-class` directive.\n\nUsing the `ng-class` directive, we'll dynamically apply a class based upon the result of an expression. In this case, we're applying the `current-active` class to the DOM element if the result of the `isCurrentCategory()` method is truthy:\n\n"+'<div class="container" ng-controller="StepTwoCtrl">\n  <div class="col-xs-3 category-item" \n    ng-repeat="category in categories" \n    ng-click="setCurrentCategory(category)" \n    ng-class="{\'current-active\':isCurrentCategory(category)}">\n    <strong>{{category.display}}</strong>\n  </div>\n</div>\n\nThe above example\'s code is:\n\n    <div class="col-xs-3 category-item" \n      ng-repeat="category in categories" \n      ng-click="setCurrentCategory(category)" \n      ng-class="{\'current-active\':isCurrentCategory(category)}">\n      <strong>{{category.display}}</strong>\n    </div>\n\nIn our CSS, the `current-active` class applies a 10 pixel border to the element it is applied to. Practically speaking, when a user clicks a category, there will be a grey border around it indicating that it is the active element. \n\n    .current-active {\n        border: 10px solid #666;\n    }\n\nWe have made just a few small additions to our code to dynamically update the UI based on the value of a simple expression.\n\n### Expressions All The Way Down\n\nThe final example where we get into some really powerful stuff using expressions within expressions. \n\n> We are going to _dynamically_ set a _dynamically-defined_ class based on the value of a _dynamically-defined_ variable.\n\nThe first thing we need to do to make this work is to create a class that corresponds to each category object we have in our categories array. \n\nThe idea is that _.current-one_ applies to the _category_ that has the name `one` and `.current-two` corresponds to the `category` that has the name `two`, etc.\n\n    .current-one {\n        border: 10px solid #457b97;\n    }\n\n    .current-two {\n        border: 10px solid #727372;\n    }\n\n    .current-three {\n        border: 10px solid #a66a48;\n    }\n\n    .current-four {\n        border: 10px solid #f60;\n    }\n\n> The only difference between these four classes is the color of the border defined in the above CSS.\n\nWe have declared a `StepThreeCtrl` that is the exact same as `StepTwoCtrl` and the HTML between the two examples are the same except for one new addition of the class variable we are dynamically setting in the view.\n\n<div ng-controller=\'StepThreeCtrl\'>\n  <div \n    class="col-xs-3 category-item btn btn-primary" \n    ng-repeat="category in categories" \n    ng-click="setCurrentCategory(category)" \n    ng-class="\n      {\'current-{{category.name}}\':\n        isCurrentCategory(category)\n    }">\n    <strong>{{category.display}}</strong>\n  </div>\n  <div class="clear"></div>\n</div>\n\nAnd the corresponding code:\n\n    <div \n      class="col-xs-3 category-item" \n      ng-repeat="category in categories" \n      ng-click="setCurrentCategory(category)" \n      ng-class="\n        {\'current-{{category.name}}\':\n          isCurrentCategory(category)\n      }">\n      <strong>{{category.display}}</strong>\n    </div>\n\nThis works is that Angular knows to evaluate the bindings before evaluating the `ng-class` expression.\n\nBinding to expressions is an incredibly powerful technique that allows you to accomplish some pretty impressive things when done responsibly. \n\nHope you had some fun with today\'s snippet. Stay tuned for tomorrow\'s and sign up for the newsletter for great Angular content every week.\n\nThe code for this article is **[here](http://embed.plnkr.co/UtbGUn9PmW3WnYLFVkWW/preview)**\n\n<div class="article">\n  <div twitter-btn \n      text="Day 6: Dynamic expression-based data-binding" />\n</div>'),a.put("7.html","## Optimizing Angular: the view (part 1)\n\nIt's incredibly easy for us to build prototypes of angular apps, but what about when we head to production? \n\nWill our app hold up? What about when we start dealing with large amounts of data? How can we make sure our application is still performant?\n\nIn this part 1 of optimizing angular, we'll walk through a few ways to optimize our view and why they are important.\n\n### Limiting the filter\n\nFilters are incredibly powerful ways to sort and manage our way through data in the view. They can help us format data, live-search data, etc.\n\n<table class=\"table table-striped\" ng-controller=\"FilterCtrl\">\n  <thead>\n    <tr>\n      <th>Filter</th>\n      <th>Input</th>\n      <th>Output</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>uppercase</td>\n      <td ng-non-bindable>{{ msg | uppercase }}</td>\n      <td>{{ msg | uppercase }}</td>\n    </tr>\n    <tr>\n      <td>currency</td>\n      <td ng-non-bindable>{{ 123.45 | currency }}</td>\n      <td>{{ 123.45 | currency }}</td>\n    </tr>\n    <tr>\n      <td>date</td>\n      <td ng-non-bindable>{{ today | date:'longDate' }}</td>\n      <td>{{ today | date:'longDate' }}</td>\n    </tr>\n    <tr>\n      <td>custom pig-latin filter</td>\n      <td ng-non-bindable>{{ msg | piglatin }}</td>\n      <td>{{ msg | piglatin }}</td>\n    </tr>\n  </tbody>\n</table>\n\nThe `piglatin` filter is a custom filter that looks like this:\n\n    angular.module('myApp')\n    .filter('piglatin', function() {\n      return function(text) {\n        text = text || '';\n        text = text\n          .replace(/\\b([aeiou][a-z]*)\\b/gi, \"$1way\");\n        text = text\n          .replace(/\\b([bcdfghjklmnpqrstvwxy]+)([a-z]*)\\b/gi, \"$2$1ay\");\n        return text;\n      }\n    });\n\nAlthough this is really incredibly useful to be able to do when we're prototyping, it's a cause for a lot of slow-down in the view. Every time that there is a `$digest` event, these filters will run for **every** value. That's exponentially worse when we're using `ng-repeat` and setting a filter on those values.\n\nHow do we get away with moving this functionality out of the view so it runs once, rather than every single time? Use the controller!\n\nWe can change the view above to hand us the filtered value so we don't need to do any parsing in the view ourselves.\n\n### Using filters in the controller\n\nTo get access to a filter inside of a controller, we'll need to _inject_ it into the controller. For instance:\n\n    angular.module('myApp')\n    .controller('HomeCtrl', function($scope, $filter) {\n      // We now have access to the $filter service\n    });\n\nWith the `$filter` service, we can fetch the filter we're interested in and apply it to our data. \n\nThe `date` example from above is a good candidate to provide a formatted date in the controller. We might hand back a `formatted_date` instead of using the raw date in the view:\n\n    angular.module('myApp')\n    .controller('HomeCtrl', function($scope, $filter) {\n      $scope.today = new Date();\n      var dateFilter = $filter('date');\n      $scope.formatted_today = dateFilter($scope.today, 'mediumDate');\n    })\n\nInstead of showing the `today` scope property in our view, we can simply show the `formatted_today` value and have the filter run in the background.\n\nHope you enjoyed today's snippet. Happy holidays and see you tomorrow!\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Optimizing Angular: the view (part 1)\" />\n</div>"),a.put("8.html","## Getting connected to data\n\nWebapps are only as interesting as the functionality and data that they provide us. Other than isolated apps such as calculators and solitaire games, data powers most functionality.\n\nIn this snippet, we're going to look at the _Angular Way_ of connecting to data sources. Specifically, we're going to work with the [flickr](http://www.flickr.com/services/api/) API to get public photos. Let's get started!\n\n### Naively getting data\n\nAngular provides us the `$http` service by default. The `$http` service is an interface to the native `XMLHttpRequestObject` provided by the browser that works directly with our angular apps. \n\nTo use the `$http` object, we'll first need to _inject_ it into our angular objects, like any other service we'll want to use:\n\n    angular.module('myApp')\n    .controller('HomeCtrl', function($scope, $http) {\n      // We now have access to the $http object\n    });\n\nWe're going to use the `$http` object to fetch photos from the public flickr API:\n\n<small>First random photo in the public data stream</small>\n<div ng-controller=\"FlickrApiCtrl\">\n  <a href=\"{{ photo.link }}\">\n    <img ng-src=\"{{ photo.media.m }}\"\n        alt=\"{{ photo.title }}\" />\n  </a>\n</div>\n\nThe example from above looks like:\n\n    <div ng-controller=\"FlickrApiCtrl\">\n      <a href=\"{{ photo.link }}\">\n        <img ng-src=\"{{ photo.media.m }}\"\n            alt=\"{{ photo.title }}\" />\n      </a>\n    </div>\n\nWe are fetching this photo from the flickr API using the `$http` service in our controller using:\n    \n    angular.module('myApp')\n    .controller('FlickrApiCtrl', function($scope, $http) {\n      $http({\n        method: 'JSONP',\n        url: 'http://api.flickr.com/services/feeds/photos_public.gne',\n        params: {\n          'format': 'json',\n          'jsoncallback': 'JSON_CALLBACK'\n        }\n      }).success(function(photos) {\n        $scope.photo = photos.items[0];\n      })\n    })\n\nNow, although this _works_, it's **not** the Angular Way of fetching photos. Using the `$http` service in our controller makes it incredibly difficult to test controllers and our functional logic for fetching from our external services.\n\n### The angular way\n\nRather than using our controllers to get our photo, we'll create a _service_ that will house our _flickr_ interactions.\n\nA service is a singleton object that we can both bundle our common services together as well as use to share data around our application. In this case, we'll create a `Flickr` service that bundles together our flickr functionality.\n\nAs the _Flickr_ API requires an API key for any non-public requests, we'll likely want to create a `provider` as we'll want to configure our api key on a per-app basis. \n\n> For information on the types of services we can create, check back to [day 1](#/day/1)\n\n    angular.module('adventApp')\n    .provider('Flickr', function() {\n      var base = 'http://api.flickr.com/services',\n          api_key = '';\n      \n      // Set our API key from the .config section\n      // of our app\n      this.setApiKey = function(key) {\n        api_key = key || api_key;\n      }\n      \n      // Service interface\n      this.$get = function($http) {\n        var service = {\n          // Define our service API here\n        };\n\n        return service;\n      }\n    })\n\nThis gives us the ability to set our `api_key` from Flickr in our `.config()` function on our app so we can use it later in our calls to the flickr api:\n\n    angular.module('myApp')\n    .config(function(FlickrProvider) {\n      FlickrProvider.setApiKey('xxxxxxxxxxxxxxxxxxxxxxx')\n    })\n\nInstead of using the `$http` service in our controller, we can take the entire functionality from above and copy+paste it into our service and return the promise.\n    \n    // ...\n    // Service interface\n    this.$get = function($http) {\n      var service = {\n        // Define our service API here\n        getPublicFeed: function() {\n          return $http({\n            method: 'JSONP',\n            url: base + '/feeds/photos_public.gne?format=json',\n            params: {\n              'api_key': api_key,\n              'jsoncallback': 'JSON_CALLBACK'\n            }\n          });\n        }\n      };\n\n      return service;\n    }\n    // ...\n\nOur `Flickr` service now has a single method: `getPublicFeed()` that we can use in our controller. This changes our entire call to the flickr api to look like:\n\n    angular.module('myApp')\n    .controller('FlickrApiCtrl', function($scope, Flickr) {\n      Flickr.getPublicFeed()\n      .then(function(data) {\n        $scope.newPhoto = data.data.items[0];\n      });\n    })\n\nOne final component that we like to change here is how the `data.data.items[0]` looks in the usage of our `getPublicFeed()` function. This is particularly unappealing and requires users of our service to know exactly what's going on behind the scenes. \n\nWe like to clean this up in our service by creating a _custom_ promise instead of returning back the `$http` promise. To do that, we'll use the `$q` service directly to create a promise and resolve that directly. We'll change our `getPublicFeed()` api method to look like:\n    \n    // ...\n    this.$get = function($q, $http) {\n      var service = {\n        getPublicFeed: function() {\n          var d = $q.defer();\n          $http({\n            method: 'JSONP',\n            url: base + '/feeds/photos_public.gne?format=json',\n            params: {\n              'api_key': api_key,\n              'jsoncallback': 'JSON_CALLBACK'\n            }\n          }).success(function(data) {\n            d.resolve(data);\n          }).error(function(reason) {\n            d.reject(reason);\n          })\n          return d.promise;\n        }\n      };\n\n      return service;\n    }\n    // ...\n\nNow we can call the `getPublicFeed()` without needing to use the extra `.data`:\n\n    Flickr.getPublicFeed()\n    .then(function(photos) {\n      $scope.newPhoto = photos.items[0];\n    });\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Getting connected to data\" />\n</div>"),a.put("9.html","## Real-time Presence Made Easy with AngularJS and Firebase\n\nIt is mind-boggling what can be accomplished these days within a modern web stack. Looking back only a few years ago, implementing a real-time tracker for counting the number of users on our pages in less than 50 lines of code seemed impossible. Today, we can easily do this in a matter of minutes in only a few lines of code.\n\n<div ng-controller='MainFirebaseCtrl'>\n  <h3><span ng-bind=\"totalViewers\"></span> viewers reading this snippet right now</h3>\n</div>\n\nIn this snippet, we are going to build this **real-time presence system** using AngularJS and Firebase and we'll do it in only a matter of minutes. Let's buckle up and get started!\n\n### Step One: Create a Firebase\n\nThe first thing we need to do is go to Firebase and create a free account or login if we already have an account.\n\n<a href=\"http://www.firebase.com/?utm_source=lukas&utm_medium=ng-newsletter&utm_campaign=angular\" class=\"btn btn-info\">Sign up with Firebase</a>\n\n> With a GitHub account, signing up takes 10 seconds or less (depending how quick your fingers are).\n\n![](/images/events/9/ng-realtime-00.png)\n\nOnce logged in, we can head to account overview and create a Firebase. Here, we'll create a unique name that's associated with our account and click **create**.\n\nThe name that we create our Firebase with indicates how we will fetch it later. For instance, if we named it `ng-advent-realtime`, then the URL to retrieve it from is `https://ng-advent-realtime.firebaseio.com/`. We'll hold on to this for a minute...\n\n### Step Two: Setting up our app\n\nNow that we have a Firebase set up, we need need to add the Firebase library to our project.\n\nWe just need to add the script tag below to our `index.html` page.\n\n    <script src=\"https://cdn.firebase.com/v0/firebase.js\"></script>\n\nWe are also kicking things off by bootstrapping our Angular app that we'll name `myRealtimeAdvent` by setting the `ng-app` directive in our DOM:\n\n    <html ng-app=\"myRealtimeAdvent\">\n\nWe'll also set the `MainCtrl` (that we'll create shortly) to drive the view:\n\n    <body ng-controller=\"MainCtrl\">\n\nNow, in the `script.js` file, we'll create the barebone version of our app, so that our `index.html`  page can actually load:\n\n    angular.module('myRealtimeAdvent', [])\n      .factory('PresenceService', function() {\n        // Define our presence service here\n      })\n      .controller('MainCtrl', ['$scope', \n        function($scope, PresenceService) {\n          // Controller goes here\n        }\n      ])\n\nNow we have an AngularJS application that has real-time Firebase capabilities waiting in the wings to be utilized.\n\n### Step Three: The Real-time Service Minus Real-time\n\nWe want to isolate the real-time presence functionality into its own service and so we are going to create the `PresenceService` for the rest of the application to use as we did above.\n\nFor the time being, we are going to declare the `PresenceService` and give it just enough functionality to have the appearance of being useful.\n\nWe have created a property `onlineUsers` and we are exposing this property via the `getOnlineUserCount()` method.\n\n    .factory('PresenceService', ['$rootScope',\n      function($rootScope) {\n        var onlineUsers = 0;\n        \n        var getOnlineUserCount = function() {\n          return onlineUsers;\n        }\n\n        return {\n          getOnlineUserCount: getOnlineUserCount\n        }\n      }\n    ]);\n\nThe `PresenceService` API has only the one method of `getOnlineUserCount()`, but that's all we'll need for now.\n\n### Step Four: A Real Real-time Service\n\nWe are going to be doing three distinct things with our Firebase and they are as follows: \n\n1. Create a main Firebase reference keeps track of how many connected users are on the page. We are also going to create a child Firebase reference that uniquely identifies us as a user.\n2. Create a presence reference that points to a special Firebase location (at `.info/connected`) that monitors a client connection state. We will use this reference to modify the state of our other references which will propagate to all of the connected clients.\n3. Listen to the main Firebase reference for changes in the user count so that we can update the rest of the AngularJS application.\n\n> We are not going to delve into every part of the Firebase API as it exists in this code but we strongly encourage checking out the [docs](https://www.firebase.com/docs/javascript/firebase/index.html) for further reading. \n\n#### Create Our References\n\nCreate a Firebase reference is a matter of creating a new Firebase object and sending in the location that you want to target. \n\nWe are creating a variable we'll call `listRef` that will serve as our main Firebase reference. We will also creating child reference called `userRef` that we will use to uniquely identify each user. \n\nAdditionally, we will create a `presenceRef` that will handle all the legwork for letting Firebase know when users come and go:\n\n    var listRef = new Firebase('https://ng-advent-realtime.firebaseio.com/presence/');\n    var userRef = listRef.push(); \n    var presenceRef = new Firebase('https://ng-advent-realtime.firebaseio.com/.info/connected');\n\n#### Announcing new users\n\nOnce the `presenceRef` is connected, we set the `userRef` to `true` on the page to add ourselves to the `listRef`. \n\nWe will also tell Firebase to remove us when we disconnect via `userRef.onDisconnect().remove()`:\n\n    // Add ourselves to presence list when online.\n    presenceRef.on('value', function(snap) {\n      if (snap.val()) {\n        userRef.set(true);\n        // Remove ourselves when we disconnect.\n        userRef.onDisconnect().remove();\n      }\n    });\n\n#### Announce Everyone Else\n\nNow that we have added ourselves to the list, we need to listen for when other users are added to the same location. \n\nWe can do this by listening for the `value` and then updating `onlineUsers` to `snap.numChildren` and then broadcasting an `onOnlineUser` event to all interested parties. \n\n    // Get the user count and notify the application\n    listRef.on('value', function(snap) {\n      onlineUsers = snap.numChildren();\n      $rootScope.$broadcast('onOnlineUser');\n    });\n\nThe complete `PresenceService` looks like:\n\n    .factory('PresenceService', ['$rootScope',\n      function($rootScope) {\n        var onlineUsers = 0;\n\n        // Create our references\n        var listRef = new Firebase('https://ng-advent-realtime.firebaseio.com/presence/');\n        var userRef = listRef.push(); // This creates a unique reference for each user\n        var presenceRef = new Firebase('https://ng-advent-realtime.firebaseio.com/.info/connected');\n\n        // Add ourselves to presence list when online.\n        presenceRef.on('value', function(snap) {\n          if (snap.val()) {\n            userRef.set(true);\n            // Remove ourselves when we disconnect.\n            userRef.onDisconnect().remove();\n          }\n        });\n\n        // Get the user count and notify the application\n        listRef.on('value', function(snap) {\n          onlineUsers = snap.numChildren();\n          $rootScope.$broadcast('onOnlineUser');\n        });\n\n        var getOnlineUserCount = function() {\n          return onlineUsers;\n        }\n\n        return {\n          getOnlineUserCount: getOnlineUserCount\n        }\n      }\n    ]);\n\nOur new `PresenceService` is complete and ready to be used within our application.\n\n### Step Four: It's Alive!\n\nAnd at this point, it we can simply listen for the `onOnlineUser` event on `$scope` and update `$scope.totalViewers` to the value returned by `PresenceService.getOnlineUserCount()`.\n\n    .controller('MainCtrl', ['$scope', 'PresenceService',\n      function($scope, PresenceService) {\n        $scope.totalViewers = 0;\n\n        $scope.$on('onOnlineUser', function() {\n          $scope.$apply(function() {\n            $scope.totalViewers =   \n              PresenceService.getOnlineUserCount();\n          });\n        });\n      }\n    ])\n\nIt is important to point out that because `onOnlineUser` is being broadcasted as a result of an event outside of the AngularJS universe, we need to use `$scope.$apply` to kick of a digest cycle within the `MainCtrl` otherwise we won't see any updates in our app. \n\n> Pro Tip: If you are binding to something that is not updating, it is possible that AngularJS is not able to detect that the value has changed. \n> The first thing that we do is wrap the expression in question in an `$apply` method call. It's also preferable to use the built-in AngularJS services where possible i.e. `$timeout` vs timeout.\n\nAnd now we can bind to `totalViewers` in our HTML and complete the circuit.\n\n    <h1>{{totalViewers}} viewers are viewing</h1>\n\nThe entire code for this article is available **[here](http://plnkr.co/edit/ND6ZS6m6wlrU3yXH7X8o?p=preview)**.\n\nThis article was written by [Lukas Ruebbelke](http://onehungrymind.com/) and [Ari Lerner](http://ng-newsletter.com).\n\n<div class=\"article\">\n  <div twitter-btn \n      text=\"Day 9: Creating a real-time presence system\" />\n</div>")
}]),angular.module("adventApp").run(["$templateCache",function(a){a.put("views/day.html",'<a href="#!/" class="btn btn-info">Go back</a> | <span>Day {{ day }}</span>\n<div btf-markdown="data">\n</div>\n\n<div addthis-toolbox></div>'),a.put("views/directives/calendar.html",'<div class="eventCalendar container"> \n  \n  <div class="calendarHead">\n    <h2>{{ monthName }}</h2>\n    <h3>{{ year }}</h3>\n  </div>\n  \n  <div class="header">\n    <span ng-repeat="d in weekDays" class="">\n      {{ d }}\n    </span>\n  </div> \n  \n  <div class="days"> \n    <div ng-repeat="week in month" class="month"> \n      <div ng-repeat="d in week track by $index">\n        <div ng-class="{\n            today: d == day && validDay(d),\n            past: todayOrPast(d),\n            lastDay: $last\n          }"\n          class="day"\n          ng-click="onDayClick(d)">\n            <span class="date" \n              ng-if="validDay(d)">\n              {{ d }}\n            </span>\n            <div class="no-date"\n              ng-if="!validDay(d)">&nbsp;</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>'),a.put("views/main.html",'<div class="container" ng-controller=\'MainCtrl\'>\n  <div event-calendar \n    ng-model="today"\n    on-click="getViewForDay(day)"\n    ></div>\n</div>')}]);